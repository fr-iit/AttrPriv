"""
PerBlur is extension of previous work proposed by Windenberg et al., (BlurMe: Inferring and Obfuscating
User Gender Based on Ratings ) and Strucks et al., (BlurM(or)e: Revisiting Gender Obfuscation
in the User-Item Matrix)

This code is extending previous github repository done by Christopher Strucks (Github Link: https://github.com/STrucks/BlurMore)

In PerBlur you need to :
    + Generate json file: "Confidence score" from imputation/knn/few_observed_entries
    + You will read the json file
"""

from sklearn.model_selection import GridSearchCV

import MovieLensData as MD
import RecSys_DataLoader as DL
import numpy as np
import Utils
import Classifiers
import matplotlib.pyplot as plt
import scipy.stats as ss
import pandas as pd
import json
import math
import ijson

class NpEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return super(NpEncoder, self).default(obj)

## ML1M For BlurMe
L_mm = [589.0,1233.0,2706.0,1090.0,2959.0,1250.0,2427.0,2490.0,1208.0,1266.0,3654.0,1748.0,1262.0,1396.0,1374.0,2700.0,1265.0,1089.0,1222.0,231.0,2770.0,1676.0,2890.0,1228.0,1136.0,3360.0,3298.0,1663.0,3811.0,2011.0,1261.0,233.0,3361.0,2366.0,1127.0,1276.0,3555.0,1214.0,3929.0,299.0,1304.0,3468.0,1095.0,150.0,1213.0,750.0,3082.0,6.0,111.0,3745.0,349.0,541.0,2791.0,785.0,1060.0,1294.0,1302.0,2012.0,1256.0,1292.0,2948.0,3683.0,3030.0,3836.0,913.0,2150.0,32.0,2826.0,2721.0,590.0,3623.0,2997.0,3868.0,2944.0,3147.0,1610.0,3508.0,2046.0,21.0,1249.0,10.0,1283.0,3760.0,2712.0,3617.0,3421.0,3552.0,3256.0,1079.0,3053.0,1517.0,3196.0,2662.0,1953.0,2670.0,3578.0,2371.0,3334.0,2028.0,2502.0,2951.0,2278.0,364.0,3462.0,924.0,2401.0,3163.0,2311.0,852.0,2916.0,1378.0,3384.0,1046.0,524.0,70.0,370.0,3035.0,3513.0,2917.0,3697.0,24.0,1957.0,3494.0,1912.0,3752.0,2013.0,3452.0,3928.0,2987.0,431.0,2759.0,1387.0,1882.0,1274.0,3327.0,3638.0,1288.0,2867.0,2728.0,2921.0,2433.0,161.0,3386.0,517.0,741.0,1287.0,1231.0,3062.0,2288.0,3753.0,529.0,3793.0,3052.0,2447.0,1320.0,3819.0,1303.0,922.0,3022.0,260.0,2640.0,858.0,493.0,3006.0,480.0,2410.0,333.0,1178.0,3814.0,2702.0,1203.0,2922.0,2761.0,1625.0,3366.0,223.0,3213.0,996.0,2188.0,2628.0,3358.0,2648.0,3788.0,953.0,999.0,3754.0,3910.0,3016.0,3863.0,303.0,3263.0,1080.0,786.0,3764.0,2105.0,3543.0,3018.0,2607.0,3681.0,592.0,145.0,2303.0,1682.0,553.0,1019.0,1272.0,3646.0,1544.0,235.0,908.0,3615.0,2792.0,3354.0,1204.0,2167.0,2455.0,1587.0,3629.0,1227.0,2901.0,2687.0,1883.0,104.0,1210.0,1201.0,3169.0,3098.0,3688.0,2409.0,3198.0,610.0,1923.0,1982.0,2501.0,165.0,2403.0,784.0,2871.0,2889.0,628.0,2300.0,417.0,3671.0,3100.0,1221.0,3914.0,1218.0,3608.0,3152.0,3429.0,3265.0,1794.0,952.0,1391.0,2518.0,410.0,3535.0,2333.0,1713.0,1263.0,3947.0,2605.0,707.0,2973.0,2795.0,1965.0,373.0,2970.0,3916.0,556.0,3703.0,95.0,466.0,2060.0,3066.0,3177.0,368.0,2088.0,1476.0,163.0,3422.0,58.0,1244.0,1689.0,2002.0,1929.0,599.0,1711.0,2259.0,1209.0,3524.0,1977.0,1371.0,3506.0,3104.0,3444.0,1693.0,965.0,1732.0,2600.0,3424.0,3755.0,2450.0,3826.0,2301.0,3801.0,3927.0,1298.0,198.0,2118.0,112.0,2478.0,471.0,1673.0,1246.0,2734.0,2529.0,2806.0,2094.0,1948.0,3710.0,2093.0,45.0,648.0,3504.0,2968.0,1722.0,1963.0,2840.0,1747.0,2476.0,1348.0,2411.0,3871.0,3175.0,2360.0,1092.0,3190.0,3729.0,1405.0,1007.0,2034.0,492.0,367.0,3248.0,3806.0,537.0,3619.0,1702.0,3210.0,1734.0,2644.0,2252.0,1597.0,1200.0,1401.0,1416.0,107.0,383.0,1379.0,2764.0,2116.0,1036.0,60.0,2682.0,2115.0,1317.0,1876.0,3394.0,1254.0,2243.0,2606.0,3925.0,1503.0,3869.0,1612.0,390.0,328.0,3903.0,3375.0,2422.0,3087.0,1627.0,3770.0,273.0,3430.0,3678.0,3576.0,2377.0,3113.0,196.0,3036.0,3525.0,1584.0,799.0,2236.0,3267.0,954.0,2412.0,1690.0,1879.0,30.0,1205.0,1252.0,2470.0,2686.0,3397.0,2367.0,2015.0,3804.0,3002.0,1377.0,3740.0,1594.0,1978.0,2456.0,3821.0,2038.0,891.0,1342.0,2669.0,3628.0,1966.0,2808.0,3324.0,366.0,3634.0,3794.0,3509.0,1063.0,2467.0,3420.0,324.0,3773.0,1927.0,1241.0,2231.0,3742.0,1960.0,1390.0,1542.0,2672.0,83.0,1376.0,3174.0,2395.0,1248.0,3362.0,2029.0,225.0,2362.0,2491.0,110.0,3527.0,1267.0,3203.0,511.0,1025.0,2769.0,3792.0,3785.0,1973.0,1952.0,326.0,2541.0,3593.0,3698.0,2058.0,2459.0,1375.0,3273.0,1278.0,154.0,1179.0,2009.0,1976.0,300.0,735.0,504.0,2423.0,1365.0,2676.0,3300.0,3701.0,2793.0,2915.0,963.0,3505.0,2178.0,1920.0,3934.0,813.0,3357.0,2580.0,2430.0,1975.0,1695.0,2542.0,1701.0,2195.0,2560.0,1215.0,637.0,3252.0,440.0,100.0,540.0,3091.0,2654.0,1885.0,2372.0,2384.0,1979.0,3507.0,1414.0,1251.0,1187.0,3316.0,1609.0,2841.0,2149.0,1986.0,2624.0,1305.0,2287.0,1858.0,2004.0,1260.0,1687.0,1785.0,1257.0,516.0,3725.0,1358.0,2253.0,3918.0,157.0,2374.0,2976.0,1100.0,1866.0,3802.0,2140.0,1646.0,737.0,2092.0,2165.0,1604.0,2772.0,2249.0,3500.0,193.0,3037.0,665.0,1196.0,3728.0,194.0,555.0,1431.0,3851.0,3564.0,2322.0,1370.0,3379.0,3099.0,3188.0,321.0,2863.0,2492.0,13.0,3840.0,2378.0,1255.0,3271.0,3946.0,1550.0,1017.0,3086.0,3189.0,1445.0,3074.0,3908.0,3000.0,1837.0,2296.0,340.0,2306.0,1238.0,3551.0,1389.0,3689.0,1884.0,800.0,3693.0,2526.0,2327.0,3180.0,387.0,1193.0,3254.0,3614.0,2829.0,459.0,448.0,3033.0,1779.0,458.0,3477.0,1388.0,1289.0,748.0,3289.0,1024.0,1411.0,2458.0,3569.0,2836.0,3948.0,1057.0,2877.0,2633.0,3078.0,2289.0,514.0,3831.0,3733.0,3311.0,535.0,361.0,290.0,2027.0,1408.0,1198.0,948.0,1356.0,2522.0,1859.0,2321.0,2356.0,2660.0,3017.0,1245.0,1985.0,1395.0,1340.0,1103.0,2781.0,3812.0,2861.0,544.0,1974.0,474.0,3276.0,2497.0,2323.0,3304.0,1980.0,2851.0,3682.0,1981.0,1633.0,2620.0,3068.0,1129.0,304.0,2457.0,2530.0,1931.0,125.0,548.0,2148.0,3487.0,2651.0,1735.0,2896.0,3632.0,89.0,680.0,2113.0,3519.0,1008.0,2387.0,2912.0,325.0,3159.0,171.0,3355.0,892.0,2593.0,990.0,3669.0,1051.0,1301.0,1983.0,711.0,2828.0,2924.0,523.0,3368.0,2521.0,3148.0,296.0,2488.0,1867.0,1382.0,3917.0,2626.0,2883.0,522.0,3846.0,2882.0,1639.0,3015.0,3639.0,2212.0,1665.0,3834.0,1297.0,829.0,15.0,2083.0,534.0,2942.0,2898.0,1247.0,3008.0,2663.0,861.0,1180.0,2817.0,155.0,3266.0,3039.0,2107.0,419.0,761.0,3469.0,3544.0,2210.0,1970.0,3338.0,3307.0,1161.0,3048.0,1054.0,432.0,2796.0,2425.0,3879.0,2117.0,3747.0,3930.0,685.0,2525.0,742.0,1128.0,204.0,3709.0,3417.0,2656.0,3937.0,1844.0,1237.0,2885.0,3073.0,888.0,2181.0,1091.0,3214.0,3880.0,1273.0,315.0,3809.0,436.0,3115.0,3387.0,2111.0,3694.0,468.0,2775.0,1752.0,3301.0,2810.0,2347.0,1696.0,2837.0,1341.0,2023.0,1591.0,565.0,3769.0,2961.0,518.0,788.0,2134.0,3120.0,3771.0,1581.0,246.0,3767.0,1130.0,44.0,63.0,527.0,893.0,3626.0,2843.0,3590.0,456.0,3817.0,487.0,1726.0,2645.0,810.0,860.0,1058.0,3529.0,3094.0,2907.0,2334.0,2344.0,2641.0,3230.0,2271.0,1016.0,151.0,377.0,1494.0,2402.0,450.0,3538.0,3717.0,2694.0,2745.0,2389.0,3780.0,3141.0,3865.0,281.0,2472.0,3441.0,3272.0,3734.0,2255.0,850.0,1750.0,2507.0,2272.0,2991.0,3021.0,3498.0,2983.0,3766.0,1810.0,1437.0,2024.0,842.0,1184.0,2725.0,1488.0,2064.0,2731.0,1999.0,2139.0,2965.0,1078.0,409.0,3692.0,3758.0,1924.0,2019.0,1596.0,137.0,760.0,2971.0,569.0,897.0,305.0,1083.0,2238.0,2701.0,1753.0,3364.0,3643.0,3351.0,2404.0,2597.0,1459.0,2835.0,3680.0,1945.0,2567.0,673.0,3568.0,3516.0,3830.0,2726.0,2515.0,611.0,947.0,121.0,568.0,1176.0,1998.0,1640.0,1626.0,3032.0,1601.0,835.0,1739.0,2755.0,388.0,484.0,1279.0,1326.0,172.0,2787.0,2977.0,3596.0,2939.0,1855.0,3306.0,3372.0,1865.0,1725.0,3241.0,1432.0,3089.0,2179.0,870.0,2671.0,944.0,2325.0,968.0,2535.0,2041.0,2802.0,2723.0,882.0,3695.0,2985.0,3658.0,2471.0,3365.0,1516.0,1113.0,667.0,378.0,2981.0,3415.0,3401.0,764.0,2897.0,297.0,3810.0,210.0,2773.0,1787.0,3901.0,268.0,3339.0,3402.0,2647.0,3221.0,1450.0,416.0,719.0,3385.0,3183.0,528.0,2169.0,1834.0,3490.0,1733.0,3069.0,178.0,1135.0,2929.0,2460.0,2751.0,2780.0,998.0,2475.0,20.0,292.0,3919.0,255.0,505.0,811.0,88.0,3920.0,3347.0,547.0,1527.0,3622.0,479.0,2121.0,2852.0,3952.0,424.0,1219.0,1869.0,413.0,393.0,567.0,2866.0,2264.0,2055.0,214.0,3898.0,3803.0,3737.0,921.0,3034.0,2294.0,3935.0,1366.0,1154.0,3412.0,3395.0,322.0,354.0,3659.0,2675.0,1997.0,849.0,2017.0,2615.0,1322.0,118.0,2025.0,2986.0,3873.0,1889.0,442.0,1793.0,496.0,3476.0,259.0,1399.0,3807.0,3233.0,831.0,1992.0,2061.0,2536.0,3822.0,3416.0,2652.0,2086.0,2283.0,3520.0,694.0,1890.0,2822.0,1458.0,2068.0,681.0,180.0,3690.0,2673.0,2482.0,3933.0,2040.0,423.0,885.0,1330.0,116.0,3572.0,1329.0,762.0,3146.0,159.0,2076.0,1677.0,3239.0,2462.0,3700.0,2842.0,1783.0,2634.0,3759.0,2979.0,1860.0,2328.0,3326.0,3432.0,3319.0,1655.0,1760.0,2437.0,632.0,3893.0,275.0,2594.0,16.0,2164.0,1351.0,1153.0,2244.0,1942.0,2171.0,3774.0,2815.0,3818.0,3392.0,2073.0,101.0,557.0,3178.0,3491.0,1120.0,2753.0,1281.0,2665.0,1589.0,1468.0,274.0,936.0,3585.0,1901.0,1635.0,1535.0,394.0,330.0,1880.0,2566.0,2326.0,2119.0,2591.0,2596.0,3765.0,1406.0,3168.0,443.0,2215.0,202.0,1085.0,2627.0,3143.0,3603.0,747.0,3106.0,2520.0,3095.0,1670.0,3031.0,2196.0,2905.0,1551.0,1439.0,3503.0,3448.0,793.0,2914.0,1971.0,437.0,1910.0,1230.0,3129.0,3636.0,2993.0,2189.0,3847.0,3942.0,3820.0,3799.0,1355.0,2809.0,1780.0,3125.0,2839.0,3784.0,287.0,3149.0,3845.0,2003.0,2609.0,3789.0,2275.0,731.0,1623.0,3262.0,1746.0,566.0,1532.0,2408.0,355.0,841.0,1044.0,3670.0,3537.0,181.0,3648.0,3726.0,1170.0,3691.0,2350.0,464.0,12.0,3816.0,2376.0,3602.0,3309.0,623.0,2407.0,2137.0,1946.0,1574.0,3939.0,1420.0,2390.0,2707.0,1519.0,1543.0,1504.0,1190.0,1851.0,1771.0,2473.0,2902.0,2537.0,3275.0,2441.0,2748.0,3727.0,2544.0,1918.0,122.0,2847.0,1533.0,2098.0,1474.0,3425.0,3020.0,486.0,3201.0,3768.0,780.0,3909.0,1632.0,1791.0,3473.0,3139.0,710.0,725.0,1583.0,1853.0,3367.0,2512.0,76.0,1160.0,3673.0,1826.0,2943.0,2082.0,1886.0,749.0,2571.0,2830.0,1472.0,3157.0,2170.0,293.0,3938.0,3154.0,1895.0,2256.0,2187.0,2112.0,2237.0,3407.0,1846.0,513.0,716.0,3731.0,3875.0,3409.0,840.0,2286.0,1692.0,2913.0,925.0,1529.0,1703.0,2351.0,177.0,1606.0,1772.0,3587.0,1680.0,663.0,503.0,1325.0,2528.0,828.0,263.0,3884.0,2610.0,2483.0,2201.0,3012.0,564.0,2295.0,743.0,704.0,3633.0,2153.0,3049.0,3322.0,434.0,2418.0,607.0,1915.0,2737.0,2618.0,626.0,2192.0,3718.0,1404.0,3610.0,1490.0,66.0,2391.0,1497.0,209.0,336.0,941.0,1684.0,1741.0,3.0,3651.0,1253.0,2994.0,3532.0,3775.0,720.0,2383.0,1955.0,967.0,3652.0,970.0,433.0,2960.0,1715.0,1493.0,674.0,3713.0,937.0,463.0,1531.0,2349.0,851.0,572.0,126.0,3310.0,744.0,1415.0,2332.0,2175.0,1599.0,563.0,585.0,3514.0,703.0,3140.0,2353.0,2480.0,3744.0,158.0,2740.0,9.0,3349.0,3676.0,3398.0,3075.0,3025.0,1743.0,1598.0,1385.0,162.0,485.0,1454.0,2200.0,881.0,59.0,2335.0,765.0,3777.0,1284.0,2894.0,2089.0,133.0,3123.0,1148.0,2659.0,1003.0,2666.0,1147.0,3047.0,536.0,2523.0,3427.0,1053.0,989.0,2183.0,2499.0,2767.0,3661.0,2818.0,430.0,2400.0,1037.0,2804.0,1731.0,1142.0,2419.0,3118.0,2234.0,1482.0,1679.0,2209.0,2868.0,3313.0,1068.0,987.0,702.0,1006.0,854.0,1704.0,2393.0,1412.0,3523.0,3228.0,755.0,3294.0,2250.0,2211.0,2045.0,2945.0,2246.0,1369.0,1144.0,1567.0,2268.0,3076.0,426.0,2869.0,3890.0,2589.0,2554.0,384.0,3640.0,630.0,679.0,2524.0,460.0,2302.0,1984.0,3536.0,2988.0,1617.0,1138.0,1038.0,445.0,2911.0,71.0,1457.0,561.0,365.0,2207.0,1539.0,1335.0,3374.0,1603.0,617.0,734.0,3135.0,2001.0,2689.0,3121.0,53.0,81.0,3511.0,2824.0,796.0,1891.0,2936.0,3431.0,3142.0,2668.0,3110.0,3331.0,1928.0,815.0,1652.0,103.0,3167.0,2754.0,3842.0,2935.0,3280.0,2510.0,1436.0,78.0,2819.0,1728.0,1871.0,2705.0,1842.0,3470.0,526.0,3940.0,1461.0,3776.0,1650.0,241.0,863.0,2744.0,889.0,510.0,533.0,3531.0,759.0,175.0,1149.0,439.0,2834.0,980.0,1194.0,3832.0,729.0,3762.0,2545.0,3380.0,2232.0,3295.0,478.0,2095.0,56.0,886.0,3860.0,3749.0,2667.0,3573.0,2317.0,2538.0,2557.0,2887.0,992.0,1040.0,1830.0,766.0,1718.0,3127.0,2646.0,1861.0,2102.0,818.0,3116.0,3042.0,1425.0,228.0,188.0,2341.0,3371.0,1426.0,3465.0,643.0,3320.0,909.0,3563.0,1903.0,3867.0,570.0,878.0,1282.0,184.0,3732.0,728.0,331.0,2185.0,3092.0,1475.0,3187.0,313.0,3521.0,2813.0,3410.0,2451.0,14.0,3601.0,3208.0,1972.0,3400.0,1744.0,1350.0,3783.0,3282.0,3756.0,1334.0,1361.0,1291.0,2638.0,874.0,664.0,1164.0,2318.0,551.0,2416.0,2904.0,1925.0,2760.0,3013.0,3575.0,2858.0,2221.0,2602.0,2223.0,2999.0,2265.0,847.0,2878.0,2394.0,2623.0,1098.0,1121.0,1849.0,1538.0,598.0,3346.0,3588.0,3342.0,809.0,3800.0,3627.0,3905.0,3850.0,2509.0,2032.0,1528.0,573.0,3182.0,244.0,3096.0,2071.0,19.0,1168.0,1664.0,3235.0,1839.0,2658.0,310.0,2016.0,227.0,867.0,2166.0,1887.0,3056.0,1647.0,1062.0,1817.0,3344.0,33.0,696.0,3216.0,2611.0,1864.0,2204.0,1502.0,3433.0,545.0,3735.0,1433.0,3205.0,3434.0,1234.0,2486.0,3442.0,682.0,2290.0,3736.0,2415.0,1004.0,1071.0,454.0,2632.0,2582.0,3381.0,1534.0,3779.0,3751.0,1681.0,1825.0,3889.0,3389.0,782.0,3837.0,3084.0,3900.0,2397.0,1553.0,2691.0,757.0,666.0,3184.0,2239.0,3318.0,2708.0,3647.0,1907.0,3292.0,3482.0,190.0,3172.0,96.0,791.0,961.0,3876.0,75.0,633.0,1991.0,1455.0,3533.0,130.0,2534.0,401.0,2794.0,758.0,2129.0,684.0,690.0,2735.0,3778.0,3377.0,2452.0,3207.0,1471.0,288.0,2176.0,1675.0,2124.0,1770.0,2310.0,3333.0,2674.0,23.0,3891.0,3548.0,1039.0,2821.0,1466.0,3404.0,672.0,977.0,3054.0,488.0,3212.0,3314.0,789.0,3743.0,958.0,2825.0,1969.0,981.0,385.0,1878.0,642.0,1102.0,1510.0,792.0,2776.0,1124.0,1125.0,2811.0,2033.0,2736.0,1795.0,3305.0,1590.0,823.0,706.0,3443.0,2191.0,2138.0,884.0,820.0,3687.0,2730.0,655.0,578.0,2865.0,3242.0,2533.0,1872.0,2292.0,3464.0,3772.0,3522.0,2716.0,2343.0,120.0,1816.0,3337.0,2932.0,1649.0,3463.0,2649.0,1189.0,428.0,312.0,614.0,827.0,2955.0,580.0,718.0,67.0,3283.0,1119.0,3485.0,1558.0,508.0,3653.0,601.0,1764.0,1908.0,2584.0,3026.0,582.0,1315.0,657.0,660.0,3437.0,3158.0,2281.0,1134.0,2135.0,2163.0,3040.0,3458.0,3243.0,3887.0,2242.0,467.0,138.0,530.0,584.0,701.0,3229.0,2758.0,2563.0,2749.0,402.0,574.0,1152.0,895.0,3782.0,1548.0,3070.0,1799.0,3359.0,1339.0,311.0,3151.0,123.0,1055.0,1224.0,1989.0,2996.0,2539.0,3085.0,1123.0,1470.0,1619.0,2578.0,658.0,2463.0,344.0,453.0,1905.0,1101.0,77.0,3236.0,515.0,576.0,2152.0,3297.0,3440.0,1714.0,2428.0,1520.0,183.0,2713.0,3574.0,1486.0,826.0,763.0,1070.0,2214.0,579.0,644.0,651.0,859.0,1118.0,1145.0,1630.0,1852.0,2235.0,2277.0,2484.0,2742.0,3220.0,3321.0,962.0,3403.0,2131.0,3597.0,1873.0,3941.0,3317.0,2308.0,1364.0,2895.0,3828.0,991.0,226.0,2879.0,200.0,1392.0,730.0,771.0,3888.0,3488.0,1165.0,2592.0,1651.0,3644.0,1877.0,2474.0,3666.0,3057.0,3277.0,2556.0,1820.0,2850.0,3001.0,790.0,3130.0,2420.0,717.0,774.0,1511.0,2812.0,142.0,1115.0,1386.0,3312.0,3621.0,3373.0,3237.0,93.0,1133.0,2386.0,2583.0,649.0,258.0,3065.0,1440.0,2636.0,1773.0,1863.0,1360.0,3904.0,2254.0,3797.0,3291.0,2519.0,3722.0,993.0,1293.0,2218.0,1613.0,132.0,1724.0,868.0,3336.0,583.0,865.0,638.0,316.0,1430.0,1993.0,732.0,843.0,975.0,2213.0,2217.0,3202.0,3376.0,2880.0,3378.0,2771.0,814.0,1217.0,521.0,3460.0,853.0,3945.0,3899.0,1419.0,135.0,2579.0,472.0,213.0,167.0,2527.0,2240.0,374.0,3486.0,250.0,2493.0,3419.0,451.0,2906.0,964.0,2552.0,2313.0,1809.0,1526.0,3253.0,1258.0,2984.0,2364.0,1310.0,2893.0,1343.0,2661.0,1212.0,3611.0,1935.0,2643.0,2947.0,2982.0,714.0,3637.0,1501.0,836.0,229.0,2941.0,3439.0,147.0,80.0,3258.0,896.0,745.0,3674.0,2159.0,923.0,1270.0,2461.0,2729.0,2637.0,1464.0,2798.0,353.0,1332.0,1707.0,1240.0,502.0,2859.0,3600.0,2108.0,973.0,1359.0]
L_ff = [920.0,3844.0,2369.0,1088.0,3534.0,1207.0,17.0,1041.0,3512.0,3418.0,1188.0,902.0,2336.0,3911.0,1441.0,141.0,2690.0,265.0,928.0,39.0,2762.0,906.0,838.0,2657.0,2125.0,3565.0,1967.0,2291.0,914.0,932.0,1620.0,2160.0,247.0,222.0,261.0,2881.0,2145.0,3072.0,1028.0,1956.0,2080.0,1286.0,3798.0,1959.0,28.0,2248.0,3247.0,3594.0,3155.0,1345.0,531.0,1277.0,593.0,3044.0,3083.0,3005.0,1296.0,1380.0,2020.0,105.0,1678.0,1608.0,2572.0,3791.0,1104.0,2144.0,318.0,1186.0,1073.0,595.0,2724.0,1641.0,351.0,2908.0,357.0,3079.0,1688.0,3556.0,3186.0,2406.0,224.0,1962.0,1480.0,3251.0,11.0,345.0,3526.0,1784.0,951.0,3668.0,2485.0,1958.0,2739.0,916.0,950.0,2443.0,3684.0,236.0,904.0,898.0,587.0,552.0,339.0,2143.0,3481.0,3097.0,3067.0,1449.0,47.0,36.0,616.0,3281.0,1259.0,661.0,2348.0,562.0,3606.0,2496.0,2085.0,1271.0,372.0,2857.0,3325.0,1394.0,1081.0,1032.0,918.0,1409.0,314.0,899.0,733.0,2245.0,381.0,2316.0,232.0,2405.0,2677.0,1066.0,2396.0,2282.0,1059.0,2622.0,1941.0,959.0,3479.0,3124.0,1197.0,1777.0,915.0,955.0,1648.0,3705.0,3061.0,22.0,34.0,926.0,1285.0,1.0,2875.0,1150.0,3545.0,2664.0,2155.0,1097.0,262.0,3915.0,971.0,2581.0,2186.0,3702.0,3105.0,2280.0,3604.0,3515.0,1513.0,2331.0,1500.0,2803.0,945.0,2639.0,3051.0,837.0,3408.0,457.0,1801.0,2506.0,4.0,2469.0,270.0,46.0,1235.0,2355.0,2346.0,1357.0,461.0,3255.0,3176.0,3350.0,2975.0,2014.0,3936.0,2072.0,1353.0,2006.0,1397.0,2612.0,1099.0,1367.0,3270.0,938.0,2357.0,94.0,412.0,1518.0,3591.0,538.0,2000.0,2846.0,708.0,329.0,2995.0,653.0,1280.0,5.0,337.0,588.0,2546.0,1022.0,2692.0,2468.0,1569.0,905.0,1031.0,900.0,2565.0,1541.0,2926.0,2312.0,3730.0,1900.0,2718.0,1021.0,597.0,3185.0,2746.0,327.0,2805.0,3101.0,2920.0,289.0,3269.0,1674.0,477.0,3686.0,2077.0,2801.0,581.0,2133.0,3257.0,3724.0,3296.0,3554.0,3478.0,1479.0,3720.0,491.0,1014.0,1236.0,3134.0,695.0,1645.0,2763.0,1013.0,1096.0,1856.0,2827.0,248.0,1875.0,3211.0,3672.0,215.0,3224.0,3396.0,469.0,1897.0,3528.0,2870.0,917.0,930.0,1654.0,1009.0,3328.0,3786.0,1307.0,907.0,3870.0,1422.0,2206.0,2114.0,2324.0,2575.0,919.0,3467.0,1047.0,1806.0,350.0,230.0,2505.0,48.0,182.0,1537.0,144.0,170.0,2141.0,1916.0,3081.0,1191.0,1086.0,2598.0,805.0,546.0,3179.0,1407.0,153.0,2635.0,2057.0,2037.0,1327.0,3436.0,3145.0,446.0,2193.0,3341.0,942.0,1337.0,1913.0,195.0,2132.0,1804.0,3562.0,3706.0,1172.0,1042.0,2946.0,317.0,2514.0,3112.0,1093.0,1035.0,3499.0,1616.0,3011.0,2151.0,1111.0,1545.0,613.0,1043.0,2774.0,2154.0,2621.0,52.0,3060.0,2617.0,3723.0,206.0,3133.0,1821.0,1964.0,2504.0,211.0,2454.0,532.0,218.0,3156.0,43.0,1586.0,1126.0,2096.0,455.0,927.0,2007.0,778.0,2097.0,3117.0,539.0,691.0,943.0,1947.0,3567.0,1223.0,2194.0,2081.0,1268.0,1300.0,2747.0,1892.0,830.0,1914.0,1573.0,3302.0,671.0,3471.0,3825.0,3111.0,1064.0,1299.0,252.0,3004.0,2091.0,931.0,2337.0,605.0,1183.0,61.0,1020.0,3763.0,1727.0,74.0,3599.0,3708.0,465.0,29.0,3741.0,3457.0,2399.0,781.0,69.0,3635.0,3808.0,650.0,3249.0,2732.0,1621.0,1686.0,3435.0,3857.0,3299.0,3426.0,1225.0,2247.0,176.0,343.0,2972.0,2853.0,1033.0,272.0,2788.0,1393.0,2918.0,2432.0,3285.0,203.0,1465.0,801.0,1917.0,2431.0,342.0,3714.0,2967.0,3553.0,79.0,3951.0,1683.0,3071.0,3102.0,302.0,497.0,3655.0,2261.0,237.0,3260.0,3877.0,2174.0,2266.0,3716.0,3699.0,2782.0,1769.0,266.0,1173.0,2693.0,3093.0,1029.0,253.0,1658.0,277.0,279.0,848.0,839.0,2365.0,2738.0,1264.0,271.0,1643.0,1269.0,2043.0,3855.0,1030.0,1346.0,2104.0,2052.0,2161.0,2142.0,2719.0,2574.0,2053.0,1410.0,3912.0,1381.0,3660.0,2446.0,2613.0,2314.0,1132.0,978.0,1498.0,348.0,2168.0,3466.0,669.0,3649.0,2448.0,2899.0,1611.0,2940.0,362.0,8.0,1463.0,26.0,3557.0,1994.0,1758.0,414.0,1027.0,2681.0,3088.0,3483.0,140.0,3835.0,3391.0,1936.0,2205.0,2123.0,3861.0,332.0,3450.0,2585.0,2050.0,3618.0,425.0,709.0,1605.0,276.0,3827.0,846.0,2267.0,2359.0,2952.0,2786.0,3923.0,1939.0,1290.0,3240.0,3388.0,1547.0,338.0,3712.0,722.0,3063.0,242.0,715.0,3679.0,3571.0,3286.0,668.0,1069.0,2276.0,1438.0,2511.0,2688.0,1657.0,2900.0,3161.0,168.0,3539.0,199.0,2888.0,1624.0,3675.0,2436.0,647.0,724.0,82.0,542.0,1362.0,2424.0,117.0,2208.0,2109.0,3246.0,3019.0,3605.0,1904.0,360.0,267.0,2966.0,3620.0,700.0,3122.0,482.0,2741.0,334.0,2100.0,500.0,2173.0,1615.0,358.0,280.0,3932.0,369.0,3547.0,3739.0,3132.0,3849.0,1592.0,1788.0,875.0,2106.0,3719.0,3107.0,1423.0,3546.0,3839.0,1417.0,3566.0,3795.0,670.0,933.0,1177.0,520.0,2146.0,152.0,208.0,1175.0,3449.0,3274.0,27.0,3872.0,2733.0,207.0,2969.0,2927.0,957.0,2442.0,113.0,2078.0,2923.0,2084.0,1585.0,877.0,1807.0,1848.0,3882.0,3790.0,3926.0,2820.0,1629.0,3922.0,1571.0,3046.0,832.0,3896.0,2101.0,1600.0,3510.0,1087.0,294.0,2548.0,2453.0,386.0,2799.0,239.0,191.0,1717.0,1509.0,2099.0,911.0,1015.0,2590.0,85.0,3077.0,3264.0,3340.0,940.0,3114.0,146.0,1729.0,2498.0,309.0,1034.0,3484.0,2421.0,3438.0,2599.0,1827.0,1076.0,405.0,3461.0,3579.0,3813.0,1642.0,187.0,3238.0,3399.0,2005.0,3921.0,912.0,1840.0,2876.0,319.0,40.0,257.0,3287.0,880.0,844.0,754.0,1951.0,1874.0,1888.0,2241.0,2553.0,2203.0,1699.0,2297.0,550.0,2279.0,2886.0,3883.0,1549.0,2338.0,1922.0,452.0,3612.0,3144.0,1894.0,2026.0,2464.0,1049.0,2385.0,1824.0,2750.0,1185.0,2779.0,3902.0,2481.0,3580.0,2.0,2435.0,73.0,2956.0,3045.0,1012.0,1275.0,783.0,1473.0,2305.0,2049.0,512.0,2074.0,160.0,2720.0,1919.0,1814.0,3570.0,2531.0,375.0,3838.0,3549.0,2903.0,2778.0,507.0,1896.0,3451.0,2263.0,3199.0,3192.0,1671.0,2320.0,1515.0,438.0,363.0,341.0,3492.0,376.0,1562.0,2031.0,1295.0,1588.0,408.0,3405.0,1131.0,197.0,3894.0,307.0,1199.0,3268.0,447.0,186.0,808.0,2569.0,1961.0,1428.0,2540.0,1893.0,3284.0,1926.0,2873.0,2062.0,3624.0,1169.0,2513.0,3944.0,3128.0,575.0,1333.0,31.0,3595.0,3038.0,380.0,2696.0,3497.0,2342.0,2070.0,2130.0,1721.0,756.0,1932.0,1906.0,3662.0,935.0,3897.0,615.0,50.0,1105.0,956.0,1940.0,301.0,3330.0,2354.0,3406.0,84.0,99.0,3852.0,490.0,415.0,1797.0,1660.0,1811.0,1854.0,506.0,3625.0,406.0,3704.0,1094.0,2816.0,1163.0,2678.0,2122.0,1192.0,779.0,1836.0,2126.0,481.0,87.0,3577.0,2990.0,35.0,2629.0,3200.0,441.0,49.0,2864.0,1554.0,2784.0,3109.0,1499.0,346.0,577.0,1653.0,2202.0,3711.0,2616.0,1767.0,256.0,1117.0,1656.0,283.0,3584.0,2417.0,3721.0,2284.0,2978.0,3244.0,2042.0,397.0,2862.0,3454.0,1487.0,1582.0,2573.0,1018.0,1564.0,2568.0,2549.0,2844.0,1000.0,2054.0,2345.0,705.0,1669.0,1373.0,2048.0,429.0,3613.0,3663.0,1911.0,164.0,3924.0,949.0,420.0,3823.0,2570.0,359.0,92.0,2964.0,2434.0,179.0,217.0,1447.0,1719.0,2361.0,1943.0,148.0,1507.0,41.0,3895.0,1996.0,495.0,3949.0,2653.0,3103.0,2381.0,606.0,427.0,1413.0,379.0,3370.0,2379.0,1563.0,602.0,2711.0,2330.0,3447.0,3677.0,2293.0,2136.0,2642.0,1899.0,525.0,1050.0,2931.0,3138.0,3853.0,3363.0,3641.0,972.0,2962.0,3329.0,2358.0,169.0,2413.0,974.0,560.0,3206.0,3259.0,872.0,1995.0,1835.0,1496.0,3150.0,3805.0,2679.0,128.0,3518.0,2856.0,2925.0,483.0,543.0,462.0,2449.0,391.0,2586.0,2010.0,3393.0,1602.0,1755.0,3029.0,2494.0,2757.0,803.0,298.0,2500.0,1934.0,988.0,473.0,864.0,3007.0,2532.0,3261.0,2625.0,554.0,1631.0,2388.0,57.0,1167.0,2156.0,282.0,3456.0,249.0,382.0,2398.0,238.0,1798.0,1011.0,3217.0,1242.0,2953.0,2414.0,2550.0,1902.0,1084.0,2307.0,2128.0,131.0,2743.0,3055.0,1010.0,3290.0,1832.0,489.0,2630.0,3171.0,1949.0,245.0,3586.0,269.0,1954.0,2352.0,3343.0,2110.0,1579.0,129.0,3181.0,37.0,2021.0,2872.0,1344.0,3685.0,2257.0,2329.0,619.0,1354.0,1398.0,1312.0,659.0,2269.0,3428.0,804.0,2479.0,134.0,635.0,3866.0,2892.0,3950.0,2765.0,1444.0,422.0,2035.0,910.0,806.0,939.0,509.0,3859.0,1841.0,3738.0,173.0,1456.0,1756.0,1363.0,3041.0,3003.0,1427.0,3943.0,751.0,3445.0,986.0,2555.0,2614.0,997.0,192.0,3014.0,1561.0,1453.0,3874.0,136.0,2848.0,2722.0,2930.0,2992.0,3696.0,2103.0,3864.0,3707.0,776.0,1171.0,1384.0,558.0,1331.0,3501.0,639.0,2127.0,969.0,2559.0,3848.0,1139.0,166.0,1938.0,2823.0,2849.0,3664.0,1829.0,1107.0,2466.0,356.0,1812.0,1082.0,3194.0,185.0,1909.0,1349.0,2558.0,54.0,1316.0,2503.0,2426.0,2717.0,2309.0,3204.0,114.0,3881.0,2051.0,2219.0,476.0,2561.0,869.0,3843.0,934.0,2704.0,1709.0,149.0,1762.0,3667.0,371.0,2090.0,609.0,1112.0,291.0,3058.0,1831.0,2227.0,627.0,3197.0,499.0,2315.0,879.0,2439.0,621.0,389.0,3222.0,2768.0,3108.0,2517.0,3540.0,72.0,65.0,1477.0,3126.0,3215.0,594.0,1987.0,3423.0,1114.0,3833.0,1421.0,3502.0,1372.0,449.0,1822.0,2998.0,631.0,2874.0,2833.0,2974.0,3787.0,1672.0,2577.0,834.0,2047.0,2299.0,38.0,2180.0,807.0,3043.0,3665.0,1002.0,976.0,308.0,929.0,603.0,903.0,2304.0,3616.0,220.0,571.0,688.0,444.0,1056.0,3642.0,3390.0,1933.0,662.0,3136.0,960.0,1460.0,2587.0,2340.0,2797.0,3495.0,254.0,519.0,1232.0,2197.0,1211.0,767.0,3288.0,2697.0,596.0,3352.0,3892.0,984.0,2650.0,3446.0,320.0,435.0,769.0,3345.0,470.0,2884.0,787.0,1116.0,1730.0,612.0,3245.0,2516.0,2022.0,1446.0,411.0,1661.0,1546.0,278.0,3250.0,1523.0,2258.0,2934.0,1570.0,102.0,862.0,64.0,2445.0,746.0,798.0,1644.0,2854.0,2950.0,3550.0,2655.0,2562.0,2298.0,985.0,2067.0,640.0,2056.0,2147.0,982.0,887.0,1575.0,396.0,55.0,1614.0,212.0,3162.0,2079.0,42.0,2158.0,7.0,1685.0,559.0,1026.0,1572.0,3906.0,2608.0,1202.0,1442.0,2044.0,3824.0,3475.0,1556.0,1580.0,1720.0,1220.0,2727.0,1850.0,3027.0,2373.0,687.0,3010.0,833.0,1759.0,501.0,1659.0,124.0,1216.0,3293.0,1508.0,1815.0,1429.0,2800.0,2855.0,1857.0,139.0,2177.0,2063.0,3746.0,392.0,3542.0,189.0,2226.0,3913.0,156.0,18.0,475.0,2891.0,3854.0,1328.0,1754.0,3493.0,2683.0,2066.0,3028.0,2487.0,2162.0,2285.0,1881.0,3209.0,2949.0,2937.0,3119.0,2008.0,3862.0,3090.0,966.0,1593.0,1311.0,802.0,2831.0,1383.0,1870.0,2551.0,634.0,2440.0,407.0,2631.0,586.0,3480.0,1944.0,2989.0,3657.0,3858.0,1525.0,2695.0,2182.0,901.0,1489.0,1921.0,2785.0,1352.0,946.0,1862.0,97.0,1226.0,656.0,3581.0,1622.0,3885.0,2756.0,1988.0,1565.0,201.0,1162.0,3166.0,2260.0,2380.0,2339.0,1555.0,1950.0,1151.0,994.0,3137.0,3353.0,1306.0,3796.0,3489.0,2576.0,1990.0,2685.0,3160.0,3024.0,68.0,2777.0,3886.0,1323.0,2928.0,1023.0,3931.0,2190.0,398.0,2619.0,1061.0,1067.0,2919.0,3631.0,698.0,3459.0,2495.0,2444.0,3609.0,3232.0,775.0,3164.0,2370.0,2392.0,3645.0,821.0,753.0,1313.0,652.0,3761.0,108.0,3413.0,3592.0,306.0,2963.0,86.0,1484.0,1666.0,2429.0,3496.0,3474.0,3335.0,3878.0,1181.0,1514.0,352.0,1667.0,2363.0,98.0,2172.0,1174.0,692.0,3472.0,3315.0,1662.0,2184.0,1324.0,2036.0,295.0,3308.0,1206.0,697.0,1898.0,1077.0,1636.0,2039.0,3218.0,2233.0,1805.0,2715.0,3165.0,3453.0,641.0,205.0,2783.0,106.0,2714.0,2375.0,3173.0,216.0,3223.0,876.0,2382.0,1495.0,174.0,251.0,1694.0,736.0,119.0,3748.0,3131.0,1321.0,3517.0,1483.0,618.0,264.0,608.0,1005.0,1485.0,1347.0,498.0,3219.0,2766.0,1243.0,2789.0,2807.0,2069.0,25.0,347.0,90.0,2699.0,2251.0,1796.0,3757.0,3303.0,335.0,1792.0,1522.0,3414.0,3559.0,2814.0,2065.0,1937.0,2709.0,2860.0,2368.0,1833.0,1336.0,3598.0,549.0,2059.0,2465.0,1668.0,600.0,3715.0,2933.0,678.0,1845.0,2752.0,2075.0,1595.0,494.0,240.0,2790.0,645.0,3781.0,2018.0,1930.0,421.0,726.0,2273.0,62.0,1968.0,2120.0,2710.0,824.0,2477.0,866.0,712.0,1552.0,3841.0,219.0,418.0,1782.0,3050.0,2262.0,234.0,1566.0,2157.0,1749.0,2938.0,3064.0,243.0,3225.0,2087.0,3153.0,3907.0,3856.0,3829.0,3815.0,3750.0,3656.0,3650.0,3630.0,3607.0,3589.0,3583.0,3582.0,3561.0,3560.0,3558.0,3541.0,3530.0,3455.0,3411.0,3383.0,3382.0,3369.0,3356.0,3348.0,3332.0,3323.0,3279.0,3278.0,3234.0,3231.0,3227.0,3226.0,3195.0,3193.0,3191.0,3170.0,3080.0,3059.0,3023.0,3009.0,2980.0,2958.0,2957.0,2954.0,2910.0,2909.0,2845.0,2838.0,2832.0,2703.0,2698.0,2684.0,2680.0,2604.0,2603.0,2601.0,2595.0,2588.0,2564.0,2547.0,2543.0,2508.0,2489.0,2438.0,2319.0,2274.0,2270.0,2230.0,2229.0,2228.0,2225.0,2224.0,2222.0,2220.0,2216.0,2199.0,2198.0,2030.0,1868.0,1847.0,1843.0,1838.0,1828.0,1823.0,1819.0,1818.0,1813.0,1808.0,1803.0,1802.0,1800.0,1790.0,1789.0,1786.0,1781.0,1778.0,1776.0,1775.0,1774.0,1768.0,1766.0,1765.0,1763.0,1761.0,1757.0,1751.0,1745.0,1742.0,1740.0,1738.0,1737.0,1736.0,1723.0,1716.0,1712.0,1710.0,1708.0,1706.0,1705.0,1700.0,1698.0,1697.0,1691.0,1638.0,1637.0,1634.0,1628.0,1618.0,1607.0,1578.0,1577.0,1576.0,1568.0,1560.0,1559.0,1557.0,1540.0,1536.0,1530.0,1524.0,1521.0,1512.0,1506.0,1505.0,1492.0,1491.0,1481.0,1478.0,1469.0,1467.0,1462.0,1452.0,1451.0,1448.0,1443.0,1435.0,1434.0,1424.0,1418.0,1403.0,1402.0,1400.0,1368.0,1338.0,1319.0,1318.0,1314.0,1309.0,1308.0,1239.0,1229.0,1195.0,1182.0,1166.0,1159.0,1158.0,1157.0,1156.0,1155.0,1146.0,1143.0,1141.0,1140.0,1137.0,1122.0,1110.0,1109.0,1108.0,1106.0,1075.0,1074.0,1072.0,1065.0,1052.0,1048.0,1045.0,1001.0,995.0,983.0,979.0,894.0,890.0,883.0,873.0,871.0,857.0,856.0,855.0,845.0,825.0,822.0,819.0,817.0,816.0,812.0,797.0,795.0,794.0,777.0,773.0,772.0,770.0,768.0,752.0,740.0,739.0,738.0,727.0,723.0,721.0,713.0,699.0,693.0,689.0,686.0,683.0,677.0,676.0,675.0,654.0,646.0,636.0,629.0,625.0,624.0,622.0,620.0,604.0,591.0,404.0,403.0,400.0,399.0,395.0,323.0,286.0,285.0,284.0,221.0,143.0,127.0,115.0,109.0,91.0,51.0,1359.0,973.0,2108.0,3600.0,2859.0,502.0,1240.0,1707.0,1332.0,353.0,2798.0,1464.0,2637.0,2729.0,2461.0,1270.0,923.0,2159.0,3674.0,745.0,896.0,3258.0,80.0,147.0,3439.0,2941.0,229.0,836.0,1501.0,3637.0,714.0,2982.0,2947.0,2643.0,1935.0,3611.0,1212.0,2661.0,1343.0,2893.0,1310.0,2364.0,2984.0,1258.0,3253.0,1526.0,1809.0,2313.0,2552.0,964.0,2906.0,451.0,3419.0,2493.0,250.0,3486.0,374.0,2240.0,2527.0,167.0,213.0,472.0,2579.0,135.0,1419.0,3899.0,3945.0,853.0,3460.0,521.0,1217.0,814.0,2771.0,3378.0,2880.0,3376.0,3202.0,2217.0,2213.0,975.0,843.0,732.0,1993.0,1430.0,316.0,638.0,865.0,583.0,3336.0,868.0,1724.0,132.0,1613.0,2218.0,1293.0,993.0,3722.0,2519.0,3291.0,3797.0,2254.0,3904.0,1360.0,1863.0,1773.0,2636.0,1440.0,3065.0,258.0,649.0,2583.0,2386.0,1133.0,93.0,3237.0,3373.0,3621.0,3312.0,1386.0,1115.0,142.0,2812.0,1511.0,774.0,717.0,2420.0,3130.0,790.0,3001.0,2850.0,1820.0,2556.0,3277.0,3057.0,3666.0,2474.0,1877.0,3644.0,1651.0,2592.0,1165.0,3488.0,3888.0,771.0,730.0,1392.0,200.0,2879.0,226.0,991.0,3828.0,2895.0,1364.0,2308.0,3317.0,3941.0,1873.0,3597.0,2131.0,3403.0,962.0,3321.0,3220.0,2742.0,2484.0,2277.0,2235.0,1852.0,1630.0,1145.0,1118.0,859.0,651.0,644.0,579.0,2214.0,1070.0,763.0,826.0,1486.0,3574.0,2713.0,183.0,1520.0,2428.0,1714.0,3440.0,3297.0,2152.0,576.0,515.0,3236.0,77.0,1101.0,1905.0,453.0,344.0,2463.0,658.0,2578.0,1619.0,1470.0,1123.0,3085.0,2539.0,2996.0,1989.0,1224.0,1055.0,123.0,3151.0,311.0,1339.0,3359.0,1799.0,3070.0,1548.0,3782.0,895.0,1152.0,574.0,402.0,2749.0,2563.0,2758.0,3229.0,701.0,584.0,530.0,138.0,467.0,2242.0,3887.0,3243.0,3458.0,3040.0,2163.0,2135.0,1134.0,2281.0,3158.0,3437.0,660.0,657.0,1315.0,582.0,3026.0,2584.0,1908.0,1764.0,601.0,3653.0,508.0,1558.0,3485.0,1119.0,3283.0,67.0,718.0,580.0,2955.0,827.0,614.0,312.0,428.0,1189.0,2649.0,3463.0,1649.0,2932.0,3337.0,1816.0,120.0,2343.0,2716.0,3522.0,3772.0,3464.0,2292.0,1872.0,2533.0,3242.0,2865.0,578.0,655.0,2730.0,3687.0,820.0,884.0,2138.0,2191.0,3443.0,706.0,823.0,1590.0,3305.0,1795.0,2736.0,2033.0,2811.0,1125.0,1124.0,2776.0,792.0,1510.0,1102.0,642.0,1878.0,385.0,981.0,1969.0,2825.0,958.0,3743.0,789.0,3314.0,3212.0,488.0,3054.0,977.0,672.0,3404.0,1466.0,2821.0,1039.0,3548.0,3891.0,23.0,2674.0,3333.0,2310.0,1770.0,2124.0,1675.0,2176.0,288.0,1471.0,3207.0,2452.0,3377.0,3778.0,2735.0,690.0,684.0,2129.0,758.0,2794.0,401.0,2534.0,130.0,3533.0,1455.0,1991.0,633.0,75.0,3876.0,961.0,791.0,96.0,3172.0,190.0,3482.0,3292.0,1907.0,3647.0,2708.0,3318.0,2239.0,3184.0,666.0,757.0,2691.0,1553.0,2397.0,3900.0,3084.0,3837.0,782.0,3389.0,3889.0,1825.0,1681.0,3751.0,3779.0,1534.0,3381.0,2582.0,2632.0,454.0,1071.0,1004.0,2415.0,3736.0,2290.0,682.0,3442.0,2486.0,1234.0,3434.0,3205.0,1433.0,3735.0,545.0,3433.0,1502.0,2204.0,1864.0,2611.0,3216.0,696.0,33.0,3344.0,1817.0,1062.0,1647.0,3056.0,1887.0,2166.0,867.0,227.0,2016.0,310.0,2658.0,1839.0,3235.0,1664.0,1168.0,19.0,2071.0,3096.0,244.0,3182.0,573.0,1528.0,2032.0,2509.0,3850.0,3905.0,3627.0,3800.0,809.0,3342.0,3588.0,3346.0,598.0,1538.0,1849.0,1121.0,1098.0,2623.0,2394.0,2878.0,847.0,2265.0,2999.0,2223.0,2602.0,2221.0,2858.0,3575.0]

# print(f"male: {len(L_mm)}")
# print(f"female: {len(L_ff)}")

# print("for ML100k")
# L_m = np.loadtxt('ml-100k/Other/common_ml100k_Lm_Item.dat', dtype=float)
# L_f = np.loadtxt('ml-100k/Other/common_ml100k_Lf_Item.dat', dtype=float)

# print("for ML1M BlurMe")
L_m_ok = np.loadtxt('ml-1m/Other/common_ml1m_Lm_Item.dat', dtype=float)
L_f_ok = np.loadtxt('ml-1m/Other/common_ml1m_Lf_Item.dat', dtype=float)

#L_m = L_mm
#L_m = [item for item in L_mm if item in L_m_ok] # -- combination AUC: .48 : not round k and keep the added variable intent as same as it is
#L_m = [item for item in L_m_ok if item in L_mm] # -- combination AUC: .74
#print(f" L_m: {len(L_mm)} & L_m_ok: {len(L_m_ok)} len common: {len(L_m)}")
#print(L_m)

#L_f = L_ff
#L_f = [item for item in L_ff if item in L_f_ok] # -- combination AUC: .48 : not round k and keep the added variable intent as same as it is
#L_f = [item for item in L_f_ok if item in L_ff] # -- combination AUC: .74
#print(f" L_f: {len(L_ff)} & L_f_ok: {len(L_f_ok)} len c: {len(L_f)}")
#print(L_f)

# ----- BEST -> common items list as per LR, FR and hardcoded but ordere by hardcodeed : .48 (ML1M)
# L_m = [589.0, 1233.0, 2706.0, 1090.0, 2959.0, 1250.0, 2427.0, 2490.0, 1208.0, 1266.0, 3654.0, 1748.0, 1262.0, 1396.0, 1374.0, 2700.0, 1265.0, 1089.0, 1222.0, 231.0, 2770.0, 1676.0, 2890.0, 1228.0, 1136.0, 3360.0, 3298.0, 1663.0, 3811.0, 2011.0, 1261.0, 233.0, 3361.0, 2366.0, 1127.0, 1276.0, 3555.0, 1214.0, 3929.0, 299.0, 1304.0, 3468.0, 1095.0, 150.0, 1213.0, 750.0, 3082.0, 6.0, 111.0, 3745.0, 349.0, 541.0, 2791.0, 785.0, 1060.0, 1294.0, 1302.0, 1256.0, 1292.0, 2948.0, 3683.0, 3030.0, 3836.0, 913.0, 2150.0, 32.0, 2826.0, 2721.0, 590.0, 3623.0, 2997.0, 3868.0, 3147.0, 1610.0, 3508.0, 2046.0, 21.0, 1249.0, 10.0, 1283.0, 3760.0, 2712.0, 3617.0, 3552.0, 3256.0, 1079.0, 3053.0, 1517.0, 2662.0, 1953.0, 2670.0, 3578.0, 2371.0, 3334.0, 2502.0, 2278.0, 364.0, 3462.0, 2401.0, 3163.0, 2311.0, 852.0, 2916.0, 1378.0, 3384.0, 524.0, 70.0, 370.0, 3035.0, 3513.0, 2917.0, 3697.0, 24.0, 1957.0, 3494.0, 1912.0, 3752.0, 2013.0, 3452.0, 3928.0, 2987.0, 431.0, 2759.0, 1387.0, 1882.0, 3638.0, 1288.0, 2867.0, 2728.0, 2433.0, 161.0, 3386.0, 517.0, 741.0, 1287.0, 1231.0, 3062.0, 2288.0, 3753.0, 529.0, 3793.0, 3052.0, 2447.0, 1320.0, 3819.0, 1303.0, 922.0, 3022.0, 260.0, 858.0, 493.0, 3006.0, 480.0, 2410.0, 333.0, 1178.0, 3814.0, 2702.0, 1203.0, 2922.0, 1625.0, 3366.0, 3213.0, 2188.0, 2628.0, 3358.0, 2648.0, 3788.0, 953.0, 999.0, 3754.0, 3910.0, 3016.0, 3863.0, 303.0, 3263.0, 1080.0, 786.0, 3764.0, 2105.0, 3543.0, 2607.0, 3681.0, 592.0, 145.0, 2303.0, 1682.0, 1019.0, 3646.0, 1544.0, 235.0, 908.0, 3615.0, 2792.0, 2167.0, 2455.0, 1587.0, 1227.0, 2901.0, 2687.0, 1883.0, 1210.0, 1201.0, 3169.0, 3098.0, 3688.0, 2409.0, 3198.0, 610.0, 1923.0, 1982.0, 165.0, 2403.0, 784.0, 2871.0, 2889.0, 628.0, 2300.0, 417.0, 3671.0, 3100.0, 3914.0, 3608.0, 3152.0, 3429.0, 1794.0, 952.0, 1391.0, 2518.0, 410.0, 3535.0, 2333.0, 1713.0, 2605.0, 707.0, 2795.0, 1965.0, 373.0, 3916.0, 556.0, 3703.0, 95.0, 466.0, 3066.0, 3177.0, 2088.0, 1476.0, 163.0, 3422.0, 58.0, 1244.0, 1689.0, 2002.0, 1711.0, 2259.0, 3524.0, 1371.0, 3104.0, 1693.0, 965.0, 1732.0, 2600.0, 3424.0, 3755.0, 2450.0, 3826.0, 3801.0, 3927.0, 1298.0, 2118.0, 112.0, 2478.0, 471.0, 1673.0, 1246.0, 2734.0, 2529.0, 2806.0, 1948.0, 2093.0, 45.0, 648.0, 3504.0, 2968.0, 1722.0, 1963.0, 2840.0, 1747.0, 1348.0, 3871.0, 3175.0, 2360.0, 1092.0, 3190.0, 1405.0, 367.0, 3248.0, 1702.0, 1734.0, 2644.0, 1597.0, 1401.0, 1416.0, 107.0, 1379.0, 2764.0, 2116.0, 1036.0, 60.0, 2115.0, 1876.0, 1254.0, 2243.0, 2606.0, 3925.0, 3087.0, 1627.0, 3770.0, 3678.0, 3113.0, 3036.0, 3525.0, 1584.0, 2236.0, 3267.0, 954.0, 1205.0, 2470.0, 2686.0, 3397.0, 2015.0, 1377.0, 3740.0, 1594.0, 2456.0, 2038.0, 891.0, 1342.0, 1966.0, 2808.0, 3324.0, 3794.0, 2467.0, 3420.0, 3773.0, 1927.0, 2231.0, 3742.0, 1960.0, 1542.0, 2672.0, 1376.0, 3174.0, 1248.0, 225.0, 1267.0, 3203.0, 1025.0, 2769.0, 1973.0, 2541.0, 3593.0, 2058.0, 3273.0, 154.0, 1179.0, 2009.0, 2423.0, 2676.0, 2793.0, 3505.0, 1920.0, 3357.0, 2580.0, 2542.0, 1701.0, 3252.0, 440.0, 540.0, 1885.0, 2384.0, 1414.0, 1251.0, 1187.0, 2841.0, 2287.0, 2004.0, 1257.0, 1358.0, 2253.0, 3918.0, 2976.0, 1100.0, 2140.0, 2092.0, 2772.0, 3500.0, 1196.0, 3728.0, 555.0, 3564.0, 3099.0, 2863.0, 2492.0, 13.0, 2378.0, 3271.0, 3946.0, 1017.0, 3189.0, 3908.0, 1238.0, 3551.0, 800.0, 1193.0, 3254.0, 3614.0, 448.0, 1779.0, 3477.0, 1388.0, 748.0, 1411.0, 3948.0, 1057.0, 2877.0, 2633.0, 3078.0, 2289.0, 514.0, 3831.0, 535.0, 361.0, 290.0, 1408.0, 1356.0, 2522.0, 2321.0, 1395.0, 1103.0, 2861.0, 1974.0, 2497.0, 1633.0, 2530.0, 1931.0, 125.0, 1735.0, 3159.0, 892.0, 2828.0, 523.0, 3148.0, 296.0, 2882.0, 1639.0, 1665.0, 3834.0, 534.0, 2942.0, 1247.0, 861.0, 2107.0, 3469.0, 1970.0, 3307.0, 432.0, 3879.0, 3930.0, 742.0, 3937.0, 1237.0, 1091.0, 3214.0, 1273.0, 3809.0, 3115.0, 2111.0, 468.0, 3769.0, 2961.0, 3771.0, 246.0, 3094.0, 2907.0, 1016.0, 151.0, 377.0, 450.0, 3538.0, 3717.0, 2694.0, 2745.0, 2389.0, 3865.0, 281.0, 2272.0, 2991.0, 1810.0, 2024.0, 2725.0, 2731.0, 409.0, 2971.0, 1083.0, 2701.0, 1753.0, 1459.0, 2567.0, 673.0, 3516.0, 611.0, 947.0, 1176.0, 1640.0, 172.0, 2671.0, 2041.0, 2723.0, 2471.0, 378.0, 3901.0, 1834.0, 1733.0, 1135.0, 998.0, 2475.0, 292.0, 3347.0, 2121.0, 3952.0, 1219.0, 413.0, 2294.0, 1997.0, 849.0, 2017.0, 2025.0, 3476.0, 1399.0, 2822.0, 2068.0, 180.0, 2076.0, 3700.0, 1783.0, 3326.0, 1760.0, 2437.0, 3893.0, 2594.0, 16.0, 1942.0, 2171.0, 2815.0, 1281.0, 1589.0, 936.0, 3168.0, 2520.0, 3095.0, 3448.0, 1971.0, 1230.0, 3129.0, 3799.0, 3125.0, 3784.0, 3789.0, 3262.0, 1946.0, 2390.0, 1918.0, 3201.0, 3909.0, 2943.0, 2082.0, 3157.0, 2112.0, 3409.0, 1772.0, 1680.0, 3633.0, 2153.0, 720.0, 674.0, 3713.0, 126.0, 585.0, 2353.0, 158.0, 3676.0, 3398.0, 485.0, 765.0, 1284.0, 2089.0, 1148.0, 1147.0, 2183.0, 1037.0, 2393.0, 2250.0, 2524.0, 1617.0, 1457.0, 3135.0, 3142.0, 2935.0, 1461.0, 533.0, 1425.0, 1282.0, 728.0, 3521.0, 1972.0, 1361.0, 551.0, 2016.0, 454.0, 3889.0, 3837.0, 190.0, 2735.0, 2124.0, 2310.0, 23.0, 3548.0, 1466.0, 3743.0, 1124.0, 2033.0, 1590.0, 2138.0, 2716.0, 1649.0, 1189.0, 2135.0, 3243.0, 3359.0, 1339.0, 123.0, 1224.0, 2996.0, 344.0, 1101.0, 515.0, 2428.0, 1873.0, 1392.0, 2583.0, 258.0, 2519.0, 2771.0, 213.0, 451.0, 2906.0, 2313.0, 3253.0, 1343.0, 2941.0, 745.0, 2729.0, 353.0, 1707.0, 2859.0, 2108.0, 1359.0]
# L_f = [920.0, 3844.0, 2369.0, 1088.0, 3534.0, 1207.0, 17.0, 1041.0, 3512.0, 3418.0, 1188.0, 902.0, 2336.0, 3911.0, 1441.0, 141.0, 2690.0, 928.0, 39.0, 2762.0, 906.0, 838.0, 2657.0, 2125.0, 3565.0, 1967.0, 2291.0, 914.0, 932.0, 1620.0, 2160.0, 247.0, 222.0, 261.0, 2881.0, 2145.0, 3072.0, 1028.0, 1956.0, 2080.0, 1286.0, 3798.0, 1959.0, 28.0, 2248.0, 3247.0, 3594.0, 3155.0, 1345.0, 531.0, 1277.0, 593.0, 3044.0, 3083.0, 3005.0, 1380.0, 2020.0, 105.0, 1678.0, 1608.0, 2572.0, 3791.0, 1104.0, 2144.0, 318.0, 1186.0, 1073.0, 595.0, 2724.0, 1641.0, 351.0, 2908.0, 357.0, 3079.0, 1688.0, 3556.0, 3186.0, 2406.0, 224.0, 1962.0, 1480.0, 3251.0, 11.0, 345.0, 3526.0, 1784.0, 951.0, 3668.0, 2485.0, 1958.0, 2739.0, 916.0, 950.0, 2443.0, 3684.0, 904.0, 898.0, 587.0, 552.0, 2143.0, 3481.0, 3097.0, 3067.0, 1449.0, 47.0, 616.0, 3281.0, 1259.0, 661.0, 2348.0, 562.0, 3606.0, 2496.0, 2085.0, 1271.0, 372.0, 2857.0, 3325.0, 1394.0, 1081.0, 1032.0, 918.0, 1409.0, 314.0, 899.0, 733.0, 2245.0, 381.0, 2316.0, 232.0, 2405.0, 2677.0, 1066.0, 2396.0, 2282.0, 1059.0, 2622.0, 1941.0, 959.0, 3479.0, 3124.0, 1197.0, 1777.0, 915.0, 955.0, 1648.0, 3705.0, 3061.0, 34.0, 1285.0, 1.0, 2875.0, 1150.0, 3545.0, 2664.0, 2155.0, 1097.0, 262.0, 3915.0, 971.0, 2186.0, 3702.0, 3105.0, 2280.0, 3604.0, 3515.0, 1513.0, 2331.0, 1500.0, 2803.0, 945.0, 2639.0, 3051.0, 837.0, 3408.0, 457.0, 1801.0, 2506.0, 4.0, 2469.0, 270.0, 46.0, 1235.0, 2355.0, 2346.0, 1357.0, 461.0, 3255.0, 3176.0, 3350.0, 2975.0, 2014.0, 3936.0, 2072.0, 1353.0, 2006.0, 1397.0, 2612.0, 1099.0, 1367.0, 3270.0, 938.0, 2357.0, 94.0, 412.0, 1518.0, 3591.0, 538.0, 2000.0, 2846.0, 708.0, 329.0, 2995.0, 653.0, 1280.0, 5.0, 337.0, 1022.0, 2468.0, 1569.0, 905.0, 1031.0, 900.0, 1541.0, 2926.0, 3730.0, 1900.0, 2718.0, 1021.0, 3185.0, 2746.0, 327.0, 2805.0, 3101.0, 2920.0, 3269.0, 1674.0, 477.0, 3686.0, 2077.0, 2801.0, 581.0, 2133.0, 3724.0, 3296.0, 3554.0, 3478.0, 1479.0, 3720.0, 491.0, 1014.0, 1236.0, 3134.0, 695.0, 2763.0, 1013.0, 1096.0, 1856.0, 2827.0, 248.0, 1875.0, 3211.0, 3672.0, 215.0, 3224.0, 3396.0, 469.0, 1897.0, 3528.0, 2870.0, 917.0, 930.0, 1654.0, 3328.0, 3786.0, 907.0, 3870.0, 1422.0, 2206.0, 2114.0, 2324.0, 2575.0, 919.0, 3467.0, 1047.0, 1806.0, 350.0, 230.0, 2505.0, 48.0, 182.0, 144.0, 170.0, 2141.0, 1916.0, 3081.0, 1191.0, 1086.0, 2598.0, 546.0, 1407.0, 153.0, 2635.0, 2057.0, 2037.0, 1327.0, 3145.0, 446.0, 2193.0, 1337.0, 1913.0, 195.0, 2132.0, 1804.0, 3562.0, 3706.0, 1172.0, 1042.0, 2946.0, 2514.0, 1093.0, 1616.0, 3011.0, 2151.0, 1111.0, 613.0, 1043.0, 2774.0, 2154.0, 2621.0, 52.0, 3060.0, 3723.0, 206.0, 3133.0, 1821.0, 1964.0, 211.0, 2454.0, 532.0, 218.0, 3156.0, 1586.0, 1126.0, 2096.0, 927.0, 2007.0, 778.0, 2097.0, 3117.0, 691.0, 3567.0, 1223.0, 1268.0, 1300.0, 2747.0, 1573.0, 3302.0, 671.0, 3471.0, 3825.0, 1064.0, 1299.0, 252.0, 3004.0, 2091.0, 2337.0, 61.0, 1020.0, 3763.0, 1727.0, 74.0, 3599.0, 3708.0, 465.0, 29.0, 3741.0, 3457.0, 2399.0, 781.0, 69.0, 3635.0, 3808.0, 3249.0, 2732.0, 1621.0, 1686.0, 3435.0, 3857.0, 3299.0, 3426.0, 176.0, 343.0, 2972.0, 2853.0, 272.0, 2788.0, 1393.0, 203.0, 1465.0, 801.0, 1917.0, 2431.0, 3714.0, 2967.0, 3553.0, 79.0, 3951.0, 1683.0, 3071.0, 3102.0, 302.0, 3655.0, 2261.0, 3877.0, 2266.0, 3716.0, 3699.0, 1769.0, 266.0, 1173.0, 2693.0, 3093.0, 1658.0, 277.0, 279.0, 848.0, 839.0, 2365.0, 2738.0, 1264.0, 271.0, 1269.0, 2043.0, 3855.0, 1030.0, 1346.0, 2052.0, 2142.0, 2719.0, 2574.0, 2053.0, 1410.0, 3912.0, 1381.0, 3660.0, 2446.0, 2613.0, 2314.0, 978.0, 348.0, 2168.0, 3466.0, 669.0, 3649.0, 2448.0, 2899.0, 1611.0, 2940.0, 8.0, 1463.0, 26.0, 3557.0, 1994.0, 1758.0, 414.0, 1027.0, 3088.0, 3391.0, 1936.0, 2205.0, 3861.0, 332.0, 3450.0, 2585.0, 3618.0, 425.0, 1605.0, 3827.0, 846.0, 2267.0, 2359.0, 2952.0, 2786.0, 3923.0, 1290.0, 3240.0, 3388.0, 1547.0, 338.0, 3712.0, 3063.0, 242.0, 715.0, 3679.0, 3571.0, 668.0, 1069.0, 2276.0, 1438.0, 2688.0, 2900.0, 168.0, 3539.0, 199.0, 3675.0, 2436.0, 647.0, 724.0, 82.0, 542.0, 1362.0, 117.0, 2109.0, 3246.0, 3019.0, 1904.0, 360.0, 2966.0, 482.0, 2741.0, 334.0, 2100.0, 2173.0, 1615.0, 358.0, 280.0, 3932.0, 369.0, 3547.0, 3739.0, 1788.0, 875.0, 2106.0, 3719.0, 3839.0, 1417.0, 3566.0, 3795.0, 670.0, 520.0, 208.0, 3449.0, 3274.0, 27.0, 3872.0, 2969.0, 2927.0, 2442.0, 113.0, 2084.0, 1848.0, 3882.0, 3790.0, 3926.0, 2820.0, 3922.0, 3046.0, 832.0, 3896.0, 2101.0, 1600.0, 2548.0, 2453.0, 386.0, 239.0, 1015.0, 85.0, 3077.0, 3264.0, 3340.0, 3114.0, 1729.0, 2498.0, 309.0, 1034.0, 2421.0, 3438.0, 2599.0, 405.0, 3461.0, 3813.0, 3238.0, 3399.0, 3921.0, 912.0, 1840.0, 2876.0, 319.0, 40.0, 257.0, 3287.0, 880.0, 754.0, 1874.0, 2241.0, 2553.0, 1699.0, 550.0, 1549.0, 2338.0, 1922.0, 3612.0, 1894.0, 1049.0, 1185.0, 2779.0, 3902.0, 3580.0, 2.0, 2435.0, 73.0, 1012.0, 1275.0, 783.0, 512.0, 1919.0, 3838.0, 2903.0, 507.0, 1896.0, 2263.0, 2320.0, 1515.0, 363.0, 3492.0, 1562.0, 1588.0, 408.0, 3405.0, 307.0, 1199.0, 3268.0, 186.0, 1961.0, 1428.0, 2540.0, 3284.0, 2062.0, 3624.0, 1169.0, 2513.0, 575.0, 380.0, 2696.0, 2070.0, 2130.0, 3897.0, 615.0, 50.0, 3852.0, 415.0, 1797.0, 1660.0, 506.0, 3704.0, 2816.0, 2678.0, 2122.0, 1836.0, 2126.0, 481.0, 87.0, 3577.0, 2990.0, 3200.0, 441.0, 1554.0, 346.0, 1653.0, 2202.0, 2616.0, 283.0, 3584.0, 2417.0, 2284.0, 2042.0, 3454.0, 1582.0, 2568.0, 1669.0, 2048.0, 3613.0, 1911.0, 949.0, 420.0, 1719.0, 2361.0, 41.0, 3949.0, 379.0, 2379.0, 3447.0, 2136.0, 2642.0, 3206.0, 1995.0, 3150.0, 2856.0, 2010.0, 2532.0, 382.0, 2398.0, 1798.0, 1242.0, 2414.0, 2550.0, 1084.0, 131.0, 3055.0, 2630.0, 1949.0, 1954.0, 2352.0, 2110.0, 3181.0, 2021.0, 1344.0, 3685.0, 1398.0, 1312.0, 910.0, 3738.0, 173.0, 1456.0, 3445.0, 986.0, 2848.0, 2722.0, 3696.0, 3864.0, 3707.0, 1171.0, 558.0, 356.0, 2717.0, 3204.0, 2561.0, 934.0, 2704.0, 371.0, 1831.0, 879.0, 2439.0, 3108.0, 2517.0, 1372.0, 1672.0, 807.0, 3616.0, 688.0, 2797.0, 519.0, 1211.0, 1730.0, 1446.0, 1546.0, 2445.0, 2147.0, 3475.0, 1556.0, 1580.0, 1220.0, 2373.0, 501.0, 124.0, 1216.0, 1429.0, 2683.0, 2066.0, 1881.0, 2949.0, 3090.0, 802.0, 1870.0, 407.0, 586.0, 1944.0, 2989.0, 1921.0, 1226.0, 2380.0, 3489.0, 3886.0, 2190.0, 2919.0, 2495.0, 2392.0, 753.0, 1484.0, 1667.0, 2363.0, 3308.0, 1077.0, 1805.0, 2714.0, 3173.0, 216.0, 1694.0, 736.0, 1321.0, 1483.0, 608.0, 1485.0, 1347.0, 2789.0, 25.0, 2699.0, 1792.0, 2065.0, 2709.0, 2860.0, 1845.0, 2752.0, 494.0, 2273.0, 62.0, 2710.0, 866.0, 3841.0, 1566.0, 3153.0, 973.0, 3600.0, 1240.0, 1270.0, 923.0, 2159.0, 896.0, 3258.0, 147.0, 3439.0, 2947.0, 2643.0, 1212.0, 1258.0, 2527.0, 1419.0, 1217.0, 316.0, 1293.0, 2420.0, 3130.0, 2474.0, 2879.0, 991.0, 3317.0, 2713.0, 3440.0, 2463.0, 1619.0, 2539.0, 3070.0, 3040.0, 2163.0, 508.0, 428.0, 1816.0, 2533.0, 2736.0, 1969.0, 3054.0, 2176.0, 288.0, 2794.0, 2239.0, 2290.0, 1234.0, 3735.0, 2166.0, 19.0, 2071.0, 2394.0, 2858.0]
# ----- end BEST

# ----- common items list as per LR, FR but ordere by LR : .73
# L_m = [2721, 1882, 2942, 3678, 2093, 3494, 299, 2088, 13, 2011, 901, 493, 3334, 3688, 233, 2447, 1414, 231, 1713, 417, 1090, 3564, 2806, 3035, 3646, 1794, 952, 3928, 2490, 3468, 2840, 707, 3824, 2009, 3429, 728, 3929, 2046, 3190, 3248, 1378, 3638, 1973, 2401, 2935, 2731, 3910, 123, 1396, 2518, 225, 3764, 786, 2427, 784, 2867, 3030, 1292, 2087, 1689, 3654, 1748, 1517, 892, 3094, 556, 373, 1734, 1320, 1348, 2243, 1208, 163, 1676, 1095, 3198, 2764, 282, 3263, 1124, 1342, 349, 3163, 3036, 1103, 1542, 585, 3831, 3358, 3914, 431, 3424, 361, 3773, 3617, 3811, 3834, 3099, 2262, 1187, 1037, 3307, 1227, 3868, 410, 3760, 2455, 1262, 852, 2530, 2017, 922, 2922, 2971, 1303, 2828, 450, 3115, 1982, 1411, 1257, 3505, 3524, 2432, 2670, 3819, 1912, 1025, 2311, 1302, 540, 2891, 3422, 2770, 3477, 2492, 2702, 2384, 1552, 2961, 364, 3022, 1885, 2901, 207, 3788, 32, 2606, 2069, 1231, 947, 2015, 3082, 3053, 3384, 3863, 1228, 3801, 290, 3152, 589, 1711, 10, 3745, 2410, 2135, 370, 2605, 3549, 2729, 1663, 2038, 2059, 765, 1947, 2889, 1379, 2138, 1256, 3469, 3508, 2167, 524, 2531, 3201, 1966, 2943, 1627, 1888, 2822, 2150, 2450, 592, 1416, 2253, 2759, 3535, 2025, 2360, 1680, 3189, 3361, 628, 953, 107, 1735, 2497, 432, 2303, 3147, 1968, 3918, 2434, 954, 2581, 2188, 258, 2366, 466, 303, 2403, 1371, 24, 1459, 1644, 3916, 998, 2236, 1288, 3908, 3298, 2522, 3078, 3925, 1965, 1834, 3213, 3770, 2644, 3893, 3909, 1946, 333, 674, 2140, 475, 342, 1029, 2092, 2183, 3111, 1399, 3771, 3743, 1273, 610, 2672, 2633, 3256, 1246, 2437, 3858, 3697, 2769, 1233, 3740, 3262, 523, 172, 190, 1665, 58, 2424, 3007, 965, 2706, 1304, 1213, 1249, 2941, 3927, 1733, 3683, 1127, 3717, 515, 3169, 3271, 2877, 352, 3552, 1693, 2712, 2024, 1265, 3769, 1974, 2968, 3397, 2105, 1408, 3784, 999, 3062, 3098, 2629, 1136, 2519, 2676, 2433, 1753, 3593, 2950, 3462, 60, 145, 2734, 1135, 3129, 3614, 2795, 2700, 1266, 1374, 2478, 3799, 3516, 235, 362, 3113, 3895, 3513, 2872, 3347, 45, 112, 1963, 1597, 1192, 1283, 1388, 1276, 1997, 161, 1080, 1392, 534, 95, 903, 3194, 6, 1760, 3598, 3859, 741, 1176, 3930, 2423, 2041, 3871, 3713, 1732, 451, 306, 908, 1810, 1281, 1060, 1610, 2546, 1091, 3203, 1092, 3128, 1294, 3217, 3608, 3823, 1960, 111, 2294, 3414, 1356, 3753, 2648, 3453, 1702, 3420, 2871, 1282, 2371, 1639, 1089, 1948, 1883, 1391, 1682, 3752, 3250, 1589, 748, 1033, 1593, 2250, 3755, 1061, 2089, 2997, 2662, 3006, 2793, 2826, 1298, 2123, 35, 3087, 2735, 2058, 1876, 1083, 2090, 3261, 1243, 891, 353, 2354, 3538, 3504, 1401, 2863, 2171, 2520, 3548, 2882, 249, 2555, 1376, 376, 2018, 2504, 549, 1178, 1466, 1779, 597, 3285, 150, 3742, 3700, 1873, 2573, 2948, 1633, 1244, 2890, 2313, 166, 1377, 2115, 535, 154, 3837, 2118, 2146, 858, 2728, 2558, 935, 2409, 2333, 2340, 3754, 3826, 2013, 3267, 2475, 1544, 2300, 590, 1361, 1238, 3324, 514, 292, 1287, 2108, 1754, 1940, 2701, 378, 2917, 2208, 3452, 2757, 3244, 2054, 3273, 2570, 3398, 1920, 485, 1957, 529, 296, 213, 3100, 1707, 2959, 3546, 3148, 541, 3177, 21, 2375, 2996, 750, 2723, 276, 1094, 2297, 804, 1210, 3555, 1614, 3521, 3168, 16, 2269, 1205, 3946, 3937, 3615, 942, 1247, 1649, 1175, 185, 913, 1425, 2542, 1498, 3865, 23, 3366, 551, 3252, 1230, 2231, 2686, 1701, 1222, 1250, 2272, 3728, 3214, 742, 2792, 1017, 2628, 2808, 440, 2413, 1673, 1640, 2725, 1009, 2745, 3551, 1487, 933, 2081, 3142, 3045, 3052, 413, 1237, 2467, 1254, 3157, 1179, 1971, 509, 1018, 2428, 1261, 631, 1036, 2607, 3326, 2287, 3260, 2310, 1625, 3623, 2107, 3259, 377, 1079, 2111, 1363, 1942, 1387, 3787, 2987, 1914, 785, 2004, 2390, 936, 2162, 3225, 2259, 3360, 3500, 2378, 468, 1833, 2953, 2033, 1587, 308, 1248, 165, 588, 1909, 517, 611, 2694, 2161, 2859, 1148, 3107, 3746, 480, 1100, 1131, 2861, 2567, 849, 830, 1214, 2888, 1783, 1950, 126, 2078, 1592, 2002, 3879, 2016, 673, 471, 70, 1772, 158, 151, 187, 2771, 1251, 3357, 160, 555, 3451, 2194, 2288, 2289, 3174, 2153, 3543, 3386, 22, 3448, 543, 3480, 1499, 237, 3793, 2099, 1453, 339, 861, 1717, 1101, 2116, 2124, 1035, 648, 2067, 3814, 1196, 1219, 1023, 2312, 1267, 1373, 2026, 3889, 3066, 2906, 500, 260, 409, 2976, 2565, 3125, 2174, 1931, 7, 2907, 1835, 2991, 3476, 3160, 720, 1225, 1203, 3633, 1953, 605, 1206, 2720, 3104, 2121, 490, 2082, 2470, 1016, 1951, 3901, 2471, 1938, 483, 3370, 2617, 3794, 86, 2692, 2750, 3681, 3254, 497, 2716, 2068, 2791, 1918, 805, 3159, 1457, 1057, 2502, 3943, 2600, 3578, 3499, 1747, 3836, 2330, 3703, 253, 1296, 448, 3789, 2687, 236, 2315, 931, 435, 745, 994, 956, 1923, 1584, 2524, 1405, 3835, 2076, 3243, 2321, 367, 454, 1476, 969, 2278, 1307, 1343, 1339, 3950, 2279, 125, 1132, 1010, 3525, 3253, 533, 344, 1970, 3948, 2529, 3219, 2815, 164, 2580, 3175, 3676, 2456, 317, 3952, 2353, 1972, 1147, 2385, 3671, 2541, 594, 2247, 2005, 705, 1358, 2937, 1284, 36, 3809, 1413, 1395, 455, 3016, 3436, 1050, 1537, 1177, 3456, 180, 1193, 1722, 2782, 2671, 1927, 1224, 2772, 3028, 709, 1183, 800, 281, 3409, 2841, 1295, 1201, 1545, 2389, 1189, 678, 596, 3095, 1721, 1590, 2916, 3286, 2393, 1019, 940, 246, 3135, 140, 1461, 1359, 3359, 265, 1645, 2583, 1333, 2594, 1617, 1594, 2112]
# L_f = [2261, 3844, 3117, 386, 1620, 1345, 906, 338, 3133, 3565, 2635, 28, 2857, 1099, 3896, 918, 978, 2155, 1967, 1518, 2443, 2920, 26, 3281, 616, 211, 2533, 1480, 94, 4, 2485, 3672, 3668, 671, 79, 3567, 469, 153, 2057, 3606, 248, 1804, 3449, 3224, 2091, 358, 932, 3719, 3660, 3240, 131, 1463, 2630, 2495, 3534, 552, 3211, 2369, 2853, 3635, 1615, 2114, 1896, 261, 461, 3684, 546, 1088, 2621, 3515, 507, 3682, 2160, 1549, 3467, 1397, 2014, 2077, 2072, 2690, 2972, 3932, 1678, 1043, 959, 1286, 1874, 1586, 3077, 1207, 3044, 232, 465, 117, 2280, 2816, 1769, 3716, 2990, 3340, 40, 272, 1654, 41, 2532, 653, 949, 950, 2361, 2900, 3790, 283, 1729, 2007, 3798, 1875, 176, 247, 1059, 2406, 2141, 3124, 5, 2496, 3649, 1616, 2967, 2042, 1337, 1897, 3741, 3328, 1856, 2468, 1186, 1020, 3763, 414, 3795, 3512, 3584, 279, 1806, 1648, 2677, 581, 938, 2062, 3556, 2085, 3539, 1385, 1300, 199, 2975, 2186, 695, 141, 314, 3005, 82, 216, 1921, 206, 3951, 880, 1346, 3545, 3616, 3808, 3855, 3791, 2598, 1962, 3079, 327, 215, 927, 3093, 372, 2043, 1081, 2318, 3911, 587, 3686, 3526, 3454, 562, 1941, 3655, 2741, 3915, 928, 1381, 329, 3864, 2331, 2786, 2664, 1394, 3447, 920, 2788, 3604, 2903, 3072, 2724, 1069, 3461, 778, 182, 3571, 3156, 3870, 1047, 837, 3707, 307, 3105, 3730, 2144, 2820, 1104, 1422, 2794, 3418, 1959, 839, 586, 105, 11, 1173, 113, 3949, 3011, 898, 2176, 2801, 1699, 2151, 52, 3145, 971, 208, 3274, 915, 407, 733, 3200, 2267, 1605, 1588, 2053, 1150, 2365, 222, 1547, 3841, 1220, 3926, 1327, 818, 3246, 1031, 2722, 270, 1913, 2168, 29, 2774, 73, 491, 2514, 2505, 1398, 3364, 2096, 39, 1188, 2202, 2348, 280, 3857, 3724, 2613, 3153, 2248, 2732, 1030, 3624, 1223, 1021, 3388, 3051, 3441, 1264, 2241, 1686, 3186, 1954, 2291, 1958, 2714, 3247, 595, 3714, 3081, 1788, 1073, 124, 934, 838, 1242, 87, 1485, 2881, 1277, 1015, 2550, 538, 2827, 3936, 1449, 669, 2037, 3061, 1801, 661, 2616, 2846, 1253, 1441, 2316, 2154, 3492, 3877, 2337, 357, 3696, 3063, 2143, 2899, 2585, 3325, 3102, 2553, 2094, 1, 3735, 346, 2710, 3249, 2431, 904, 3613, 1976, 257, 1111, 1367, 2159, 2282, 277, 1831, 477, 2819, 2739, 3070, 2748, 2995, 1066, 2363, 2568, 3067, 1667, 1357, 531, 2848, 3173, 1216, 85, 25, 1275, 3, 1805, 558, 1169, 412, 3594, 3478, 170, 2506, 224, 1848, 2134, 428, 1268, 2133, 613, 2448, 3185, 1013, 3921, 2379, 788, 1407, 2540, 173, 1077, 242, 532, 3679, 2762, 48, 2763, 1299, 2193, 553, 2924, 1969, 3060, 3146, 1688, 1172, 2080, 2336, 1546, 2125, 2320, 3739, 3302, 1949, 334, 3287, 3479, 1727, 293, 1446, 2126, 2966, 2876, 3812, 2130, 1944, 3471, 846, 3033, 262, 408, 2324, 2908, 2097, 2245, 1041, 3922, 1894, 1014, 3591, 3355, 2879, 1285, 2668, 3083, 381, 3296, 3527, 879, 271, 1084, 2338, 1293, 615, 1465, 1500, 74, 955, 2973, 2713, 2548, 1086, 3786, 2575, 1032, 3825, 2436, 2334, 1027, 2951, 47, 2335, 2284, 3902, 1372, 2205, 2719, 1566, 1479, 688, 2290, 2346, 2122, 1211, 252, 593, 1919, 2642, 1797, 715, 425, 2276, 1900, 3435, 3562, 2071, 1259, 973, 2657, 2010, 383, 195, 1245, 3308, 668, 69, 3702, 3204, 17, 348, 2803, 1840, 3720, 2738, 144, 917, 3723, 3821, 3727, 369, 1792, 3055, 2870, 2643, 3090, 2622, 1621, 2109, 415, 3923, 3498, 1955, 1096, 907, 2527, 2142, 986, 2020, 44, 3528, 3258, 3088, 2206, 3039, 3481, 2717, 781, 3399, 708, 1690, 1353, 351, 3450, 1380, 61, 441, 1226, 2696, 1562, 1836, 1994, 1093, 1961, 1658, 902, 2421, 2805, 3629, 2572, 3873, 420, 1456, 3839, 239, 3405, 807, 3155, 464, 2469, 1917, 2498, 2147, 3747, 3269, 309, 2414, 3882, 2446, 1956, 3489, 3861, 1694, 230, 1556, 1660, 991, 2946, 2952, 2314, 663, 2612, 1410, 550, 482, 1260, 2000, 1845, 3040, 2101, 3268, 1513, 2940, 1171, 345, 1028, 2699, 2145, 332, 1611, 1199, 343, 2926, 426, 1911, 3089, 1580, 3284, 3108, 875, 1922, 1078, 2392, 1362, 3827, 753, 2396, 2639, 1672, 3457, 1428, 3365, 3396, 3554, 2404, 1582, 2, 2021, 762, 1484, 2173, 2407, 866, 3869, 1290, 3553, 1212, 1120, 380, 1608, 2678, 2779, 1945, 2137, 19, 780, 1185, 1635, 2052, 2355, 1619, 318, 2065, 2860, 3566, 2163, 2352, 1417, 910, 3206, 2454, 1194, 1258, 919, 2474, 3350, 575, 1034, 3580, 3445, 2399, 2019, 3004, 2132, 519, 2239, 3054, 3130, 2023, 2084, 2915, 912, 1429, 492, 3599, 736, 2268, 1591, 1674, 905, 3354, 2273, 8, 1042, 3618, 2989, 724, 3438, 914, 3181, 3020, 3270, 104, 2574, 1191, 1129, 1777, 3675, 832, 1515, 1784, 2561, 1375, 405, 442, 2373, 3600, 186, 3852, 2139, 2190, 302, 188, 2266, 379, 909, 1483, 2539, 3210, 2919, 1527, 1821, 2683, 506, 2357, 2761, 2921, 3708, 481, 2609, 3706, 1263, 3426, 1816, 2453, 2993, 2420, 360, 2875, 1269, 3121, 3466, 3872, 2351, 1573, 2858, 2463, 2110, 1278, 2709, 1600, 3316, 457, 3097, 368, 3264, 1669, 1240, 896, 2789, 2718, 3074, 1350, 512, 542, 316, 802, 3685, 2969, 2064, 3178, 3536, 2394, 1301, 1321, 754, 3507, 945, 1704, 520, 1641, 1022, 921, 356, 1312, 2528, 3265, 501, 34, 218, 1252, 1344, 3475, 2513, 1064, 3783, 1535, 2083, 2359, 2001, 3639, 801, 3577, 2395, 3744, 1653, 2624, 313, 3196, 1085, 434, 2688, 930, 1297, 3912, 2136, 2066, 1200, 3037, 2927, 1995, 1235, 2003, 1904, 2439, 2944, 3408, 1291, 474, 2435, 371, 266, 3738, 783, 2070, 2405, 1221, 900, 3299, 3071, 162, 203, 147, 196, 2106, 2445, 899, 3886, 3046, 50, 46, 1204, 3557, 1012, 198, 1217, 3920, 1419, 2571, 3785, 3838, 2006, 691, 508, 951, 968, 3440, 3704, 3391, 2048, 350, 3300, 2117, 2949, 3255, 3150, 110, 2402, 1936, 3813, 1347, 1236, 1730, 1541, 3176, 647, 366, 3019, 3101, 3251, 2985, 1272, 1393, 1097, 2883, 300, 2166, 3301, 3439, 923, 2936, 1554, 1603, 608, 1215, 3421, 3317, 2398, 3701, 3612, 2693, 3705, 1881, 1130, 2912, 27, 2442, 2752, 2517, 3134, 2408, 2391, 2102, 3547, 2797, 2411, 2856, 446, 3698, 1234, 1895, 337, 2417, 168, 3000, 2263, 670, 1870, 2012, 1758, 1270, 2704, 3068, 1049, 2804, 2380, 2736, 1438, 2501, 2641, 2947, 3699, 1683, 288, 494, 2457, 1409, 1719, 1334, 319, 3238, 1623, 3846, 3712, 1798, 1370, 1569, 527, 2302, 1916, 3114, 382, 1952, 1198, 737, 2747, 3034, 2599, 1126, 2232, 2376, 62, 363, 3897, 3733, 3917, 1964, 1271, 848, 2746, 916, 2028, 3802, 2100, 1197, 1280]

# ----- common items list as per LR, FR but ordere by FR : .81
# L_m = [1862, 1011, 3653, 72, 2120, 2516, 1863, 798, 3576, 1657, 1509, 612, 374, 2476, 3662, 1163, 1762, 3197, 2611, 2873, 217, 606, 1496, 1824, 2119, 2587, 3043, 1563, 3412, 3931, 445, 3518, 2653, 102, 1671, 3103, 3634, 3766, 3192, 3807, 14, 2349, 2925, 2807, 3120, 2464, 2169, 2358, 2733, 1007, 2416, 3924, 1105, 2978, 2711, 88, 2956, 722, 2370, 803, 495, 267, 2221, 2560, 2886, 268, 3627, 447, 3132, 3161, 423, 2939, 602, 3032, 2050, 234, 1744, 2799, 3406, 3041, 2381, 3726, 3550, 3199, 42, 3913, 473, 2098, 1415, 2128, 2240, 2674, 489, 2182, 3218, 3038, 1162, 3620, 2681, 3833, 3643, 3096, 1926, 1571, 269, 1681, 3503, 982, 2923, 1993, 2730, 2931, 1937, 1008, 438, 3318, 3663, 97, 1854, 3884, 3690, 3428, 1468, 886, 2618, 3677, 2589, 2494, 3024, 1642, 330, 245, 3711, 2549, 1899, 1906, 2364, 2800, 3883, 2785, 3625, 1860, 49, 3144, 2293, 2726, 2479, 2874, 719, 554, 1054, 1755, 2104, 429, 12, 2429, 2697, 1624, 1427, 1167, 3029, 2661, 2625, 3693, 92, 621, 3605, 341, 1631, 2551, 2219, 1464, 1807, 929, 2382, 99, 2784, 1987, 2305, 692, 2461, 2158, 2388, 3162, 312, 291, 3014, 2928, 68, 81, 359, 220, 516, 525, 301, 294, 391, 1523, 2862, 3459, 824, 470, 3757, 1585, 3497, 254, 583, 3058, 3894, 1579, 1893, 2535, 2773, 1336, 1184, 3664, 3122, 2049, 1432, 1756, 2631, 3874, 1232, 2974, 2778, 159, 1999, 3390, 1310, 192, 1423, 449, 2511, 3774, 1444, 2449, 627, 3064, 3941, 57, 756, 462, 1811, 1087, 2864, 229, 3586, 2481, 2938, 2307, 197, 2569, 2056, 3659, 3945, 1984, 725, 1151, 3776, 1421, 743, 3126, 452, 3805, 3165, 619, 3595, 2667, 1404, 2655, 3537, 238, 833, 3661, 456, 3843, 65, 1932, 3622, 1522, 2227, 1442, 976, 3768, 335, 2842, 3782, 2440, 1529, 1447, 1832, 3446, 1887, 392, 375, 877, 1943, 718, 2623, 3486, 1759, 227, 2679, 2031, 3665, 114, 201, 3765, 869, 1606, 177, 3775, 3027, 2477, 1857, 2044, 2466, 2237, 1613, 3329, 2783, 3042, 3495, 2614, 2964, 3944, 1902, 2345, 146, 103, 1990, 3854, 2992, 1659, 1508, 872, 2666, 1349, 84, 639, 76, 1107, 1076, 3667, 71, 2768, 513, 1656, 2008, 31, 9, 809, 510, 3343, 997, 499, 320, 54, 3473, 2905, 1564, 3423, 3847, 1812, 2342, 1565, 174, 3092, 209, 3491, 844, 479, 1323, 2582, 200, 2854, 2175, 389, 3290, 2892, 275, 1602, 1570, 2298, 2285, 1988, 3158, 3597, 2347, 2649, 3761, 1767, 93, 2962, 897, 746, 96, 2790, 600, 3588, 2074, 2180, 2444, 1796, 3732, 2665, 3640, 1324, 2652, 3611, 974, 967, 2257, 3906, 2998, 876, 840, 1477, 2487, 3592, 37, 1328, 3645, 278, 3345, 1114, 406, 1746, 3487, 189, 3642, 751, 2638, 1595, 1822, 560, 2855, 3866, 3400, 250, 2818, 1666, 3488, 2868, 2386, 3427, 2812, 2197, 212, 148, 2368, 1000, 984, 2534, 656, 1174, 3171, 2275, 2823, 2727, 2465, 972, 3331, 3235, 3209, 960, 2650, 3781, 3437, 1383, 3434, 2562, 2211, 2963, 3050, 1181, 3140, 2608, 2813, 1116, 1572, 2695, 659, 2545, 3344, 263, 1139, 702, 3389, 1534, 2258, 2127, 1720, 1825, 129, 3119, 1662, 1053, 1117, 136, 1709, 1112, 3245, 1928, 2647, 564, 3862, 1575, 864, 2849, 295, 1311, 78, 3136, 2659, 2646, 167, 3410, 3047, 3637, 1026, 3335, 1502, 2715, 2914, 966, 2934, 1933, 108, 1384, 1501, 3433, 3131, 1520, 1316, 264, 2691, 3367, 3232, 726, 3137, 2156, 3288, 769, 2304, 2523, 106, 2397, 2765, 2930, 1815, 3493, 1770, 2281, 834, 776, 2839, 2814, 1486, 1055, 2233, 251, 1561, 2632, 2777, 2576, 2984, 687, 2251, 1313, 3542, 2685, 119, 985, 3881, 411, 396, 787, 1622, 2299]
# L_f = [17, 838, 914, 920, 1088, 1188, 2028, 902, 2571, 1240, 3512, 1200, 357, 222, 2125, 1441, 3844, 39, 261, 110, 1028, 28, 2690, 2396, 531, 3534, 351, 1580, 1041, 2858, 1380, 1198, 932, 2762, 2336, 3527, 2369, 1221, 34, 105, 1569, 780, 2145, 11, 915, 593, 3408, 1527, 2291, 2724, 1270, 3565, 3594, 3072, 916, 2881, 1097, 595, 928, 3418, 2080, 2355, 899, 1271, 527, 608, 356, 906, 1, 3911, 1784, 2985, 1197, 3421, 2683, 2908, 318, 3114, 46, 1277, 912, 316, 1959, 3325, 3176, 1259, 1641, 898, 1393, 1073, 2248, 1372, 2699, 3083, 224, 2599, 1674, 919, 3481, 1967, 3155, 2100, 2657, 587, 3702, 708, 3101, 3897, 1215, 2710, 314, 1704, 2572, 3798, 3684, 457, 733, 2000, 1286, 1961, 3450, 3255, 3005, 2406, 1688, 2144, 2622, 2688, 3247, 3079, 1367, 3668, 1394, 2496, 1370, 3081, 2804, 1207, 1252, 1678, 3251, 1513, 3044, 2324, 661, 3354, 2395, 2944, 3185, 2020, 1220, 247, 50, 1291, 345, 2875, 3624, 1620, 3051, 3186, 1956, 2797, 2443, 1204, 266, 2160, 1958, 3105, 3097, 2763, 1129, 1954, 1357, 1032, 2431, 900, 1683, 2085, 2506, 380, 141, 2012, 1278, 3698, 2469, 3471, 1022, 3791, 48, 3479, 3556, 3827, 904, 25, 1962, 2485, 262, 1573, 3526, 1353, 2739, 1059, 144, 2316, 951, 3515, 3785, 2143, 2951, 1234, 3061, 1021, 2023, 1608, 3004, 616, 1013, 1409, 2096, 923, 968, 2454, 74, 3606, 434, 270, 3108, 736, 3786, 938, 1269, 918, 1777, 1099, 1186, 1375, 2394, 2282, 3763, 2359, 2975, 3528, 337, 1081, 2302, 2006, 232, 2761, 945, 3173, 47, 2805, 3300, 293, 1917, 2268, 1235, 1941, 3301, 1066, 1911, 1500, 461, 3299, 3067, 2154, 3915, 3, 1031, 1093, 1821, 1223, 2947, 2722, 691, 2193, 1653, 2014, 412, 348, 2719, 3060, 783, 1242, 788, 2803, 1172, 4, 3269, 2966, 381, 3566, 3210, 910, 1199, 955, 2357, 2612, 3783, 2352, 837, 1104, 350, 930, 2827, 1272, 1566, 562, 1449, 1480, 1407, 3281, 3178, 1648, 2746, 372, 2070, 2501, 2130, 1654, 3238, 2405, 3604, 277, 3545, 3317, 3270, 2331, 3699, 474, 1894, 1952, 2926, 2001, 1280, 1077, 195, 2639, 1285, 3618, 3571, 1258, 446, 3328, 2915, 2677, 3039, 3869, 581, 1185, 1690, 3435, 1327, 1345, 3675, 3287, 329, 2598, 2021, 2155, 1719, 1212, 586, 778, 3037, 3246, 1086, 1727, 230, 3156, 3926, 104, 3536, 1299, 3882, 1263, 1729, 1694, 1541, 2399, 3089, 1801, 62, 1381, 3489, 2064, 2574, 1150, 653, 1446, 2995, 538, 3705, 866, 3467, 1293, 2846, 2527, 441, 971, 950, 3124, 1586, 552, 2468, 2391, 3396, 2407, 252, 508, 1171, 1042, 1084, 2718, 2641, 1300, 1064, 3912, 1253, 3672, 85, 1275, 3685, 3316, 1290, 2186, 3744, 2132, 2539, 2133, 1994, 2, 162, 1619, 2273, 3712, 1955, 2973, 1485, 2713, 2109, 1916, 442, 3591, 2137, 3457, 2245, 3821, 2664, 79, 2919, 2077, 2585, 1014, 73, 2717, 3296, 2857, 1422, 1030, 1264, 1806, 2141, 3070, 2398, 2094, 3723, 1900, 2616, 3554, 5, 2801, 218, 695, 2463, 2019, 3146, 2053, 94, 832, 3825, 3936, 477, 2421, 1921, 2794, 2338, 671, 1875, 2042, 1616, 1535, 2091, 215, 3033, 300, 959, 1945, 986, 420, 492, 3720, 3478, 2003, 3441, 2139, 272, 1297, 532, 3224, 3350, 3861, 917, 3649, 1913, 2853, 3466, 1126, 1096, 1848, 1337, 2052, 2173, 327, 2337, 1397, 469, 2420, 2083, 3932, 2528, 1043, 3206, 203, 1805, 2134, 553, 2788, 2007, 905, 2920, 2621, 3117, 2747, 198, 1919, 2392, 368, 3616, 41, 2151, 3730, 3852, 3507, 1611, 3355, 3917, 2114, 2065, 2732, 2969, 1635, 425, 1236, 1964, 3196, 1605, 153, 1518, 52, 3949, 3265, 546, 934, 3302, 2575, 3088, 1027, 3553, 2318, 319, 949, 2402, 3134, 3704, 3249, 2927, 2514, 2037, 2206, 2147, 1562, 2883, 2335, 366, 206, 1831, 2779, 2453, 2949, 2912, 2126, 3873, 3706, 2414, 3733, 3902, 2136, 19, 3145, 2348, 848, 2856, 3635, 3461, 613, 1588, 2990, 2940, 2442, 307, 1015, 2261, 1385, 1111, 199, 3264, 3857, 1211, 3707, 2436, 3686, 208, 3011, 3896, 3855, 1484, 3599, 1658, 1020, 3405, 82, 3133, 343, 3068, 909, 507, 2010, 3877, 3812, 1897, 2072, 2709, 3308, 239, 2899, 1347, 3498, 1895, 3629, 801, 491, 3741, 1260, 29, 1078, 839, 2870, 1672, 3735, 2176, 2505, 3365, 1479, 1268, 3000, 550, 379, 2946, 3870, 3055, 2314, 1949, 1792, 3813, 176, 1012, 2266, 2532, 3872, 3093, 2448, 2280, 1321, 170, 3951, 3716, 2533, 168, 1049, 2921, 1856, 1047, 196, 242, 615, 3046, 2071, 724, 1334, 2142, 3580, 3719, 670, 288, 2263, 2346, 1410, 386, 216, 2635, 1699, 2819, 3426, 283, 3841, 3795, 3034, 3639, 3567, 1344, 3701, 2550, 3211, 182, 481, 2642, 3660, 669, 3790, 1845, 1836, 3584, 3475, 3449, 1438, 2498, 921, 1944, 3258, 907, 647, 2267, 2903, 1554, 2568, 2241, 248, 3562, 2411, 2202, 802, 2043, 1429, 3438, 494, 2693, 1173, 1969, 3102, 3923, 173, 1217, 338, 1758, 69, 2102, 369, 3708, 1591, 1350, 3019, 1191, 2967, 3071, 1465, 2513, 3274, 1301, 2168, 3747, 2738, 762, 211, 1804, 2446, 879, 2290, 428, 558, 3388, 3054, 414, 2439, 3077, 2122, 309, 2936, 2643, 1615, 818, 846, 2900, 1226, 2057, 3839, 3181, 1797, 2166, 3020, 3655, 506, 2714, 2110, 279, 3864, 147, 1870, 1660, 3802, 408, 3130, 1788, 2097, 186, 1463, 1840, 1245, 978, 2363, 927, 2404, 26, 1556, 3090, 2159, 1085, 27, 2774, 1769, 520, 2239, 3240, 302, 1798, 1881, 271, 3150, 3063, 1549, 973, 2106, 3340, 363, 358, 3492, 807, 2361, 3846, 2678, 1621, 3391, 715, 1730, 2624, 334, 2048, 2820, 2993, 8, 1169, 781, 3445, 896, 1904, 2334, 1936, 2365, 2816, 3557, 880, 737, 1816, 3040, 1419, 1976, 575, 1874, 1069, 3447, 113, 426, 2380, 1120, 2101, 1995, 2752, 2553, 2320, 3153, 2084, 3268, 3682, 1922, 753, 3539, 2668, 1547, 2351, 3440, 3600, 382, 668, 3696, 465, 1515, 3739, 1130, 3714, 482, 2860, 3921, 2417, 371, 3808, 2789, 2474, 1896, 2736, 2379, 2613, 2786, 1582, 2163, 512, 415, 3547, 332, 3204, 3920, 1417, 1194, 3121, 2876, 2540, 44, 1346, 991, 1398, 2548, 754, 2062, 3284, 1669, 2495, 2517, 3439, 383, 2989, 405, 3074, 1312, 3454, 2609, 188, 1216, 3679, 2376, 3399, 2276, 40, 1686, 124, 3612, 2696, 3922, 1034, 313, 3364, 2704, 2972, 87, 2284, 1603, 2232, 1428, 2457, 407, 360, 2924, 1546, 688, 875, 2630, 2748, 2435, 1667, 1600, 2066, 2445, 117, 542, 3724, 61, 131, 2117, 2879, 2205, 1623, 501, 2373, 2408, 3838, 2741, 280, 1456, 3886, 519, 1362, 3613, 3738, 2561, 3727, 3577, 346, 2952, 3200, 2848, 663, 257, 2190, 1483, 464]


# T1: L_m = [item for item in L_mm if item in L_m_ok] L_f = [item for item in L_f_ok if item in L_ff] # -- combination AUC: .60
# T2: L_m = [item for item in L_m_ok if item in L_mm] L_f = [item for item in L_ff if item in L_f_ok] # -- combination AUC: .64
# T3: L_m = [item for item in L_m_ok if item in L_mm] L_f = [item for item in L_f_ok if item in L_ff] # -- combination AUC: .74
# T4: L_m = [item for item in L_mm if item in L_m_ok] L_f = [item for item in L_ff if item in L_f_ok] # -- combination AUC: .48
# T4 (same as the blurMe implemented in PerBlur)
# T5: common items list as per LR, FR and hardcoded but ordere by hardcodeed # -- combiination: .48
# T6: common items list as per LR, FR but ordere by LR: .73
# T7: common items list as per LR, FR but ordere by FR: .81


# --- ML100k : through LR
# L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 1233, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 1134, 1006, 303, 264, 339, 1010, 276, 218, 995, 240, 569, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 158, 1226, 322, 462, 265, 750, 23, 281, 137, 641, 333, 461, 1097, 360, 736, 164, 358, 301, 479, 647, 1160, 168, 144, 94, 687, 60, 70, 616, 175, 6, 354, 460, 344, 1115, 985, 1019, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 1524, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 1293, 361, 235, 258, 330, 56, 347, 1143, 52, 205, 371, 1024, 761, 8, 369, 116, 79, 617, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 772, 620, 355, 181, 1126, 1347, 717, 936, 500, 790, 612, 1591, 893, 489, 1316, 855, 2, 773, 180, 441, 871, 755, 523, 477, 227, 412, 183, 160, 657, 510, 575, 964, 1399, 77, 43, 1375, 474, 1105, 1367, 816, 67, 705, 1098, 362, 1172, 1133, 511, 806, 546, 768, 96, 457, 108, 1137, 1558, 352, 341, 825, 165, 1381, 584, 505, 738, 908, 404, 718, 1430, 1132, 679, 15, 513, 117, 670, 490, 1263, 665, 28, 1344, 338, 567, 59, 32, 1014, 1175, 989, 1264, 971, 351, 475, 57, 1429, 811, 864, 809, 969, 562, 589, 837, 1199, 1504, 177, 316, 1342, 463, 134, 703, 1355, 306, 543, 378, 712, 639, 105, 99, 229, 484, 1392, 1046, 651, 1217, 157, 577, 232, 1188, 114, 1149, 1215, 1617, 161, 166, 395, 1511, 1087, 947, 754, 656, 931, 1514, 591, 408, 685, 97, 363, 554, 1353, 468, 455, 640, 1102, 1202, 379, 805, 473, 634, 683, 300, 734, 31, 1060, 650, 72, 191, 259, 467, 1280, 199, 826, 747, 1283, 68, 1079, 1449, 941, 887, 578, 1240, 329, 1407, 274, 828, 1167, 174, 428, 905, 780, 753, 396, 4, 1266, 277, 1107, 71, 519, 1125, 1062, 943, 189, 325, 719, 502, 263, 1451, 932, 233, 970, 1242, 1331, 1022, 880, 1063, 610, 197, 1064, 1218, 813, 551, 16, 331, 840, 1204, 208, 162, 1652, 18, 11, 849, 963, 501, 820, 930, 743, 896, 318, 848, 1396, 76, 1142, 1194, 425, 968, 171, 1300, 282, 1239, 1244, 1093, 824, 1393, 496, 26, 215, 1312, 573, 818, 1220, 527, 1456, 933, 730, 1302, 49, 1357, 1306, 585, 693, 517, 1258, 336, 624, 1177, 417, 1439, 1512, 207, 1001, 802, 267, 1158, 1058, 996, 900, 299, 1170, 226, 1284, 1602, 46, 572, 606, 1304, 268, 192, 1303, 1092, 1200, 407, 1211, 62, 1057, 1180, 1144, 917, 636, 1622, 480, 1398, 800, 1016, 241, 982, 945, 1219, 1598, 343, 1192, 1075, 603, 1610, 580, 231, 1262, 986, 469, 1222, 1171, 515, 1174, 615, 1432, 492, 664, 542, 918, 1323, 972, 642, 1531, 781, 984, 850, 187, 1151, 807, 1535, 149, 257, 364, 1450, 40, 141, 1400, 103, 587, 978, 44, 1310, 1374, 1314, 1362, 1241, 845, 564, 1521, 951, 1252, 1333, 1018, 976, 1485, 85, 244, 1465, 980, 1536, 503, 1523, 1153, 1052, 1488, 803, 1282, 394, 41, 1181, 1104, 512, 914, 182, 1021, 1330, 756, 1159, 1337, 1164, 865, 206, 1, 836, 778, 1470, 552, 644, 817, 1050, 1426, 1155, 185, 530, 81, 1230, 497, 3, 967, 1592, 777, 335, 851, 1235, 1487, 923, 1525, 796, 509, 1369, 418, 724, 769, 1502, 1625, 1162, 1425, 1189, 566, 221, 1288, 570, 835, 1326, 37, 1411, 1368, 994, 1106, 1272, 655, 1216, 1206, 1236, 1495, 413, 1534, 646, 1372, 1653, 1311, 340, 1198, 1594, 1501, 958, 1307, 583, 992, 537, 666, 1332, 1145, 1455, 1376, 635, 686, 534, 1259, 1438, 1417, 1100, 1205, 1324, 176, 138, 296, 926, 1139, 1354, 1327, 1405, 1184, 592, 561, 139, 104, 1231, 101, 173, 927, 1463, 1183, 1360, 1287, 1350, 1371, 1321, 1320, 1325, 1329, 1339, 1340, 1341, 1343, 1345, 1348, 1349, 1352, 1363, 1364, 1365, 1366, 1373, 1389, 1390, 1358, 1319, 1612, 1276, 1415, 1624, 1225, 1533, 1623, 557, 1309, 1193, 862, 1322, 680, 808, 256, 1496, 652, 1506, 626, 1214, 1462, 1478, 598, 1413, 1414, 1597, 1491, 1305, 1318, 798, 34, 119, 1138, 1537, 1027, 1541, 1030, 1542, 1543, 1546, 12, 1548, 1551, 528, 1552, 1555, 1556, 21, 1557, 1559, 1560, 25, 1561, 1562, 1563, 541, 1564, 1565, 1056, 1566, 1567, 547, 548, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 558, 1577, 1579, 1580, 1581, 1582, 1583, 1584, 54, 1586, 1587, 1588, 1589, 1590, 1593, 61, 1595, 1596, 576, 1599, 1601, 1603, 1604, 1607, 1096, 1608, 1609, 75, 1611, 1613, 1103, 1616, 593, 1618, 1619, 84, 1108, 1621, 599, 600, 601, 1626, 1627, 1116, 1117, 1118, 95, 1628, 609, 1122, 1123, 1127, 1129, 618, 1644, 621, 110, 113, 115, 1140, 1141, 1654, 1655, 1657, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1154, 643, 1156, 1666, 1667, 135, 1668, 1669, 1670, 1671, 1672, 1165, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 663, 152, 1682, 1178, 1179, 1185, 677, 1191, 681, 1201, 695, 700, 706, 711, 1224, 715, 1228, 1229, 722, 214, 726, 1246, 223, 225, 1249, 1250, 228, 741, 1251, 1254, 1255, 234, 1260, 1261, 1267, 757, 759, 1274, 764, 1279, 770, 1286, 776, 779, 1292, 784, 1297, 788, 1301, 791, 793, 1308, 799, 801, 1317, 810, 302, 814, 822, 1334, 830, 833, 323, 326, 838, 328, 839, 1351, 843, 1356, 334, 1359, 852, 853, 857, 858, 1370, 861, 1378, 1379, 870, 1382, 1384, 874, 1387, 1391, 1395, 884, 1397, 375, 376, 1402, 1404, 1406, 1408, 897, 386, 1410, 1412, 903, 1418, 907, 1419, 1420, 910, 399, 911, 1421, 1422, 1423, 1427, 921, 922, 1435, 1437, 415, 1440, 1446, 1447, 940, 1452, 1453, 1454, 1457, 1458, 1460, 437, 438, 439, 1461, 1464, 1467, 1469, 960, 1476, 965, 1477, 456, 1481, 1482, 1484, 973, 1486, 465, 977, 1489, 1492, 1493, 1494, 1497, 1498, 1499, 1500, 990, 1505, 483, 1507, 1509, 1510, 487, 999, 1513, 1003, 1515, 1518, 1520, 1526, 1015, 1528, 1532]
# L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 1237, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 1067, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 128, 1295, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 1253, 1099, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 444, 405, 950, 540, 1346, 891, 611, 582, 66, 1035, 346, 1238, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1069, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 602, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 983, 1620, 890, 1176, 1017, 237, 1294, 388, 366, 245, 508, 387, 53, 514, 1042, 440, 1034, 422, 1068, 1527, 1077, 939, 74, 1232, 373, 536, 1011, 631, 381, 956, 875, 1111, 1336, 459, 607, 1049, 1442, 155, 697, 1066, 1285, 293, 944, 88, 1131, 1221, 1168, 1109, 675, 254, 1045, 209, 1656, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 725, 286, 112, 559, 1085, 892, 102, 211, 1474, 1213, 285, 915, 1277, 1383, 758, 1234, 674, 384, 1163, 774, 783, 283, 637, 735, 1479, 885, 630, 565, 709, 938, 1169, 38, 560, 1248, 1401, 142, 1112, 219, 953, 275, 594, 1043, 464, 1059, 1195, 676, 210, 47, 1130, 63, 255, 494, 1080, 1472, 744, 1409, 998, 36, 250, 1114, 672, 1209, 308, 632, 17, 1203, 789, 762, 1522, 1385, 538, 491, 1550, 307, 765, 669, 775, 1135, 1120, 217, 841, 563, 1044, 949, 766, 1082, 966, 1210, 608, 383, 314, 1071, 868, 812, 821, 1029, 1298, 1380, 854, 574, 667, 1039, 1388, 51, 579, 252, 1338, 733, 1182, 50, 1009, 1040, 767, 389, 397, 1544, 1615, 946, 1147, 728, 1245, 224, 80, 212, 1483, 786, 1278, 122, 934, 1187, 1434, 702, 391, 1070, 374, 1658, 443, 86, 1000, 1605, 1444, 1480, 69, 1247, 400, 1150, 975, 35, 1076, 549, 928, 531, 622, 614, 1091, 1020, 1554, 860, 658, 740, 959, 1468, 22, 571, 377, 1007, 470, 1110, 1471, 390, 1269, 555, 1055, 633, 1074, 1299, 1095, 1148, 1530, 859, 1473, 1585, 280, 997, 1088, 804, 1335, 1643, 1136, 1291, 92, 167, 434, 284, 961, 1004, 453, 1539, 1031, 1084, 126, 1377, 1424, 1540, 619, 974, 196, 485, 1152, 454, 673, 627, 345, 29, 605, 398, 929, 1642, 1636, 1639, 1645, 1650, 1651, 913, 1361, 1631, 952, 1207, 1578, 714, 1053, 424, 526, 1517, 123, 476, 660, 955, 935, 1443, 1124, 586, 380, 701, 1441, 1227, 1270, 414, 1503, 981, 163, 493, 30, 247, 1197, 1166, 834, 1606, 431, 1271, 787, 1428, 867, 504, 1072, 1475, 886, 1037, 1268, 1629, 1630, 1632, 1633, 1635, 1637, 1638, 1640, 1641, 1646, 1647, 1649, 1538, 13, 771, 797, 1196, 1549, 1516, 522, 794, 1614, 442, 1005, 1445, 795, 1081, 1208, 273, 1257, 1256, 844, 1032, 1273, 1403, 782, 1121, 1025, 106, 545, 1508, 1223, 957, 91, 27, 1448, 533, 1519, 421, 590, 699, 869, 1212, 1553, 842, 1490, 78, 1529, 368, 1289, 1275, 1186, 1243, 1416, 1634, 1648, 1436, 920, 1173, 698, 1290, 1547, 1545, 1078, 1002, 481, 1433, 426, 1146, 661, 1161, 556, 1466, 82, 1459, 1113, 732, 1537, 1027, 1541, 1030, 1542, 1543, 1546, 12, 1548, 1551, 528, 1552, 1555, 1556, 21, 1557, 1559, 1560, 25, 1561, 1562, 1563, 541, 1564, 1565, 1056, 1566, 1567, 547, 548, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 558, 1577, 1579, 1580, 1581, 1582, 1583, 1584, 54, 1586, 1587, 1588, 1589, 1590, 1593, 61, 1595, 1596, 576, 1599, 1601, 1603, 1604, 1607, 1096, 1608, 1609, 75, 1611, 1613, 1103, 1616, 593, 1618, 1619, 84, 1108, 1621, 599, 600, 601, 1626, 1627, 1116, 1117, 1118, 95, 1628, 609, 1122, 1123, 1127, 1129, 618, 1644, 621, 110, 113, 115, 1140, 1141, 1654, 1655, 1657, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1154, 643, 1156, 1666, 1667, 135, 1668, 1669, 1670, 1671, 1672, 1165, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 663, 152, 1682, 1178, 1179, 1185, 677, 1191, 681, 1201, 695, 700, 706, 711, 1224, 715, 1228, 1229, 722, 214, 726, 1246, 223, 225, 1249, 1250, 228, 741, 1251, 1254, 1255, 234, 1260, 1261, 1267, 757, 759, 1274, 764, 1279, 770, 1286, 776, 779, 1292, 784, 1297, 788, 1301, 791, 793, 1308, 799, 801, 1317, 810, 302, 814, 822, 1334, 830, 833, 323, 326, 838, 328, 839, 1351, 843, 1356, 334, 1359, 852, 853, 857, 858, 1370, 861, 1378, 1379, 870, 1382, 1384, 874, 1387, 1391, 1395, 884, 1397, 375, 376, 1402, 1404, 1406, 1408, 897, 386, 1410, 1412, 903, 1418, 907, 1419, 1420, 910, 399, 911, 1421, 1422, 1423, 1427, 921, 922, 1435, 1437, 415, 1440, 1446, 1447, 940, 1452, 1453, 1454, 1457, 1458, 1460, 437, 438, 439, 1461, 1464, 1467, 1469, 960, 1476, 965, 1477, 456, 1481, 1482, 1484, 973, 1486, 465, 977, 1489, 1492, 1493, 1494, 1497, 1498, 1499, 1500, 990, 1505, 483, 1507, 1509, 1510, 487, 999, 1513, 1003, 1515, 1518, 1520, 1526, 1015, 1528, 1532]

# --- ML100k : through LR & FR and order by LR : 0.58
# L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 303, 264, 339, 1010, 276, 218, 995, 240, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 322, 462, 265, 750, 23, 281, 137, 333, 736, 164, 358, 301, 479, 647, 168, 144, 94, 687, 60, 70, 175, 6, 354, 344, 1115, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 235, 258, 330, 56, 347, 52, 205, 371, 1024, 8, 369, 116, 79, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 620, 355, 181, 717, 936, 500, 893, 489, 1316, 855, 2, 180, 871, 755, 523, 477, 227, 412, 183, 657, 510, 77, 474, 1105, 67, 705, 362, 1133, 511, 546, 768, 96, 457, 108, 1137, 352, 341, 825, 165, 584, 505, 908, 404, 679, 15, 513, 117, 490, 665, 28, 338, 59, 32, 1014, 989, 351, 475, 57, 864, 969, 177, 316, 463, 134, 703, 306, 378, 105, 99, 229, 484, 651, 157, 232, 114, 161, 395, 754, 931, 591, 408, 685, 97, 554, 468, 455, 640, 473, 683, 300, 31, 1060, 650, 72, 191, 259, 1280, 199, 826, 747, 68, 1079, 887, 578, 329, 274, 174, 428, 905, 780, 753, 396, 4, 277, 71, 519, 1062, 189, 325, 502, 233, 1022, 880, 1063, 197, 813, 16, 331, 208, 162, 11, 963, 501, 820, 930, 896, 318, 1142, 1194, 425, 171, 282, 496, 26, 215, 573, 527, 730, 49, 693, 517, 336, 417, 207, 900, 299, 226, 606, 268, 192, 407, 62, 636, 480, 1016, 241, 945, 343, 603, 231, 469, 515, 492, 664, 972, 642, 781, 984, 187, 149, 257, 40, 141, 978, 44, 845, 85, 244, 512, 182, 1021, 756, 1, 778, 644, 1050, 185, 530, 81, 497, 3, 335, 923, 509, 418, 724, 566, 221, 570, 655, 413, 1311, 340, 583, 537, 635, 686, 176, 296, 926, 561, 101, 173, 862, 680, 652]
# L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 405, 950, 891, 611, 582, 66, 1035, 346, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 1620, 890, 1176, 1017, 237, 1294, 245, 508, 387, 53, 514, 422, 1068, 1527, 939, 1232, 1011, 631, 381, 956, 875, 459, 607, 1442, 155, 697, 1066, 1285, 293, 88, 1221, 1109, 675, 254, 209, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 286, 559, 1085, 892, 102, 211, 285, 1383, 758, 1234, 674, 1163, 283, 637, 735, 885, 630, 709, 938, 38, 142, 219, 953, 275, 1059, 676, 210, 47, 63, 255, 494, 744, 250, 1114, 672, 308, 632, 17, 1203, 762, 1522, 538, 491, 307, 669, 775, 1135, 217, 841, 949, 766, 966, 314, 812, 821, 574, 1039, 1388, 51, 579, 252, 50, 1009, 1040, 1147, 224, 212, 1483, 1278, 122, 934, 702, 443, 86, 1444, 69, 400, 975, 35, 549, 928, 531, 622, 614, 1020, 658, 740, 1468, 22, 1007, 470, 1269, 633, 1074, 1299, 1095, 1148, 280, 1136, 92, 167, 434, 284, 961, 1084, 126, 619, 974, 196, 485, 1152, 673, 627, 345, 29, 605, 929, 952, 714, 1053, 526, 123, 476, 660, 955, 380, 1503, 163, 493, 1197, 431, 504, 886, 1037, 13, 794, 273, 844, 1032, 1025, 106, 91, 533, 421, 699, 869, 78, 1243, 481, 661, 82, 732]

### it seems there is a inter change between l_m and l_f list
# L_f = np.loadtxt('ml-1m/Other/old_ml1m_Lm_Item.dat', dtype=int)
# L_m = np.loadtxt('ml-1m/Other/old_ml1m_Lf_Item.dat', dtype=int)


# print("---------------")
# print("for ML1M PerBlur")
L_mk = np.loadtxt('ml-1m/Other/new_ml1m_Lm_Item.dat', dtype=float)
L_fk = np.loadtxt('ml-1m/Other/new_ml1m_Lf_Item.dat', dtype=float)

# common_Lm = set(L_m) & set(L_mk)
# print(f"common Lm : {len(common_Lm)}")

# common_Lf = set(L_f) & set(L_fk)
# print(f"common Lf: {len(common_Lf)}")


###################################

## For Flixster
#
# L_m = [292.0,487.0,727.0,790.0,700.0,238.0,263.0,215.0,723.0,443.0,501.0,365.0,557.0,691.0,821.0,468.0,565.0,216.0,224.0,350.0,37.0,746.0,260.0,655.0,366.0,302.0,453.0,414.0,210.0,763.0,563.0,1852.0,229.0,348.0,258.0,17.0,693.0,155.0,371.0,249.0,237.0,676.0,508.0,48.0,809.0,789.0,490.0,103.0,304.0,1862.0,318.0,436.0,690.0,469.0,309.0,1136.0,376.0,207.0,1346.0,394.0,567.0,337.0,1357.0,483.0,471.0,2477.0,416.0,930.0,797.0,559.0,2448.0,349.0,95.0,447.0,2445.0,1622.0,645.0,808.0,399.0,250.0,375.0,2720.0,899.0,395.0,905.0,919.0,409.0,461.0,844.0,931.0,552.0,996.0,590.0,877.0,703.0,1620.0,374.0,141.0,449.0,425.0,199.0,341.0,50.0,64.0,444.0,718.0,915.0,505.0,685.0,546.0,803.0,1228.0,140.0,80.0,2691.0,895.0,2685.0,1900.0,593.0,1128.0,1493.0,426.0,1350.0,1341.0,392.0,1475.0,1506.0,692.0,2822.0,267.0,476.0,2576.0,2442.0,1624.0,2607.0,321.0,297.0,1369.0,750.0,1876.0,362.0,2695.0,90.0,2598.0,530.0,486.0,171.0,298.0,147.0,148.0,1554.0,73.0,901.0,1242.0,762.0,232.0,683.0,2011.0,403.0,446.0,729.0,1895.0,1100.0,2132.0,43.0,832.0,798.0,404.0,2650.0,764.0,1529.0,882.0,1057.0,667.0,368.0,382.0,547.0,2597.0,203.0,333.0,639.0,1311.0,1374.0,2594.0,280.0,168.0,1427.0,11.0,65.0,2590.0,2367.0,927.0,114.0,109.0,18.0,158.0,598.0,2444.0,1381.0,608.0,2471.0,143.0,2492.0,86.0,1772.0,2591.0,2204.0,213.0,315.0,1255.0,101.0,438.0,512.0,369.0,2108.0,929.0,2307.0,479.0,1765.0,60.0,548.0,1177.0,191.0,715.0,772.0,92.0,2726.0,1576.0,1487.0,132.0,831.0,401.0,123.0,431.0,2051.0,435.0,276.0,2723.0,2491.0,1312.0,495.0,1173.0,284.0,1349.0,2246.0,270.0,594.0,2536.0,2026.0,2022.0,61.0,1834.0,1801.0,492.0,1109.0,1605.0,251.0,1735.0,1528.0,2565.0,561.0,373.0,1721.0,725.0,858.0,2436.0,464.0,2044.0,1033.0,1256.0,1492.0,356.0,108.0,234.0,938.0,2213.0,2656.0,124.0,872.0,518.0,1618.0,74.0,2258.0,765.0,2219.0,307.0,1967.0,1436.0,485.0,2320.0,558.0,656.0,1853.0,1053.0,2694.0,1541.0,1904.0,63.0,719.0,1338.0,303.0,2054.0,527.0,935.0,805.0,1028.0,942.0,2560.0,1501.0,1186.0,955.0,1936.0,1812.0,1950.0,2127.0,2434.0,1737.0,1850.0,437.0,330.0,282.0,336.0,424.0,379.0,1406.0,2234.0,345.0,2639.0,306.0,2447.0,2589.0,1867.0,2289.0,2684.0,1395.0,1847.0,1484.0,1316.0,1694.0,526.0,2672.0,206.0,1134.0,1822.0,2808.0,85.0,724.0,806.0,615.0,188.0,898.0,301.0,118.0,1644.0,1582.0,710.0,82.0,2439.0,432.0,285.0,1380.0,2519.0,1626.0,2702.0,54.0,165.0,1609.0,1523.0,682.0,819.0,2636.0,1239.0,1863.0,900.0,183.0,1796.0,440.0,1358.0,347.0,327.0,1636.0,1776.0,278.0,807.0,1425.0,2485.0,75.0,731.0,580.0,2253.0,2032.0,1055.0,1351.0,156.0,1875.0,1281.0,1121.0,2388.0,1683.0,1135.0,878.0,2378.0,462.0,2134.0,194.0,55.0,830.0,1851.0,625.0,2697.0,1106.0,187.0,1435.0,1556.0,1649.0,2165.0,2686.0,1969.0,1947.0,488.0,922.0,879.0,1778.0,286.0,480.0,768.0,550.0,2524.0,1522.0,2193.0,472.0,856.0,1808.0,622.0,1983.0,1387.0,1512.0,1409.0,541.0,459.0,857.0,2052.0,780.0,1645.0,386.0,1431.0,236.0,370.0,1469.0,120.0,2214.0,2282.0,24.0,2545.0,2382.0,290.0,2567.0,1993.0,2457.0,1191.0,1869.0,1285.0,383.0,1725.0,1166.0,1606.0,305.0,166.0,1590.0,713.0,800.0,429.0,1982.0,44.0,1489.0,1771.0,578.0,193.0,1391.0,1763.0,928.0,2009.0,2389.0,1245.0,2405.0,367.0,2074.0,1353.0,1651.0,2006.0,2757.0,2005.0,62.0,1359.0,42.0,570.0,1418.0,744.0,936.0,1344.0,1764.0,2043.0,1234.0,2174.0,174.0,2599.0,921.0,2454.0,1972.0,2604.0,1902.0,119.0,555.0,178.0,2654.0,679.0,2310.0,1294.0,2544.0,489.0,1096.0,227.0,1577.0,125.0,804.0,2273.0,2719.0,1920.0,1373.0,2527.0,1308.0,1914.0,1671.0,1365.0,504.0,1841.0,1303.0,2555.0,1814.0,441.0,2021.0,2133.0,2215.0,521.0,586.0,1318.0,1773.0,1558.0,1580.0,1768.0,2119.0,551.0,186.0,1525.0,89.0,2418.0,1149.0,1709.0,360.0,1526.0,1329.0,1032.0,1190.0,406.0,1524.0,2010.0,2559.0,2647.0,1722.0,545.0,2373.0,841.0,1268.0,2329.0,2581.0,648.0,1942.0,2430.0,916.0,2732.0,562.0,2055.0,2739.0,151.0,1009.0,2262.0,240.0,2768.0,503.0,2645.0,2665.0,1463.0,2064.0,1123.0,81.0,1401.0,417.0,902.0,1710.0,1408.0,1542.0,2783.0,576.0,1887.0,473.0,2774.0,991.0,268.0,2059.0,1572.0,1608.0,2704.0,1376.0,1631.0,1334.0,2625.0,1828.0,1840.0,716.0,1185.0,1581.0,2130.0,668.0,2255.0,2593.0,2239.0,1866.0,1858.0,924.0,1229.0,474.0,758.0,2314.0,2585.0,2252.0,1087.0,2463.0,592.0,2186.0,748.0,1926.0,2106.0,248.0,791.0,1510.0,2648.0,478.0,2274.0,2125.0,2394.0,1933.0,1152.0,340.0,1964.0,343.0,1368.0,1630.0,1424.0,664.0,2392.0,2818.0,1103.0,1968.0,69.0,2243.0,1945.0,2614.0,153.0,1111.0,1826.0,1584.0,2192.0,2003.0,707.0,2627.0,2035.0,1407.0,1732.0,463.0,161.0,1396.0,455.0,2018.0,2169.0,445.0,1378.0,1602.0,2816.0,189.0,415.0,2194.0,981.0,351.0,1050.0,2633.0,1453.0,640.0,68.0,975.0,2562.0,584.0,2107.0,1819.0,164.0,2530.0,1845.0,1877.0,848.0,1703.0,2668.0,1113.0,2602.0,378.0,1464.0,2767.0,2578.0,1901.0,281.0,880.0,1648.0,1485.0,2102.0,851.0,2634.0,1830.0,254.0,152.0,2759.0,1717.0,1414.0,1998.0,1356.0,252.0,1046.0,2266.0,1211.0,214.0,823.0,708.0,2655.0,2566.0,952.0,770.0,1958.0,2027.0,2111.0,2443.0,1790.0,1692.0,1757.0,2158.0,1916.0,1779.0,2080.0,2024.0,2669.0,1471.0,2049.0,220.0,1744.0,1347.0,2456.0,358.0,1623.0,87.0,1195.0,2118.0,596.0,346.0,2362.0,1446.0,2481.0,2605.0,1843.0,1497.0,2084.0,2455.0,2277.0,312.0,525.0,1552.0,1274.0,2643.0,411.0,2706.0,1613.0,897.0,1340.0,1751.0,2296.0,1324.0,162.0,2004.0,1856.0,225.0,638.0,1076.0,2183.0,2221.0,72.0,1687.0,1210.0,391.0,2212.0,2467.0,1518.0,1088.0,1214.0,2689.0,1723.0,217.0,589.0,1029.0,2191.0,946.0,966.0,1676.0,2302.0,154.0,1441.0,2701.0,1574.0,1480.0,2247.0,2177.0,982.0,450.0,842.0,2341.0,1802.0,9.0,741.0,2298.0,76.0,1569.0,2744.0,2601.0,465.0,1473.0,2493.0,2501.0,1138.0,2549.0,397.0,2093.0,1083.0,88.0,402.0,1238.0,2690.0,1400.0,1788.0,2269.0,735.0,816.0,104.0,1248.0,2628.0,2207.0,159.0,2352.0,2785.0,2236.0,914.0,2446.0,2336.0,1500.0,502.0,1905.0,2225.0,2408.0,122.0,1511.0,1986.0,277.0,1398.0,418.0,175.0,1278.0,1498.0,1394.0,2399.0,2497.0,361.0,1879.0,427.0,1729.0,2162.0,1240.0,1495.0,1575.0,2275.0,1980.0,1257.0,1254.0,2121.0,1419.0,222.0,77.0,1054.0,384.0,1226.0,1855.0,560.0,687.0,112.0,1216.0,28.0,799.0,1477.0,2749.0,2142.0,1443.0,554.0,1413.0,2148.0,1382.0,1944.0,2441.0,1227.0,1267.0,1708.0,2267.0,1355.0,2413.0,2577.0,2209.0,1886.0,2160.0,571.0,907.0,1686.0,1712.0,1272.0,2313.0,702.0,1604.0,2384.0,172.0,2651.0,2072.0,1361.0,2066.0,1189.0,180.0,1978.0,2317.0,1912.0,316.0,283.0,937.0,2638.0,2190.0,1325.0,1483.0,255.0,1601.0,481.0,2265.0,2045.0,749.0,230.0,2770.0,1258.0,2525.0,1913.0,888.0,1315.0,1815.0,454.0,2584.0,1393.0,1342.0,1827.0,2600.0,1736.0,976.0,1056.0,2105.0,1126.0,709.0,170.0,1793.0,1745.0,2698.0,144.0,2309.0,412.0,2743.0,2094.0,2374.0,1652.0,1996.0,1371.0,1741.0,1438.0,2295.0,2437.0,2136.0,2409.0,2603.0,2257.0,1295.0,2419.0,1707.0,2256.0,1437.0,1502.0,2721.0,2000.0,1198.0,1873.0,2122.0,660.0,2631.0,1929.0,1938.0,1531.0,2235.0,127.0,1388.0,2056.0,953.0,2188.0,2023.0,1760.0,1675.0,1921.0,2229.0,344.0,1726.0,1007.0,2474.0,2755.0,308.0,136.0,932.0,1586.0,1829.0,2086.0,2754.0,1906.0,1488.0,1172.0,131.0,1383.0,2397.0,363.0,1491.0,2306.0,2395.0,2552.0,2172.0,496.0,971.0,769.0,2404.0,1451.0,960.0,2248.0,2146.0,1074.0,1494.0,1813.0,747.0,1940.0,867.0,2569.0,2202.0,884.0,1169.0,2509.0,83.0,1490.0,300.0,2649.0,262.0,99.0,1544.0,883.0,2377.0,2571.0,2244.0,1065.0,2046.0,1789.0,1621.0,2713.0,2103.0,261.0,16.0,581.0,1961.0,1897.0,200.0,2128.0,2340.0,2688.0,801.0,434.0,2197.0,2401.0,2025.0,2683.0,1252.0,2641.0,149.0,2494.0,2386.0,1282.0,2687.0,1659.0,1147.0,2383.0,1165.0,1517.0,2047.0,1206.0,1095.0,1894.0,1896.0,612.0,1956.0,2123.0,887.0,1730.0,2076.0,1706.0,204.0,1720.0,2414.0,2804.0,121.0,2789.0,2081.0,2126.0,274.0,2338.0,1131.0,1118.0,1476.0,2173.0,2028.0,1444.0,1704.0,2805.0,1354.0,2564.0,2033.0,2155.0,1530.0,430.0,2327.0,1283.0,134.0,1068.0,2775.0,1565.0,12.0,1553.0,2264.0,2498.0,2230.0,2167.0,1270.0,992.0,1036.0,1059.0,1946.0,2422.0,2762.0,2070.0,2421.0,1301.0,498.0,2350.0,1999.0,2674.0,2211.0,2542.0,2728.0,2510.0,1617.0,289.0,2618.0,1465.0,1589.0,1225.0,421.0,197.0,773.0,2129.0,2677.0,2079.0,1949.0,1953.0,1599.0,2478.0,2344.0,466.0,2588.0,1962.0,1231.0,1327.0,1881.0,1738.0,2085.0,2371.0,142.0,1557.0,2363.0,654.0,1780.0,201.0,1591.0,1114.0,753.0,2312.0,1313.0,1888.0,422.0,1161.0,2831.0,196.0,2615.0,845.0,740.0,2573.0,173.0,2145.0,1579.0,334.0,458.0,97.0,1971.0,2366.0,2734.0,2782.0,1328.0,1004.0,2380.0,706.0,2100.0,2480.0,1610.0,1697.0,1762.0,652.0,2705.0,19.0,2801.0,2335.0,2067.0,2170.0,400.0,381.0,1092.0,2227.0,494.0,1077.0,1791.0,1922.0,630.0,2534.0,1990.0,113.0,2161.0,1170.0,2206.0,2742.0,2272.0,1047.0,983.0,2670.0,167.0,2288.0,587.0,2435.0,621.0,2291.0,2833.0,398.0,2515.0,1798.0,2520.0,2693.0,2699.0,1804.0,777.0,1250.0,1385.0,2164.0,822.0,2038.0,233.0,1573.0,1027.0,722.0,2402.0,1402.0,2529.0,2233.0,2788.0,1882.0,1410.0,517.0,1989.0,1209.0,106.0,1188.0,2099.0,2533.0,1939.0,2322.0,2372.0,629.0,2516.0,299.0,2238.0,1403.0,1496.0,1935.0,1117.0,1770.0,2396.0,2609.0,2015.0,2089.0,632.0,1619.0,1747.0,577.0,1462.0,1299.0,1653.0,2304.0,2403.0,634.0,2764.0,2251.0,2062.0,2550.0,988.0,1988.0,1563.0,2171.0,2323.0,2153.0,2387.0,2135.0,1578.0,1719.0,2518.0,452.0,1660.0,2364.0,666.0,1607.0,2368.0,1513.0,1752.0,2328.0,1817.0,2150.0,7.0,45.0,2029.0,2806.0,963.0,2181.0,2792.0,2263.0,2610.0,295.0,1072.0,2245.0,1655.0,2069.0,2554.0,1503.0,2325.0,1280.0,177.0,2718.0,1421.0,2820.0,1073.0,2830.0,2505.0,93.0,913.0,2285.0,2205.0,2802.0,1821.0,1781.0,354.0,1943.0,1051.0,2692.0,730.0,2727.0,1825.0,2031.0,1566.0,1130.0,1871.0,2166.0,2037.0,890.0,2671.0,1375.0,2117.0,2587.0,1854.0,273.0,1458.0,219.0,1670.0,1197.0,228.0,2540.0,1459.0,2787.0,506.0,2786.0,1749.0,1527.0,651.0,1041.0,1807.0,2400.0,2790.0,2115.0,2707.0,2417.0,2339.0,2551.0,2810.0,192.0,644.0,1176.0,1562.0,2065.0,408.0,266.0,2333.0,2522.0,2722.0,1750.0,94.0,1955.0,1019.0,1253.0,2700.0,2539.0,1430.0,2548.0,2748.0,1417.0,896.0,885.0,245.0,2063.0,2096.0,2092.0,2203.0,796.0,2008.0,1681.0,2741.0,246.0,1654.0,1450.0,1063.0,497.0,1872.0,256.0,2276.0,1880.0,185.0,1335.0,2308.0]
# L_f = [56.0,13.0,607.0,393.0,513.0,617.0,1090.0,869.0,721.0,732.0,533.0,529.0,582.0,825.0,697.0,597.0,21.0,1011.0,870.0,569.0,775.0,649.0,27.0,847.0,47.0,751.0,618.0,940.0,35.0,1024.0,711.0,674.0,314.0,616.0,396.0,760.0,658.0,650.0,886.0,945.0,745.0,595.0,637.0,67.0,788.0,40.0,271.0,833.0,795.0,846.0,659.0,1559.0,2.0,137.0,868.0,160.0,984.0,1891.0,2346.0,475.0,850.0,243.0,920.0,342.0,1091.0,34.0,31.0,1098.0,761.0,241.0,572.0,728.0,588.0,815.0,613.0,910.0,129.0,1831.0,840.0,5.0,568.0,235.0,272.0,918.0,1125.0,1682.0,1080.0,39.0,420.0,778.0,128.0,599.0,626.0,1140.0,1310.0,793.0,591.0,514.0,2176.0,782.0,433.0,2617.0,1348.0,1640.0,1105.0,861.0,33.0,516.0,1199.0,329.0,1331.0,326.0,1141.0,829.0,906.0,510.0,287.0,528.0,377.0,1187.0,1184.0,776.0,1650.0,1742.0,811.0,678.0,534.0,319.0,1008.0,1307.0,1084.0,694.0,1456.0,423.0,1297.0,1212.0,231.0,275.0,1180.0,1089.0,20.0,1685.0,2451.0,355.0,2311.0,1785.0,1468.0,909.0,958.0,956.0,53.0,456.0,29.0,912.0,661.0,944.0,836.0,2450.0,854.0,244.0,540.0,860.0,389.0,852.0,1208.0,862.0,2185.0,23.0,1261.0,893.0,1218.0,855.0,853.0,2479.0,544.0,1194.0,1273.0,1168.0,812.0,467.0,814.0,1305.0,754.0,686.0,405.0,1174.0,641.0,1673.0,605.0,1309.0,2504.0,1592.0,1959.0,1479.0,837.0,2385.0,1232.0,834.0,1832.0,1960.0,38.0,826.0,1075.0,1288.0,179.0,717.0,115.0,614.0,939.0,1455.0,317.0,964.0,1509.0,757.0,1889.0,388.0,781.0,1277.0,1235.0,226.0,677.0,1286.0,627.0,787.0,665.0,1551.0,269.0,1537.0,1262.0,1066.0,779.0,357.0,221.0,689.0,419.0,1265.0,1181.0,1560.0,1372.0,1637.0,1017.0,1643.0,1139.0,972.0,828.0,705.0,1674.0,1049.0,1000.0,1805.0,1244.0,1625.0,1612.0,482.0,198.0,1021.0,1690.0,2390.0,669.0,1898.0,794.0,726.0,1696.0,1151.0,1429.0,1434.0,766.0,1016.0,448.0,1705.0,332.0,212.0,926.0,1317.0,1992.0,520.0,2653.0,774.0,51.0,1182.0,1857.0,827.0,145.0,1129.0,1070.0,663.0,759.0,1364.0,1052.0,1290.0,71.0,1600.0,146.0,1003.0,2769.0,523.0,771.0,532.0,32.0,943.0,41.0,704.0,1915.0,752.0,993.0,1192.0,470.0,353.0,631.0,2330.0,2124.0,859.0,987.0,1001.0,714.0,911.0,1062.0,785.0,675.0,2334.0,2827.0,107.0,2261.0,1668.0,1025.0,2592.0,1641.0,294.0,1115.0,537.0,1167.0,1263.0,712.0,2771.0,2523.0,1101.0,733.0,2120.0,1040.0,1367.0,2500.0,1026.0,962.0,2823.0,1952.0,838.0,247.0,864.0,1314.0,979.0,1702.0,102.0,1693.0,737.0,59.0,1160.0,2582.0,934.0,428.0,1951.0,1748.0,619.0,1243.0,2753.0,1058.0,14.0,1363.0,1158.0,1339.0,1684.0,1910.0,2486.0,865.0,1154.0,3.0,891.0,1379.0,933.0,628.0,1179.0,1193.0,701.0,291.0,2449.0,2620.0,1661.0,2391.0,1213.0,2635.0,1266.0,646.0,950.0,1657.0,903.0,1107.0,1022.0,296.0,2426.0,994.0,949.0,642.0,2673.0,636.0,2154.0,1196.0,8.0,1549.0,2196.0,538.0,2737.0,1386.0,1811.0,738.0,139.0,1205.0,407.0,2814.0,1093.0,1870.0,2661.0,372.0,439.0,2538.0,1984.0,22.0,1405.0,1508.0,875.0,997.0,2483.0,2487.0,1071.0,623.0,999.0,2098.0,176.0,2058.0,624.0,1291.0,959.0,1700.0,1304.0,36.0,1082.0,1069.0,2745.0,1733.0,135.0,904.0,1839.0,600.0,1296.0,1691.0,1333.0,1044.0,863.0,30.0,1595.0,2679.0,1204.0,1775.0,1864.0,601.0,1930.0,1743.0,1023.0,2703.0,977.0,2657.0,1097.0,2696.0,2299.0,2621.0,1415.0,484.0,951.0,873.0,2157.0,70.0,734.0,1302.0,507.0,1820.0,499.0,989.0,2259.0,2226.0,1061.0,2580.0,767.0,1143.0,1739.0,2041.0,1330.0,2556.0,1783.0,1332.0,1223.0,606.0,866.0,2425.0,1893.0,941.0,1148.0,784.0,1627.0,1628.0,1809.0,1701.0,265.0,1156.0,2499.0,755.0,2048.0,1439.0,1787.0,1336.0,2453.0,1987.0,1844.0,1594.0,58.0,1215.0,2733.0,917.0,2570.0,662.0,1119.0,138.0,1457.0,2667.0,1908.0,2642.0,2379.0,1031.0,2381.0,2351.0,2357.0,1838.0,2459.0,1178.0,1006.0,157.0,954.0,1222.0,1287.0,2370.0,1064.0,1907.0,2147.0,442.0,2208.0,2511.0,1094.0,1755.0,1478.0,1247.0,2461.0,1230.0,1885.0,783.0,1202.0,1519.0,1035.0,2297.0,1150.0,1010.0,2271.0,1045.0,2765.0,46.0,2731.0,2189.0,1792.0,338.0,1570.0,2819.0,969.0,1104.0,1013.0,1120.0,1432.0,2007.0,519.0,2198.0,324.0,2711.0,1322.0,1598.0,2149.0,1155.0,2572.0,1634.0,1948.0,4.0,1777.0,1614.0,2676.0,2780.0,1666.0,1688.0,1442.0,2280.0,1975.0,2681.0,2053.0,1642.0,2464.0,1233.0,2200.0,1925.0,325.0,1163.0,1162.0,970.0,335.0,2660.0,1099.0,259.0,2537.0,1698.0,1766.0,1360.0,1689.0,1014.0,756.0,1533.0,2090.0,491.0,2143.0,1545.0,2101.0,1795.0,835.0,2116.0,2137.0,66.0,1656.0,720.0,1146.0,2231.0,279.0,1593.0,2423.0,1472.0,2736.0,1320.0,990.0,1039.0,2294.0,57.0,2659.0,1997.0,1507.0,2613.0,2543.0,2144.0,2462.0,1800.0,2512.0,1200.0,1713.0,2495.0,1837.0,1664.0,2750.0,2735.0,1276.0,328.0,1319.0,1823.0,1300.0,2644.0,2415.0,1159.0,603.0,1271.0,1718.0,6.0,1337.0,923.0,810.0,698.0,2199.0,1567.0,2110.0,390.0,1390.0,2433.0,1919.0,2502.0,1934.0,2406.0,1352.0,1797.0,980.0,1370.0,2411.0,2017.0,742.0,2424.0,539.0,320.0,575.0,110.0,310.0,1420.0,2113.0,1849.0,2626.0,1753.0,522.0,515.0,1611.0,2606.0,2747.0,111.0,1756.0,2287.0,974.0,2210.0,205.0,2354.0,2036.0,208.0,1699.0,1110.0,195.0,948.0,2541.0,2301.0,2361.0,1461.0,573.0,2260.0,2141.0,1966.0,1034.0,2708.0,1754.0,957.0,2488.0,1928.0,1389.0,1219.0,1.0,2640.0,1550.0,1275.0,2156.0,1848.0,2760.0,2712.0,2776.0,688.0,2716.0,2466.0,2095.0,1639.0,1224.0,1279.0,1981.0,1015.0,1774.0,1037.0,1715.0,1020.0,647.0,2558.0,1384.0,387.0,531.0,2517.0,1833.0,2793.0,1767.0,2784.0,1246.0,1298.0,813.0,385.0,79.0,1474.0,1924.0,1957.0,2220.0,1133.0,2326.0,10.0,1048.0,2068.0,2331.0,2305.0,973.0,1918.0,91.0,1217.0,2715.0,2662.0,242.0,1977.0,2460.0,1874.0,460.0,1724.0,181.0,894.0,1157.0,2469.0,323.0,1269.0,2242.0,1241.0,1571.0,2612.0,2777.0,542.0,2778.0,2365.0,2324.0,1635.0,2664.0,968.0,2337.0,2622.0,2109.0,1521.0,1108.0,1846.0,743.0,2020.0,1454.0,2440.0,553.0,1144.0,585.0,2195.0,2646.0,1284.0,2332.0,451.0,611.0,2175.0,2834.0,2680.0,2353.0,1974.0,1991.0,100.0,2222.0,1758.0,2608.0,1665.0,602.0,1532.0,1397.0,2791.0,1124.0,2087.0,2030.0,1859.0,2429.0,182.0,1903.0,1085.0,2795.0,2168.0,2279.0,1669.0,680.0,2547.0,2682.0,579.0,1629.0,1392.0,2016.0,2292.0,322.0,1449.0,2561.0,583.0,2284.0,2300.0,1481.0,264.0,2476.0,1667.0,1884.0,2675.0,609.0,1067.0,1486.0,1404.0,1145.0,1460.0,1646.0,339.0,1467.0,1803.0,1081.0,1555.0,1824.0,2616.0,2710.0,1979.0,457.0,2393.0,610.0,1326.0,2528.0,2809.0,2278.0,2039.0,1892.0,2678.0,2666.0,253.0,2012.0,1728.0,2563.0,1672.0,1588.0,2179.0,1251.0,549.0,1260.0,1954.0,1539.0,117.0,2503.0,2014.0,2807.0,1663.0,2484.0,2557.0,1734.0,1038.0,1002.0,2583.0,2290.0,2077.0,2184.0,2432.0,1899.0,1183.0,2568.0,493.0,2356.0,671.0,1366.0,1842.0,2223.0,2611.0,209.0,817.0,2794.0,1142.0,673.0,2781.0,2428.0,2427.0,133.0,410.0,2281.0,257.0,1259.0,2663.0,1249.0,2482.0,2532.0,2355.0,2652.0,2375.0,2575.0,2595.0,2729.0,1236.0,2224.0,1716.0,49.0,1932.0,2632.0,78.0,511.0,1633.0,2347.0,2152.0,566.0,116.0,1677.0,843.0,163.0,2407.0,1799.0,1810.0,1292.0,1931.0,2709.0,633.0,1616.0,1018.0,1836.0,2237.0,2624.0,1647.0,2140.0,2342.0,1883.0,1416.0,2345.0,1909.0,1482.0,818.0,1835.0,311.0,2812.0,1923.0,1264.0,2828.0,2752.0,2060.0,1678.0,293.0,1411.0,2078.0,1714.0,2452.0,1890.0,543.0,2303.0,1362.0,1171.0,1399.0,2349.0,889.0,681.0,1973.0,190.0,130.0,2151.0,2773.0,239.0,1440.0,2218.0,211.0,2369.0,150.0,1306.0,1030.0,2756.0,736.0,739.0,672.0,2431.0,2138.0,1412.0,1078.0,2420.0,2472.0,2535.0,2217.0,509.0,1112.0,1963.0,2763.0,1941.0,2835.0,2797.0,2438.0,2359.0,871.0,699.0,1878.0,978.0,2531.0,1060.0,1122.0,635.0,1917.0,985.0,849.0,2730.0,524.0,564.0,2319.0,839.0,786.0,1680.0,1538.0,1447.0,802.0,1638.0,1102.0,2270.0,1597.0,1536.0,1445.0,1540.0,105.0,2725.0,2811.0,1927.0,1499.0,2546.0,643.0,1516.0,1782.0,696.0,2506.0,947.0,331.0,1086.0,352.0,1237.0,413.0,1345.0,2348.0,1587.0,2758.0,1221.0,1994.0,892.0,2489.0,2751.0,2042.0,1079.0,2293.0,2496.0,2514.0,1937.0,2507.0,25.0,1132.0,2824.0,792.0,1470.0,2586.0,2316.0,2490.0,1740.0,26.0,2139.0,1759.0,2410.0,223.0,1504.0,2738.0,1806.0,2250.0,574.0,2513.0,1543.0,2187.0,1127.0,824.0,1561.0,620.0,500.0,2061.0,2001.0,2178.0,1548.0,1220.0,2803.0,1727.0,2268.0,96.0,1343.0,670.0,2798.0,1695.0,1116.0,1293.0,908.0,684.0,2216.0,1323.0,1970.0,2637.0,2619.0,986.0,1164.0,2057.0,1995.0,2318.0,2358.0,2112.0,2131.0,1911.0,2114.0,2596.0,15.0,1662.0,313.0,2815.0,2821.0,995.0,2817.0,2766.0,1207.0,364.0,967.0,820.0,2473.0,604.0,1153.0,1615.0,695.0,2832.0,1433.0,2083.0,2416.0,1043.0,1452.0,876.0,961.0,1005.0,2826.0,2082.0,2315.0,1514.0,1423.0,653.0,2398.0,1585.0,2040.0,1746.0,535.0,1976.0,2475.0,1786.0,2376.0,2091.0,1865.0,2241.0,477.0,2623.0,1603.0,1711.0,2724.0,1466.0,1860.0,98.0,2468.0,2553.0,2465.0,1816.0,2508.0,2630.0,1203.0,1568.0,2232.0,2050.0,2800.0,1632.0,2458.0,1761.0,2097.0,2088.0,925.0,2075.0,2658.0,1769.0,288.0,2019.0,2740.0,2779.0,1012.0,1428.0,1175.0,2360.0,2013.0,1546.0,1547.0,1868.0,184.0,1377.0,218.0,1658.0,2104.0,874.0,1505.0,2249.0,52.0,1289.0,1861.0,1818.0,2772.0,556.0,126.0,2746.0,84.0,2071.0,2283.0,2574.0,1965.0,1985.0,2343.0,2073.0,1583.0,1321.0,2002.0,2521.0,2286.0,1448.0,1534.0,2813.0,2254.0,1201.0,881.0,1422.0,2799.0,1564.0,998.0,1535.0,2034.0,2180.0,1679.0,1426.0,2159.0,1794.0,1137.0,2240.0,1731.0,380.0,202.0,2717.0,2163.0,169.0,359.0,1784.0,2629.0,536.0,2321.0,1515.0,2825.0,2761.0,2714.0,965.0,1596.0,2526.0,1520.0,2829.0,2796.0,2412.0,2228.0,1042.0,2182.0,657.0,2201.0,2579.0,2470.0,2308.0,1335.0,185.0,1880.0,2276.0,256.0,1872.0,497.0,1063.0,1450.0,1654.0,246.0,2741.0,1681.0,2008.0,796.0,2203.0,2092.0,2096.0,2063.0,245.0,885.0,896.0,1417.0,2748.0,2548.0,1430.0,2539.0,2700.0,1253.0,1019.0,1955.0,94.0,1750.0,2722.0,2522.0,2333.0,266.0,408.0,2065.0,1562.0,1176.0,644.0,192.0,2810.0,2551.0,2339.0,2417.0,2707.0,2115.0,2790.0,2400.0,1807.0,1041.0,651.0,1527.0,1749.0,2786.0,506.0,2787.0,1459.0,2540.0,228.0,1197.0,1670.0,219.0,1458.0,273.0,1854.0,2587.0,2117.0,1375.0,2671.0,890.0,2037.0,2166.0,1871.0,1130.0,1566.0,2031.0,1825.0,2727.0,730.0,2692.0,1051.0,1943.0,354.0,1781.0,1821.0,2802.0,2205.0,2285.0,913.0,93.0,2505.0,2830.0,1073.0,2820.0,1421.0,2718.0,177.0,1280.0,2325.0,1503.0,2554.0,2069.0,1655.0,2245.0,1072.0,295.0,2610.0,2263.0,2792.0,2181.0,963.0,2806.0,2029.0,45.0,7.0,2150.0,1817.0,2328.0,1752.0,1513.0,2368.0,1607.0,666.0,2364.0,1660.0,452.0,2518.0]

def blurMe():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[1]
    top = -1
    p = 0.15 # p = 0.05
    notice_factor = 2 #determines the maximum number of ratings allowed for obfuscation.
    dataset = ['ML1M', 'ML100k', 'Yahoo'][2]

    if dataset == 'ML1M':

        X = DL.load_user_item_matrix_1m() #MD.load_user_item_matrix_1m_trainingSet() #load_user_item_matrix_1m_trainingSet MD.load_user_item_matrix_1m_all()  # max_user=max_user, max_item=max_item)
        T = DL.load_gender_vector_1m()  # max_user=max_user)
        X_impute = DL.load_user_item_matrix_1m_Impute()
        output_file = "ml-1m/BlurMe/"
        L_m = [589.0, 1233.0, 2706.0, 1090.0, 2959.0, 1250.0, 2427.0, 2490.0, 1208.0, 1266.0, 3654.0, 1748.0, 1262.0, 1396.0, 1374.0, 2700.0, 1265.0, 1089.0, 1222.0, 231.0, 2770.0, 1676.0, 2890.0, 1228.0, 1136.0, 3360.0, 3298.0, 1663.0, 3811.0, 2011.0, 1261.0, 233.0, 3361.0, 2366.0, 1127.0, 1276.0, 3555.0, 1214.0, 3929.0, 299.0, 1304.0, 3468.0, 1095.0, 150.0, 1213.0, 750.0, 3082.0, 6.0, 111.0, 3745.0, 349.0, 541.0, 2791.0, 785.0, 1060.0, 1294.0, 1302.0, 1256.0, 1292.0, 2948.0, 3683.0, 3030.0, 3836.0, 913.0, 2150.0, 32.0, 2826.0, 2721.0, 590.0, 3623.0, 2997.0, 3868.0, 3147.0, 1610.0, 3508.0, 2046.0, 21.0, 1249.0, 10.0, 1283.0, 3760.0, 2712.0, 3617.0, 3552.0, 3256.0, 1079.0, 3053.0, 1517.0, 2662.0, 1953.0, 2670.0, 3578.0, 2371.0, 3334.0, 2502.0, 2278.0, 364.0, 3462.0, 2401.0, 3163.0, 2311.0, 852.0, 2916.0, 1378.0, 3384.0, 524.0, 70.0, 370.0, 3035.0, 3513.0, 2917.0, 3697.0, 24.0, 1957.0, 3494.0, 1912.0, 3752.0, 2013.0, 3452.0, 3928.0, 2987.0, 431.0, 2759.0, 1387.0, 1882.0, 3638.0, 1288.0, 2867.0, 2728.0, 2433.0, 161.0, 3386.0, 517.0, 741.0, 1287.0, 1231.0, 3062.0, 2288.0, 3753.0, 529.0, 3793.0, 3052.0, 2447.0, 1320.0, 3819.0, 1303.0, 922.0, 3022.0, 260.0, 858.0, 493.0, 3006.0, 480.0, 2410.0, 333.0, 1178.0, 3814.0, 2702.0, 1203.0, 2922.0, 1625.0, 3366.0, 3213.0, 2188.0, 2628.0, 3358.0, 2648.0, 3788.0, 953.0, 999.0, 3754.0, 3910.0, 3016.0, 3863.0, 303.0, 3263.0, 1080.0, 786.0, 3764.0, 2105.0, 3543.0, 2607.0, 3681.0, 592.0, 145.0, 2303.0, 1682.0, 1019.0, 3646.0, 1544.0, 235.0, 908.0, 3615.0, 2792.0, 2167.0, 2455.0, 1587.0, 1227.0, 2901.0, 2687.0, 1883.0, 1210.0, 1201.0, 3169.0, 3098.0, 3688.0, 2409.0, 3198.0, 610.0, 1923.0, 1982.0, 165.0, 2403.0, 784.0, 2871.0, 2889.0, 628.0, 2300.0, 417.0, 3671.0, 3100.0, 3914.0, 3608.0, 3152.0, 3429.0, 1794.0, 952.0, 1391.0, 2518.0, 410.0, 3535.0, 2333.0, 1713.0, 2605.0, 707.0, 2795.0, 1965.0, 373.0, 3916.0, 556.0, 3703.0, 95.0, 466.0, 3066.0, 3177.0, 2088.0, 1476.0, 163.0, 3422.0, 58.0, 1244.0, 1689.0, 2002.0, 1711.0, 2259.0, 3524.0, 1371.0, 3104.0, 1693.0, 965.0, 1732.0, 2600.0, 3424.0, 3755.0, 2450.0, 3826.0, 3801.0, 3927.0, 1298.0, 2118.0, 112.0, 2478.0, 471.0, 1673.0, 1246.0, 2734.0, 2529.0, 2806.0, 1948.0, 2093.0, 45.0, 648.0, 3504.0, 2968.0, 1722.0, 1963.0, 2840.0, 1747.0, 1348.0, 3871.0, 3175.0, 2360.0, 1092.0, 3190.0, 1405.0, 367.0, 3248.0, 1702.0, 1734.0, 2644.0, 1597.0, 1401.0, 1416.0, 107.0, 1379.0, 2764.0, 2116.0, 1036.0, 60.0, 2115.0, 1876.0, 1254.0, 2243.0, 2606.0, 3925.0, 3087.0, 1627.0, 3770.0, 3678.0, 3113.0, 3036.0, 3525.0, 1584.0, 2236.0, 3267.0, 954.0, 1205.0, 2470.0, 2686.0, 3397.0, 2015.0, 1377.0, 3740.0, 1594.0, 2456.0, 2038.0, 891.0, 1342.0, 1966.0, 2808.0, 3324.0, 3794.0, 2467.0, 3420.0, 3773.0, 1927.0, 2231.0, 3742.0, 1960.0, 1542.0, 2672.0, 1376.0, 3174.0, 1248.0, 225.0, 1267.0, 3203.0, 1025.0, 2769.0, 1973.0, 2541.0, 3593.0, 2058.0, 3273.0, 154.0, 1179.0, 2009.0, 2423.0, 2676.0, 2793.0, 3505.0, 1920.0, 3357.0, 2580.0, 2542.0, 1701.0, 3252.0, 440.0, 540.0, 1885.0, 2384.0, 1414.0, 1251.0, 1187.0, 2841.0, 2287.0, 2004.0, 1257.0, 1358.0, 2253.0, 3918.0, 2976.0, 1100.0, 2140.0, 2092.0, 2772.0, 3500.0, 1196.0, 3728.0, 555.0, 3564.0, 3099.0, 2863.0, 2492.0, 13.0, 2378.0, 3271.0, 3946.0, 1017.0, 3189.0, 3908.0, 1238.0, 3551.0, 800.0, 1193.0, 3254.0, 3614.0, 448.0, 1779.0, 3477.0, 1388.0, 748.0, 1411.0, 3948.0, 1057.0, 2877.0, 2633.0, 3078.0, 2289.0, 514.0, 3831.0, 535.0, 361.0, 290.0, 1408.0, 1356.0, 2522.0, 2321.0, 1395.0, 1103.0, 2861.0, 1974.0, 2497.0, 1633.0, 2530.0, 1931.0, 125.0, 1735.0, 3159.0, 892.0, 2828.0, 523.0, 3148.0, 296.0, 2882.0, 1639.0, 1665.0, 3834.0, 534.0, 2942.0, 1247.0, 861.0, 2107.0, 3469.0, 1970.0, 3307.0, 432.0, 3879.0, 3930.0, 742.0, 3937.0, 1237.0, 1091.0, 3214.0, 1273.0, 3809.0, 3115.0, 2111.0, 468.0, 3769.0, 2961.0, 3771.0, 246.0, 3094.0, 2907.0, 1016.0, 151.0, 377.0, 450.0, 3538.0, 3717.0, 2694.0, 2745.0, 2389.0, 3865.0, 281.0, 2272.0, 2991.0, 1810.0, 2024.0, 2725.0, 2731.0, 409.0, 2971.0, 1083.0, 2701.0, 1753.0, 1459.0, 2567.0, 673.0, 3516.0, 611.0, 947.0, 1176.0, 1640.0, 172.0, 2671.0, 2041.0, 2723.0, 2471.0, 378.0, 3901.0, 1834.0, 1733.0, 1135.0, 998.0, 2475.0, 292.0, 3347.0, 2121.0, 3952.0, 1219.0, 413.0, 2294.0, 1997.0, 849.0, 2017.0, 2025.0, 3476.0, 1399.0, 2822.0, 2068.0, 180.0, 2076.0, 3700.0, 1783.0, 3326.0, 1760.0, 2437.0, 3893.0, 2594.0, 16.0, 1942.0, 2171.0, 2815.0, 1281.0, 1589.0, 936.0, 3168.0, 2520.0, 3095.0, 3448.0, 1971.0, 1230.0, 3129.0, 3799.0, 3125.0, 3784.0, 3789.0, 3262.0, 1946.0, 2390.0, 1918.0, 3201.0, 3909.0, 2943.0, 2082.0, 3157.0, 2112.0, 3409.0, 1772.0, 1680.0, 3633.0, 2153.0, 720.0, 674.0, 3713.0, 126.0, 585.0, 2353.0, 158.0, 3676.0, 3398.0, 485.0, 765.0, 1284.0, 2089.0, 1148.0, 1147.0, 2183.0, 1037.0, 2393.0, 2250.0, 2524.0, 1617.0, 1457.0, 3135.0, 3142.0, 2935.0, 1461.0, 533.0, 1425.0, 1282.0, 728.0, 3521.0, 1972.0, 1361.0, 551.0, 2016.0, 454.0, 3889.0, 3837.0, 190.0, 2735.0, 2124.0, 2310.0, 23.0, 3548.0, 1466.0, 3743.0, 1124.0, 2033.0, 1590.0, 2138.0, 2716.0, 1649.0, 1189.0, 2135.0, 3243.0, 3359.0, 1339.0, 123.0, 1224.0, 2996.0, 344.0, 1101.0, 515.0, 2428.0, 1873.0, 1392.0, 2583.0, 258.0, 2519.0, 2771.0, 213.0, 451.0, 2906.0, 2313.0, 3253.0, 1343.0, 2941.0, 745.0, 2729.0, 353.0, 1707.0, 2859.0, 2108.0, 1359.0]
        L_f = [920.0, 3844.0, 2369.0, 1088.0, 3534.0, 1207.0, 17.0, 1041.0, 3512.0, 3418.0, 1188.0, 902.0, 2336.0, 3911.0, 1441.0, 141.0, 2690.0, 928.0, 39.0, 2762.0, 906.0, 838.0, 2657.0, 2125.0, 3565.0, 1967.0, 2291.0, 914.0, 932.0, 1620.0, 2160.0, 247.0, 222.0, 261.0, 2881.0, 2145.0, 3072.0, 1028.0, 1956.0, 2080.0, 1286.0, 3798.0, 1959.0, 28.0, 2248.0, 3247.0, 3594.0, 3155.0, 1345.0, 531.0, 1277.0, 593.0, 3044.0, 3083.0, 3005.0, 1380.0, 2020.0, 105.0, 1678.0, 1608.0, 2572.0, 3791.0, 1104.0, 2144.0, 318.0, 1186.0, 1073.0, 595.0, 2724.0, 1641.0, 351.0, 2908.0, 357.0, 3079.0, 1688.0, 3556.0, 3186.0, 2406.0, 224.0, 1962.0, 1480.0, 3251.0, 11.0, 345.0, 3526.0, 1784.0, 951.0, 3668.0, 2485.0, 1958.0, 2739.0, 916.0, 950.0, 2443.0, 3684.0, 904.0, 898.0, 587.0, 552.0, 2143.0, 3481.0, 3097.0, 3067.0, 1449.0, 47.0, 616.0, 3281.0, 1259.0, 661.0, 2348.0, 562.0, 3606.0, 2496.0, 2085.0, 1271.0, 372.0, 2857.0, 3325.0, 1394.0, 1081.0, 1032.0, 918.0, 1409.0, 314.0, 899.0, 733.0, 2245.0, 381.0, 2316.0, 232.0, 2405.0, 2677.0, 1066.0, 2396.0, 2282.0, 1059.0, 2622.0, 1941.0, 959.0, 3479.0, 3124.0, 1197.0, 1777.0, 915.0, 955.0, 1648.0, 3705.0, 3061.0, 34.0, 1285.0, 1.0, 2875.0, 1150.0, 3545.0, 2664.0, 2155.0, 1097.0, 262.0, 3915.0, 971.0, 2186.0, 3702.0, 3105.0, 2280.0, 3604.0, 3515.0, 1513.0, 2331.0, 1500.0, 2803.0, 945.0, 2639.0, 3051.0, 837.0, 3408.0, 457.0, 1801.0, 2506.0, 4.0, 2469.0, 270.0, 46.0, 1235.0, 2355.0, 2346.0, 1357.0, 461.0, 3255.0, 3176.0, 3350.0, 2975.0, 2014.0, 3936.0, 2072.0, 1353.0, 2006.0, 1397.0, 2612.0, 1099.0, 1367.0, 3270.0, 938.0, 2357.0, 94.0, 412.0, 1518.0, 3591.0, 538.0, 2000.0, 2846.0, 708.0, 329.0, 2995.0, 653.0, 1280.0, 5.0, 337.0, 1022.0, 2468.0, 1569.0, 905.0, 1031.0, 900.0, 1541.0, 2926.0, 3730.0, 1900.0, 2718.0, 1021.0, 3185.0, 2746.0, 327.0, 2805.0, 3101.0, 2920.0, 3269.0, 1674.0, 477.0, 3686.0, 2077.0, 2801.0, 581.0, 2133.0, 3724.0, 3296.0, 3554.0, 3478.0, 1479.0, 3720.0, 491.0, 1014.0, 1236.0, 3134.0, 695.0, 2763.0, 1013.0, 1096.0, 1856.0, 2827.0, 248.0, 1875.0, 3211.0, 3672.0, 215.0, 3224.0, 3396.0, 469.0, 1897.0, 3528.0, 2870.0, 917.0, 930.0, 1654.0, 3328.0, 3786.0, 907.0, 3870.0, 1422.0, 2206.0, 2114.0, 2324.0, 2575.0, 919.0, 3467.0, 1047.0, 1806.0, 350.0, 230.0, 2505.0, 48.0, 182.0, 144.0, 170.0, 2141.0, 1916.0, 3081.0, 1191.0, 1086.0, 2598.0, 546.0, 1407.0, 153.0, 2635.0, 2057.0, 2037.0, 1327.0, 3145.0, 446.0, 2193.0, 1337.0, 1913.0, 195.0, 2132.0, 1804.0, 3562.0, 3706.0, 1172.0, 1042.0, 2946.0, 2514.0, 1093.0, 1616.0, 3011.0, 2151.0, 1111.0, 613.0, 1043.0, 2774.0, 2154.0, 2621.0, 52.0, 3060.0, 3723.0, 206.0, 3133.0, 1821.0, 1964.0, 211.0, 2454.0, 532.0, 218.0, 3156.0, 1586.0, 1126.0, 2096.0, 927.0, 2007.0, 778.0, 2097.0, 3117.0, 691.0, 3567.0, 1223.0, 1268.0, 1300.0, 2747.0, 1573.0, 3302.0, 671.0, 3471.0, 3825.0, 1064.0, 1299.0, 252.0, 3004.0, 2091.0, 2337.0, 61.0, 1020.0, 3763.0, 1727.0, 74.0, 3599.0, 3708.0, 465.0, 29.0, 3741.0, 3457.0, 2399.0, 781.0, 69.0, 3635.0, 3808.0, 3249.0, 2732.0, 1621.0, 1686.0, 3435.0, 3857.0, 3299.0, 3426.0, 176.0, 343.0, 2972.0, 2853.0, 272.0, 2788.0, 1393.0, 203.0, 1465.0, 801.0, 1917.0, 2431.0, 3714.0, 2967.0, 3553.0, 79.0, 3951.0, 1683.0, 3071.0, 3102.0, 302.0, 3655.0, 2261.0, 3877.0, 2266.0, 3716.0, 3699.0, 1769.0, 266.0, 1173.0, 2693.0, 3093.0, 1658.0, 277.0, 279.0, 848.0, 839.0, 2365.0, 2738.0, 1264.0, 271.0, 1269.0, 2043.0, 3855.0, 1030.0, 1346.0, 2052.0, 2142.0, 2719.0, 2574.0, 2053.0, 1410.0, 3912.0, 1381.0, 3660.0, 2446.0, 2613.0, 2314.0, 978.0, 348.0, 2168.0, 3466.0, 669.0, 3649.0, 2448.0, 2899.0, 1611.0, 2940.0, 8.0, 1463.0, 26.0, 3557.0, 1994.0, 1758.0, 414.0, 1027.0, 3088.0, 3391.0, 1936.0, 2205.0, 3861.0, 332.0, 3450.0, 2585.0, 3618.0, 425.0, 1605.0, 3827.0, 846.0, 2267.0, 2359.0, 2952.0, 2786.0, 3923.0, 1290.0, 3240.0, 3388.0, 1547.0, 338.0, 3712.0, 3063.0, 242.0, 715.0, 3679.0, 3571.0, 668.0, 1069.0, 2276.0, 1438.0, 2688.0, 2900.0, 168.0, 3539.0, 199.0, 3675.0, 2436.0, 647.0, 724.0, 82.0, 542.0, 1362.0, 117.0, 2109.0, 3246.0, 3019.0, 1904.0, 360.0, 2966.0, 482.0, 2741.0, 334.0, 2100.0, 2173.0, 1615.0, 358.0, 280.0, 3932.0, 369.0, 3547.0, 3739.0, 1788.0, 875.0, 2106.0, 3719.0, 3839.0, 1417.0, 3566.0, 3795.0, 670.0, 520.0, 208.0, 3449.0, 3274.0, 27.0, 3872.0, 2969.0, 2927.0, 2442.0, 113.0, 2084.0, 1848.0, 3882.0, 3790.0, 3926.0, 2820.0, 3922.0, 3046.0, 832.0, 3896.0, 2101.0, 1600.0, 2548.0, 2453.0, 386.0, 239.0, 1015.0, 85.0, 3077.0, 3264.0, 3340.0, 3114.0, 1729.0, 2498.0, 309.0, 1034.0, 2421.0, 3438.0, 2599.0, 405.0, 3461.0, 3813.0, 3238.0, 3399.0, 3921.0, 912.0, 1840.0, 2876.0, 319.0, 40.0, 257.0, 3287.0, 880.0, 754.0, 1874.0, 2241.0, 2553.0, 1699.0, 550.0, 1549.0, 2338.0, 1922.0, 3612.0, 1894.0, 1049.0, 1185.0, 2779.0, 3902.0, 3580.0, 2.0, 2435.0, 73.0, 1012.0, 1275.0, 783.0, 512.0, 1919.0, 3838.0, 2903.0, 507.0, 1896.0, 2263.0, 2320.0, 1515.0, 363.0, 3492.0, 1562.0, 1588.0, 408.0, 3405.0, 307.0, 1199.0, 3268.0, 186.0, 1961.0, 1428.0, 2540.0, 3284.0, 2062.0, 3624.0, 1169.0, 2513.0, 575.0, 380.0, 2696.0, 2070.0, 2130.0, 3897.0, 615.0, 50.0, 3852.0, 415.0, 1797.0, 1660.0, 506.0, 3704.0, 2816.0, 2678.0, 2122.0, 1836.0, 2126.0, 481.0, 87.0, 3577.0, 2990.0, 3200.0, 441.0, 1554.0, 346.0, 1653.0, 2202.0, 2616.0, 283.0, 3584.0, 2417.0, 2284.0, 2042.0, 3454.0, 1582.0, 2568.0, 1669.0, 2048.0, 3613.0, 1911.0, 949.0, 420.0, 1719.0, 2361.0, 41.0, 3949.0, 379.0, 2379.0, 3447.0, 2136.0, 2642.0, 3206.0, 1995.0, 3150.0, 2856.0, 2010.0, 2532.0, 382.0, 2398.0, 1798.0, 1242.0, 2414.0, 2550.0, 1084.0, 131.0, 3055.0, 2630.0, 1949.0, 1954.0, 2352.0, 2110.0, 3181.0, 2021.0, 1344.0, 3685.0, 1398.0, 1312.0, 910.0, 3738.0, 173.0, 1456.0, 3445.0, 986.0, 2848.0, 2722.0, 3696.0, 3864.0, 3707.0, 1171.0, 558.0, 356.0, 2717.0, 3204.0, 2561.0, 934.0, 2704.0, 371.0, 1831.0, 879.0, 2439.0, 3108.0, 2517.0, 1372.0, 1672.0, 807.0, 3616.0, 688.0, 2797.0, 519.0, 1211.0, 1730.0, 1446.0, 1546.0, 2445.0, 2147.0, 3475.0, 1556.0, 1580.0, 1220.0, 2373.0, 501.0, 124.0, 1216.0, 1429.0, 2683.0, 2066.0, 1881.0, 2949.0, 3090.0, 802.0, 1870.0, 407.0, 586.0, 1944.0, 2989.0, 1921.0, 1226.0, 2380.0, 3489.0, 3886.0, 2190.0, 2919.0, 2495.0, 2392.0, 753.0, 1484.0, 1667.0, 2363.0, 3308.0, 1077.0, 1805.0, 2714.0, 3173.0, 216.0, 1694.0, 736.0, 1321.0, 1483.0, 608.0, 1485.0, 1347.0, 2789.0, 25.0, 2699.0, 1792.0, 2065.0, 2709.0, 2860.0, 1845.0, 2752.0, 494.0, 2273.0, 62.0, 2710.0, 866.0, 3841.0, 1566.0, 3153.0, 973.0, 3600.0, 1240.0, 1270.0, 923.0, 2159.0, 896.0, 3258.0, 147.0, 3439.0, 2947.0, 2643.0, 1212.0, 1258.0, 2527.0, 1419.0, 1217.0, 316.0, 1293.0, 2420.0, 3130.0, 2474.0, 2879.0, 991.0, 3317.0, 2713.0, 3440.0, 2463.0, 1619.0, 2539.0, 3070.0, 3040.0, 2163.0, 508.0, 428.0, 1816.0, 2533.0, 2736.0, 1969.0, 3054.0, 2176.0, 288.0, 2794.0, 2239.0, 2290.0, 1234.0, 3735.0, 2166.0, 19.0, 2071.0, 2394.0, 2858.0]

    elif dataset == 'ML100k':
        X = DL.load_user_item_matrix_100k()
        T = DL.load_gender_vector_100k()
        X_impute = DL.load_user_item_matrix_100k_Impute()  # --- while use predicted rating to set rating on the selected data
        output_file = "ml-100k/BlurMe/"  # "ml1m/BlurMe/DoubleCount_BlurMe/" #"ml-1m/BlurMe/"
        L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 303, 264, 339, 1010, 276, 218, 995, 240, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 322, 462, 265, 750, 23, 281, 137, 333, 736, 164, 358, 301, 479, 647, 168, 144, 94, 687, 60, 70, 175, 6, 354, 344, 1115, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 235, 258, 330, 56, 347, 52, 205, 371, 1024, 8, 369, 116, 79, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 620, 355, 181, 717, 936, 500, 893, 489, 1316, 855, 2, 180, 871, 755, 523, 477, 227, 412, 183, 657, 510, 77, 474, 1105, 67, 705, 362, 1133, 511, 546, 768, 96, 457, 108, 1137, 352, 341, 825, 165, 584, 505, 908, 404, 679, 15, 513, 117, 490, 665, 28, 338, 59, 32, 1014, 989, 351, 475, 57, 864, 969, 177, 316, 463, 134, 703, 306, 378, 105, 99, 229, 484, 651, 157, 232, 114, 161, 395, 754, 931, 591, 408, 685, 97, 554, 468, 455, 640, 473, 683, 300, 31, 1060, 650, 72, 191, 259, 1280, 199, 826, 747, 68, 1079, 887, 578, 329, 274, 174, 428, 905, 780, 753, 396, 4, 277, 71, 519, 1062, 189, 325, 502, 233, 1022, 880, 1063, 197, 813, 16, 331, 208, 162, 11, 963, 501, 820, 930, 896, 318, 1142, 1194, 425, 171, 282, 496, 26, 215, 573, 527, 730, 49, 693, 517, 336, 417, 207, 900, 299, 226, 606, 268, 192, 407, 62, 636, 480, 1016, 241, 945, 343, 603, 231, 469, 515, 492, 664, 972, 642, 781, 984, 187, 149, 257, 40, 141, 978, 44, 845, 85, 244, 512, 182, 1021, 756, 1, 778, 644, 1050, 185, 530, 81, 497, 3, 335, 923, 509, 418, 724, 566, 221, 570, 655, 413, 1311, 340, 583, 537, 635, 686, 176, 296, 926, 561, 101, 173, 862, 680, 652]
        L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 405, 950, 891, 611, 582, 66, 1035, 346, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 1620, 890, 1176, 1017, 237, 1294, 245, 508, 387, 53, 514, 422, 1068, 1527, 939, 1232, 1011, 631, 381, 956, 875, 459, 607, 1442, 155, 697, 1066, 1285, 293, 88, 1221, 1109, 675, 254, 209, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 286, 559, 1085, 892, 102, 211, 285, 1383, 758, 1234, 674, 1163, 283, 637, 735, 885, 630, 709, 938, 38, 142, 219, 953, 275, 1059, 676, 210, 47, 63, 255, 494, 744, 250, 1114, 672, 308, 632, 17, 1203, 762, 1522, 538, 491, 307, 669, 775, 1135, 217, 841, 949, 766, 966, 314, 812, 821, 574, 1039, 1388, 51, 579, 252, 50, 1009, 1040, 1147, 224, 212, 1483, 1278, 122, 934, 702, 443, 86, 1444, 69, 400, 975, 35, 549, 928, 531, 622, 614, 1020, 658, 740, 1468, 22, 1007, 470, 1269, 633, 1074, 1299, 1095, 1148, 280, 1136, 92, 167, 434, 284, 961, 1084, 126, 619, 974, 196, 485, 1152, 673, 627, 345, 29, 605, 929, 952, 714, 1053, 526, 123, 476, 660, 955, 380, 1503, 163, 493, 1197, 431, 504, 886, 1037, 13, 794, 273, 844, 1032, 1025, 106, 91, 533, 421, 699, 869, 78, 1243, 481, 661, 82, 732]

    elif dataset == 'Yahoo':
        X = DL.load_user_item_matrix_yahoo()
        T = DL.load_gender_vector_yahoo()
        # X_impute = DL.load_user_item_matrix_100k_Complet()  # --- while use predicted rating to set rating on the selected data
        output_file = "ml-yahoo/BlurMe/"
        # -- before 10 filter
        # L_m = [8901, 797, 8045, 8883, 272, 6292, 7715, 8611, 8409, 9107, 5097, 9189, 8256, 5217, 533, 9093, 8900, 2595, 6456, 3043, 9201, 5761, 2561, 4638, 5945, 4418, 8943, 9, 7084, 6613, 8610, 4143, 2605, 65, 9105, 7486, 8431, 2043, 5541, 538, 467, 334, 28, 8416, 8119, 6268, 8885, 1668, 1696, 8960, 46, 7534, 220, 8666, 8744, 1330, 8226, 8225, 9181, 2469, 6679, 8000, 1407, 9149, 8762, 3368, 3725, 557, 6994, 5506, 225, 1153, 2894, 465, 2827, 239, 8395, 8643, 7482, 83, 9015, 3365, 5191, 194, 8955, 5012, 6250, 8437, 6032, 8878, 9013, 8124, 8084, 9047, 166, 290, 8723, 8732, 9217, 7606, 8158, 8862, 909, 8495, 8945, 4861, 8908, 4424, 8990, 4699, 2219, 8981, 9219, 6014, 3300, 1396, 309, 7573, 1031, 8917, 7395, 3577, 252, 8430, 226, 5934, 255, 5915, 8235, 9073, 2254, 6167, 5594, 474, 1431, 3418, 4573, 2981, 532, 8974, 8929, 8932, 8357, 6095, 9116, 181, 9070, 3810, 8286, 9122, 8323, 5653, 2989, 9114, 7187, 8797, 4410, 5796, 8159, 573, 8508, 3951, 7562, 2750, 8660, 6311, 8763, 8756, 257, 8596, 8501, 117, 8703, 8910, 8916, 8418, 8551, 9029, 9102, 8255, 5003, 8258, 8840, 6842, 720, 8871, 8757, 3584, 9195, 8706, 289, 6412, 9020, 155, 9007, 632, 229, 8855, 8690, 8854, 8511, 7446, 8361, 9098, 14, 1528, 6411, 5076, 509, 8424, 8948, 1006, 9061, 434, 5531, 8681, 8630, 5581, 7513, 8525, 9131, 6585, 8832]
        # L_f = [5925, 4959, 8305, 8607, 9276, 5791, 730, 1155, 34, 1743, 688, 794, 460, 6435, 8891, 3708, 286, 6086, 6545, 9171, 5888, 8360, 5463, 5847, 4526, 8593, 428, 7932, 8324, 118, 7465, 6717, 5762, 8700, 6006, 6224, 8920, 7505, 148, 5312, 6218, 9264, 7528, 356, 4041, 6042, 8742, 5378, 5310, 38, 7011, 2568, 8249, 3250, 8487, 8421, 132, 985, 4529, 8548, 2641, 8276, 372, 1221, 2196, 4271, 4012, 6530, 8912, 4288, 2020, 8770, 5136, 3140, 8875, 9193, 8269, 5188, 6335, 8721, 441, 39, 7495, 3867, 8936, 475, 2147, 8457, 6697, 6886, 381, 303, 9242, 9150, 4789, 5944, 574, 195, 8413, 8641, 4840, 8799, 7661, 9262, 2135, 3193, 8613, 1883, 9083, 8215, 6460, 8838, 8009, 6366, 8433, 6387, 8826, 8261, 5032, 8950, 6876, 8526, 377, 982, 8569, 8459, 6629, 4070, 7158, 7541, 4057, 7307, 1957, 8521, 9241, 8765, 603, 669, 1356, 8396, 440, 2292, 8499, 6851, 7487, 8902, 7287, 8591, 4900, 5246, 3229, 6691, 153, 2090, 3594, 9194, 2898, 9101, 4568, 9278, 4121, 63, 5277, 5151, 8999, 2377, 562, 3094, 337, 5083, 5243, 2180, 1095, 7475, 4952, 7257, 4955, 8926, 8998, 7314, 2366, 4685, 292, 5621, 7462, 8709, 4777, 8230, 5892, 7504, 10, 8128, 48, 6318, 375, 558, 5145, 6231, 2091, 6845, 5395, 8980, 7525, 281, 8743, 6378, 5572, 3180, 6856, 8652, 6089, 9257, 90, 6206, 4925, 7317, 7202, 89, 122, 6685, 4528, 2158, 2148, 399, 6280, 5193, 8390, 8113, 2468, 8240, 5929, 5678, 8123, 7744, 6563, 7833, 8203, 1387, 3175, 8043, 107, 8172, 5992, 8185, 3024, 5755, 5077, 682, 319, 8778, 8720, 1008, 5239, 8784, 8129, 925, 6409, 8730, 3548, 638, 6091, 157, 6642, 9065, 9231, 8886, 4664, 7570, 8545, 2059, 8248, 55, 1097, 5622, 5025, 6956, 7754, 6076, 8921, 7571, 7176, 8673, 5941, 8868, 3510, 172, 7242, 7514, 3704, 424, 8654, 8292, 5027, 4292, 5221, 104, 7692, 9173, 4790, 4496, 420, 123, 590, 421, 7409, 5985, 360, 4658, 6012, 282, 8233, 1632, 8483, 99, 376, 9103, 8497, 1741, 4290, 8699, 7069, 1273, 9057, 7508, 8506, 444, 5346, 4380, 3915, 7743, 9088, 6773, 8278, 3521, 1776, 8303, 317, 1161, 167, 8619, 5008, 4787, 8846, 8524, 7602, 9039, 5218, 211, 401, 6947, 5499, 8187, 2994, 1720, 651, 5002, 652, 6098, 8841, 5612, 616, 9012, 1921, 2567, 4261, 8978, 853, 5716, 8144, 7564, 1277, 217, 442, 8463, 8402, 7610, 6855, 8512, 4577, 5667, 8485, 7285, 5285, 4246, 5642, 5069, 641, 223, 2557, 8460, 5876, 673, 5419, 57, 4066, 3847, 1499, 9054, 1299, 6297, 1895, 3839, 7538, 7605, 8436, 7962, 9221, 6023, 4433, 6751, 7489, 7376, 9028, 3817, 9044, 9008, 5842, 6276, 8565, 4129, 6261, 45, 8858, 7396, 3522, 221, 4443, 4559, 74, 8490, 8701, 531, 70, 6974, 140, 8147, 6230, 1361, 339, 9220, 2247, 7037, 8484, 171, 7625, 7340, 8992, 631, 1074, 9236, 1924, 8207, 6689, 244, 6253, 866, 3011, 7331, 8004, 2136, 8575, 6421, 9206, 8042, 3643, 4454, 5238, 5449, 2477, 7502, 9072, 324, 6741, 8379, 3332, 646, 7552, 3815, 5000, 169, 8040, 3988, 5379, 8717, 6018, 5896, 307, 8181, 5672, 7993, 1440, 8800, 6758, 6623, 8899, 599, 8115, 69, 1577, 6375, 2739, 8094, 7834, 9096, 1650, 1703, 8617, 2046, 8638, 2535, 2582, 7472, 3082, 106, 6198, 3364, 407, 743, 9108, 8218, 783, 1459, 5793, 2946, 840, 8513, 6316, 8245, 6040, 6265, 227, 9177, 8434, 1725, 5513, 8515, 7512, 4460, 7908, 5956, 6465, 3694, 8572, 7393, 2155, 88, 593, 2004, 7350, 425, 4486, 367, 7522, 667, 3873, 96, 9037, 9066, 275, 611, 1848, 5684, 4732, 8843, 9090, 7442, 6, 8830, 3790, 9180, 5867, 5841, 589, 8, 3526, 16, 3895, 7618, 9034, 6399, 8453, 3632, 5792, 9172, 4223, 855, 760, 6963, 8663, 6022, 489, 9155, 1836, 178, 213, 1349, 2293, 4106, 6514, 3590, 8528, 8514, 5773, 5710, 3449, 9009, 8657, 2141, 318, 6913, 7886, 3543, 1156, 2704, 3753, 2003, 8494, 5249, 7738, 1769, 3778, 547, 7581, 5342, 288, 4437, 4867, 5579, 8599, 7392, 1512, 8889, 405, 2548, 7991, 6447, 2604, 8141, 485, 8725, 3409, 2470, 1588, 1963, 9255, 1995, 5281, 8380, 5197, 8595, 6127, 9113, 4587, 6034, 5598, 7637, 8736, 8895, 8241, 1987, 7422, 9129, 8171, 6030, 1544, 218, 1470, 8083, 5364, 8786, 1718, 2664, 2706, 54, 7186, 702, 5790, 587, 8859, 7659, 5685, 1721, 2461, 343, 8304, 4367, 8905, 8718, 894, 4499, 4408, 8406, 8696, 4651, 4556, 8959, 1320, 2692, 6443, 8216, 791, 2895, 8710, 2835, 488, 4779, 2885, 3954, 9270, 9226, 8183, 7116, 8924, 6705, 4022, 8915, 390, 9174, 8342, 6248, 627, 4111, 662, 159, 8964, 3206, 6233, 6470, 7940, 7941, 7942, 8110, 6083, 438, 5781, 1601, 8165, 6363, 7769, 8308, 2748, 6659, 8970, 3997, 8326, 1377, 7444, 1497, 5637, 8397, 248, 5570, 9185, 6775, 8819, 8726, 8412, 8888, 8761, 9244, 6490, 6459, 8337, 8553, 8135, 8283, 274, 8870, 5933, 6423, 146, 191, 2775, 53, 2216, 5906, 8930, 8238, 2026, 8881, 3334, 3760, 3085, 6660, 7468, 580, 9099, 1711, 8209, 717, 429, 2288, 6350, 1600, 3792, 7362, 5525, 653, 7360, 8740, 3223, 8227, 5144, 8192, 8755, 606, 8894, 2152, 202, 8166, 5727, 7042, 7184, 8890, 7579, 2246, 6390, 8452, 114, 626, 2874, 7695, 8752, 6106, 1303, 9268, 206, 820, 6621, 7944, 2784, 5410, 1219, 2603, 2188, 4241, 893, 2866, 7343, 8559, 8105, 8510, 8647, 7458, 2973, 21, 6305, 8150, 8538, 6291, 8597, 8813, 4775, 5815, 4216, 2467, 8649, 8092, 5799, 3869, 6437, 9077, 8754, 8386, 9106, 3943, 6506, 8370, 41, 6977, 8880, 6489, 8903, 2370, 18, 4650, 5028, 5957, 8574, 326, 357, 8837, 4293, 245, 8768, 8698, 490, 5706, 6078, 5105, 5977, 8716, 9188, 8664, 8231, 8758, 770, 1986, 4492, 1943, 8956, 8898, 7494, 4090, 165, 4800, 5423, 4153, 8601, 3874, 570, 8904, 8537, 5347, 542, 4444, 8735, 6211, 5226, 5102, 7311, 8480, 143, 8427, 5567, 6324, 8003, 7421, 8766, 9055, 3858, 3568, 3921, 4109, 7687, 8465, 566, 8648, 8155, 179, 3718, 1139, 7473, 7004, 9256, 9144, 8655, 7484, 8745, 9021, 8520, 9063, 8169, 2041, 139, 329, 6207, 6810, 8458, 8339, 4487, 7648, 8750, 4601, 4829, 8661, 8987, 8845, 8579, 7469, 111, 8529, 8466, 6226, 8989, 161, 1190, 125, 2740, 2569, 4517, 2667, 6227, 5038, 9228, 6100, 8106, 9086, 6503, 8872, 633, 142, 8715, 4554, 261, 7006, 3341, 2503, 8469, 3284, 5331, 7977, 622, 6784, 8422, 5751, 186, 300, 648, 5068, 8096, 6341, 415, 1123, 8914, 5199, 7201, 2809, 6126, 5138, 7599, 8897, 619, 8925, 7628, 5004, 4746, 7563, 4663, 5728, 5065, 3050, 8702, 7420, 9125, 8944, 97, 4351, 565, 6193, 8157, 604, 449, 8232, 8535, 6264, 52, 8764, 6695, 9067, 8184, 8850, 507, 8624, 5588, 535, 8976, 5937, 4843, 8640, 414, 5527, 7989, 464, 4174, 991, 3138, 6092, 452, 7232, 9153]

        # updated list with 10 ratings as filter
        # L_m = [8170, 5082, 9140, 189, 9047, 8854, 8684, 4406, 4038, 188, 8385, 2037, 9059, 763, 6431, 7300, 4844, 8191, 9158, 662, 7571, 5202, 719, 9184, 4131, 9057, 3360, 9206, 4750, 4821, 8464, 7507, 334, 8598, 5009, 9132, 8343, 5717, 6268, 537, 8386, 8621, 8658, 1085, 6784, 8969, 532, 721, 225, 8914, 6884, 5176, 8695, 7552, 2213, 8212, 8565, 2651, 194, 8897, 2596, 7499, 290, 2462, 8094, 9168, 8594, 2450, 6072, 8928, 8075, 8182, 3365, 252, 8250, 65, 226, 5923, 28, 8909, 6356, 8341, 3035, 272, 2742, 2973, 2886, 8881, 6009, 309, 7451, 6367, 5741, 8899, 6287, 8080, 1177, 9027, 8114, 1427, 9001, 6966, 7055, 8871, 181, 8322, 9003, 8350, 3410, 5002, 8001, 8316, 5779, 473, 8712, 6929, 8678, 596, 8214, 556, 8279, 9074, 54, 8816, 3292, 8040, 4412, 8379, 3381, 9068, 2819, 8886, 2981, 2248, 5132, 4684, 4988, 7538, 8392, 8883, 8645, 8211, 8551, 8463, 9024, 9066, 4398, 4347, 5576, 83, 8974, 8312, 7403, 5563, 8870, 8983, 1326, 8661, 14, 9056, 795, 4776, 9083, 6587, 8795, 8864, 1664, 8115, 5489, 145, 8456, 8935, 166, 7156, 483, 8825, 117, 5893, 531, 6144, 8944, 8466, 9146, 8862, 8576, 229, 7322, 9052, 8752, 1242, 907, 6388, 2873, 289, 7411, 8615, 2824, 8893, 572, 6387, 8787, 2972, 7527, 5991, 8809, 8705, 6814, 8506, 1582, 9015, 8961, 2200, 7586, 4559, 5205, 5807, 5037, 5644, 585, 8977, 9045]
        # L_f = [5903, 8261, 9227, 729, 792, 8500, 1151, 1739, 4003, 4944, 687, 5771, 459, 7430, 8315, 9122, 286, 6063, 6519, 5827, 5866, 5446, 4513, 7470, 8845, 8874, 6411, 8655, 34, 8562, 3700, 5742, 427, 2560, 7892, 5297, 2399, 148, 6983, 7493, 5295, 6200, 6019, 1217, 5362, 6194, 372, 8205, 132, 9215, 3859, 6691, 8280, 2015, 474, 3132, 4032, 4276, 8503, 8697, 6311, 982, 9037, 8442, 8866, 4259, 4516, 573, 8829, 3242, 7506, 38, 6504, 7460, 8225, 9144, 3784, 8232, 356, 8890, 5121, 6671, 439, 5173, 8596, 7626, 2633, 8676, 5983, 377, 9102, 8376, 5870, 9193, 195, 2190, 381, 303, 6603, 8412, 4774, 8698, 39, 5922, 8388, 8725, 8546, 2129, 8720, 8368, 9213, 8793, 8524, 440, 8351, 8414, 8568, 6823, 8904, 5136, 6858, 5969, 7128, 1879, 5017, 8856, 8481, 7272, 8454, 7440, 6435, 281, 4060, 8754, 9145, 4825, 9192, 4940, 9229, 2371, 6354, 8171, 8476, 602, 4047, 8675, 2084, 2141, 668, 3086, 7252, 6848, 4109, 5262, 1953, 2890, 8781, 63, 6817, 7469, 8739, 337, 5130, 8934, 8982, 7279, 1091, 5379, 1352, 4554, 8952, 8186, 7222, 4885, 6294, 8248, 7797, 2360, 979, 2286, 5231, 6207, 8880, 153, 2085, 4762, 8079, 2053, 2174, 6659, 122, 360, 8217, 3221, 561, 6066, 3172, 90, 292, 5554, 7282, 5062, 8084, 48, 89, 6928, 375, 9208, 8840, 7356, 6683, 10, 615, 107, 8069, 6828, 8664, 7708, 5907, 6256, 4670, 2142, 8461, 7490, 8141, 8389, 5010, 2152, 6385, 4937, 6182, 157, 1093, 5594, 7718, 273, 1269, 8196, 5604, 8607, 1359, 8628, 681, 1383, 5068, 8357, 8680, 9182, 367, 7171, 6075, 419, 399, 3586, 8345, 8159, 8733, 3167, 637, 167, 1041, 7427, 7452, 8822, 7374, 2461, 6616, 922, 4515, 2029, 8574, 55, 7467, 5735, 9042, 4910, 319, 6537, 7535, 6068, 1628, 7473, 8796, 9124, 6241, 5224, 7529, 7146, 5331, 123, 8189, 4649, 5482, 4775, 3016, 8953, 4483, 7656, 8875, 288, 8259, 420, 1815, 1004, 5012, 640, 5963, 8452, 99, 2086, 5178, 8128, 8609, 8234, 8932, 6053, 651, 5660, 650, 7207, 8204, 2559, 8966, 5624, 423, 282, 217, 645, 8438, 4368, 3185, 3696, 104, 6011, 4772, 5603, 5206, 5654, 317, 1157, 6746, 401, 5989, 1716, 223, 7009, 589, 7040, 6339, 4563, 5649, 6597, 8467, 8654, 9172, 45, 5054, 4643, 9011, 8812, 6806, 5203, 7517, 864, 4987, 3906, 5223, 8801, 9157, 8440, 5403, 2986, 172, 7305, 5270, 8520, 5698, 3809, 8993, 851, 3831, 8415, 9171, 57, 4280, 339, 891, 5775, 140, 4278, 8998, 9008, 1357, 557, 592, 6946, 4930, 6724, 6273, 8672, 4421, 4234, 7454, 8418, 1295, 4430, 4985, 6440, 7503, 5854, 6206, 1540, 1573, 9187, 4249, 244, 8946, 213, 9026, 8439, 5822, 4056, 1917, 4117, 8470, 2130, 530, 7341, 211, 6237, 8656, 9050, 630, 7575, 7477, 74, 8103, 3839, 7296, 1699, 2549, 221, 7918, 8071, 7998, 8468, 376, 171, 1508, 2241, 4447, 407, 131, 5874, 3323, 7847, 8137, 892, 1495, 7479, 8755, 5995, 8962, 3807, 6252, 546, 7567, 8174, 7949, 588, 5363, 6000, 318, 1920, 6663, 8479, 4545, 7250, 1721, 9060, 5377, 4441, 484, 1646, 4085, 3979, 1455, 3514, 3745, 6351, 1150, 7407, 1436, 8445, 838, 3356, 4473, 5845, 5327, 1118, 1999, 7315, 4573, 7357, 169, 8853, 2149, 3865, 7546, 2574, 8572, 88, 424, 8685, 9020, 8391, 1108, 1273, 610, 3518, 7956, 5496, 8335, 3782, 187, 7437, 7798, 6397, 5773, 9131, 586, 2470, 8527, 8469, 5433, 2540, 7868, 598, 3686, 2527, 5974, 96, 2595, 5580, 3074, 6731, 1891, 8798, 8366, 8988, 8143, 1737, 6174, 275, 8201, 451, 3535, 9044, 5934, 16, 4993, 8091, 758, 4211, 4717, 8913, 405, 8224, 8963, 8483, 7497, 1844, 69, 178, 7590, 7947, 8530, 2731, 3582, 106, 1584, 8665, 5692, 70, 8408, 441, 6375, 307, 5999, 661, 1070, 1345, 2287, 4094, 6489, 2696, 8449, 1152, 8039, 4540, 5666, 3003, 6305, 8618, 7487, 1832, 7358, 4486, 6827, 4425, 4852, 8785, 1199, 7583, 9214, 9177, 6017, 1466, 8849, 8, 6, 8843, 2932, 8741, 8612, 4229, 3624, 7999, 4013, 5561, 218, 2887, 8554, 5348, 8859, 6224, 6885, 5266, 644, 8991, 7602, 8066, 9128, 390, 8550, 343, 5941, 3887, 6104, 1021, 8242, 3441, 1493, 114, 5667, 5234, 1998, 626, 8593, 8097, 646, 7155, 9219, 9081, 8884, 6633, 8918, 3945, 7387, 7433, 8139, 6229, 6007, 6748, 8774, 428, 139, 53, 701, 5770, 8465, 8707, 6434, 4396, 4764, 2877, 5129, 3770, 9123, 9221, 8878, 8282, 8187, 2135, 146, 8121, 1597, 8842, 9107, 8325, 7071, 2698, 488, 5619, 2684, 4099, 227, 6138, 6418, 605, 8484, 274, 3401, 6422, 5761, 7087, 7327, 789, 8293, 8127, 6935, 8183, 6465, 8367, 6060, 8122, 2827, 8197, 3988, 4474, 4989, 8194, 6209, 9065, 6083, 2463, 8824, 5394, 6413, 7409, 191, 5821, 7308, 5181, 8529, 9136, 2548, 8610, 430, 248, 8567, 1982, 8239, 437, 1596, 4355, 6679, 9053, 4636, 111, 7325, 8361, 8165, 9195, 6363, 3215, 8100, 2282, 8260, 8813, 8681, 2561, 8723, 3695, 2767, 8117, 8848, 2021, 4204, 6445, 6757, 8552, 8508, 8352, 2210, 8085, 324, 7659, 5508, 8844, 5407, 7423, 202, 7948, 2146, 1707, 9125, 8869, 6281, 159, 5944, 3276, 2858, 8906, 245, 1772, 7960, 579, 957, 2776, 6267, 8709, 1215, 5795, 4079, 7368, 1981, 8671, 300, 4281, 4627, 7901, 8716, 818, 9093, 2240, 4097, 204, 8514, 7010, 8603, 2965, 6595, 6159, 4720, 143, 18, 625, 9139, 5911, 6464, 21, 3499, 8148, 652, 8835, 1190, 3752, 5023, 8490, 8435, 9166, 1135, 206, 4785, 5955, 1939, 8602, 8651, 6366, 8619, 6634, 7434, 534, 8382, 3326, 8061, 6949, 6708, 8858, 7544, 3850, 7014, 326, 7449, 8967, 8690, 6488, 7459, 6326, 5708, 118, 5090, 5688, 6055, 357, 8604, 1196, 5814, 8857, 9031, 9058, 6300, 7438, 8556, 165, 6077, 9017, 587, 6976, 8910, 2040, 4648, 125, 7613, 8834, 8052, 2866, 565, 4141, 9096, 9231, 9009, 8295, 8298, 329, 5013, 5935, 5731, 7276, 7593, 3912, 179, 8037, 3560, 433, 3934, 8768, 8792, 6187, 8710, 5123, 8616, 5092, 6202, 1299, 8852, 4760, 1186, 5338, 2732, 8700, 768, 621, 6773, 8475, 9040, 8941, 569, 5087, 9179, 5048, 2495, 5053, 3710, 8492, 261, 9207, 4431, 8863, 7624, 5211, 9021, 8422, 8943, 161, 3304, 4339, 8407, 8413, 380, 6782, 541, 7386, 8826, 8048, 190, 7576, 475, 8851, 3866, 97, 8924, 8657, 575, 8424, 5332, 8125, 52, 8975, 8420, 8639, 632, 8140, 8113, 8670, 8377, 7564, 8421, 6183, 1119, 489, 8868, 8264, 7651, 7109, 6203, 8054, 7385, 6240, 4737, 5316, 5416, 9105, 6045, 3333, 618, 5184, 2801, 5447, 477, 8653, 6103, 6669, 8879, 8608, 8763, 5709, 135, 6753, 674, 186, 262, 8721, 8713, 8898, 1272, 414, 8805, 6842, 129, 2718, 3818, 5354, 448, 8930, 8534, 8729, 6317, 5183, 7271, 8450, 853, 4189, 5570, 8188, 1717, 5970, 2068, 3130, 4216, 8579, 2884, 8394, 8800, 7945, 4828, 9077]

        # updated list with each users min rating 20
        L_m = [2587, 3581, 4289, 4049, 132, 916, 7038, 1111, 6790, 1691, 372, 5818, 7266, 1946, 3713, 7661, 2450, 6177, 1487, 4249, 6787, 6262, 4743, 6590, 7262, 8346, 7565, 5073, 5061, 5003, 1442, 7660, 1409, 7064, 2956, 7451, 3425, 1367, 5300, 5908, 7063, 2858, 3210, 292, 7288, 6750, 3123, 4507, 1278, 5373, 5040, 1134, 7895, 6763, 6539, 1483, 2802, 2998, 1066, 4016, 6547, 5164, 3471, 1430, 5532, 1556, 1106, 3239, 3887, 4217, 1415, 7558, 3582, 3534, 6574, 4343, 5729, 762, 6635, 4639, 802, 8568, 3948, 3724, 5577, 4789, 3326, 4481, 6185, 1165, 6811, 5592, 1615, 3755, 6376, 2590, 3258, 6582, 5582, 1376, 1799, 3199, 1555, 5227, 4358, 5265, 4522, 144, 6858, 8287, 1863, 6925, 6292, 6412, 6482, 4004, 5216, 7220, 7759, 2686, 2925, 5130, 2368, 177, 2366, 5013, 3249, 3245, 5937, 578, 2260, 984, 1351, 8141, 3940, 5555, 2115, 4459, 8315, 2693, 1867, 4252, 8136, 3153, 3186, 4056, 3487, 1947, 5935, 769, 1744, 6789, 5814, 4962, 6116, 2677, 8529, 4870, 3570, 6718, 4068, 2947, 1805, 5043, 6455, 6992, 6067, 2930, 3394, 6270, 4244, 7601, 8464, 2648, 5796, 6165, 2815, 5972, 6753, 6857, 3317, 3630, 327]
        L_f = [8569, 8176, 8494, 5099, 8218, 8533, 4931, 126, 760, 7813, 8563, 4468, 8219, 562, 8319, 4636, 1100, 8215, 8379, 1642, 8072, 8323, 3618, 7020, 7864, 7628, 4804, 441, 323, 719, 5302, 7885, 8390, 2315, 8306, 8238, 8301, 8253, 1160, 2405, 1970, 8177, 6944, 5675, 8093, 7656, 1576, 1362, 550, 4819, 6957, 939, 4234, 2258, 6970, 5448, 352, 7651, 7490, 8349, 7600, 54, 7781, 6221, 100, 7478, 92, 8430, 7081, 7587, 5039, 4233, 7592, 2972, 7498, 8506, 4903, 7778, 282, 8235, 6801, 6357, 8474, 303, 7972, 7630, 1621, 6948, 5984, 5391, 52, 36, 6991, 4464, 4893, 7883, 8039, 423, 7732, 3964, 291, 8531, 235, 5225, 1971, 1292, 4280, 5291, 7589, 210, 654, 361, 7557, 8459, 7834, 8134, 6932, 8227, 1101, 587, 7983, 4274, 606, 6967, 7005, 634, 7590, 110, 5841, 7860, 5521, 215, 4010, 542, 7996, 7466, 7990, 7644, 8418, 616, 8425, 8470, 8033, 388, 7756, 382, 5967, 7769, 4486, 5464, 7768, 384, 7705, 6761, 8370, 1908, 8092, 8318, 8398, 5825, 6937, 7772, 8362, 7703, 485, 7835, 8123, 5443, 2023, 8165, 5623, 7737, 5890, 8249, 2906, 4629, 8188, 149, 468, 407, 7987, 4892, 8003, 7964, 5376, 5687, 7655, 563, 6910, 4963, 7999, 7796, 8041, 4741, 4203, 4699, 8485, 6895, 5529, 6193, 7896, 597, 5159, 8027, 7479, 818, 7798, 6587, 601, 3807, 3, 8572, 6904, 2052, 621, 8266, 5850, 7483, 8048, 3941, 8486, 5404, 7936, 5134, 8303, 325, 3831, 8057, 6405, 8157, 373, 3013, 5621, 87, 6894, 8071, 5614, 5605, 8091, 8274, 8206, 329, 6488, 6837, 3826, 2323, 5025, 2494, 8058, 62, 3071, 6174, 5884, 5838, 7707, 5865, 8070, 356, 1250, 5539, 125, 7240, 7949, 3859, 182, 69, 4271, 8481, 8061, 5630, 7854, 3509, 7958, 10, 7502, 4525, 8083, 6462, 7873, 557, 154, 137, 5956, 7809, 8180, 6105, 3357, 5307, 5485, 1285, 6343, 7612, 8046, 7459, 6922, 70, 1713, 855, 8438, 204, 7945, 2085, 4337, 7747, 7633, 7941, 7012, 7843, 2567, 2522, 1872, 620, 558, 8226, 4851, 7973, 8233, 527, 7697, 213, 8214, 8421, 541, 8240, 4466, 6756, 7912, 8060, 5421, 5665, 2155, 3881, 7994, 3195, 7131, 8205, 2555, 6930, 7539, 4152, 7731, 3697, 7968, 607, 271, 5809, 239, 11, 4424, 3692, 8232, 7, 6239, 8295, 3073, 365, 5974, 1922, 1136, 2986, 7853, 2227, 7795, 6839, 1213, 8239, 524, 8124, 5579, 5530, 276, 519, 4813, 5552, 5034, 7704, 7788, 8162, 5308, 2234, 1416, 8472, 8225, 3292, 7842, 8154, 6999, 5342, 4514, 7634, 7613, 820, 8095, 3794, 6161, 102, 8327, 253, 7810, 7443, 1043, 107, 3949, 7741, 25, 254, 4981, 7519, 411, 3838, 7829, 8155, 8208, 5768, 8312, 3293, 6015, 7525, 8203, 71, 6997, 8244, 8326, 5755, 7579, 8343, 2017, 2386, 6849, 5052, 6091, 2583, 2088, 422, 8490, 4769, 469, 514, 6897, 575, 763, 3314, 3883, 8160, 8189, 5672, 7211, 5553, 6266, 8211, 7706, 8350, 805, 455, 5058, 4900, 403, 7775, 7876, 7461, 217, 6908, 8037, 7620, 7982, 1785, 7955, 8434, 8289, 7098, 6018, 5919, 5878, 5245, 8537, 8273, 538, 7838, 3614, 8212, 8193, 8210, 13, 8030, 5800, 842, 8250, 8269, 3580, 6211, 7520, 566, 8143, 8373, 6444, 3337, 8159, 4258, 7708, 8204, 7848, 7567, 151, 7937, 694, 473, 8190, 248, 8264]

    avg_ratings = np.zeros(shape=X.shape[1]) # --- will store item avg. rating
    initial_count = np.zeros(shape=X.shape[1])

    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0 ]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)

    max_count = initial_count * notice_factor
    # max_count: that means how much a item can be added to the users profile is not considered in blurme

    print("obfuscation")

    # Now, start obfuscating the data:

    X_obf = np.copy(X)

    prob_m = []#[p / sum(C_m) for p in C_m]
    prob_f = []#[p / sum(C_f) for p in C_f]

    for index, user in enumerate(X):
        rate = sum(1 for rating in user if rating > 0)
        k = rate * p
        print(f"User: {index}, no. rate: {rate} and k = {k}, sex: {T[index]}")
        greedy_index = 0

        if T[index] == 1: # female user
            added = 0
            safety_counter = 0

            # select a movie for obfuscation
            while added < k and safety_counter < 100:
                if sample_mode == 'random':
                    movie_id = L_m[np.random.randint(0, len(L_m))]
                elif sample_mode == 'sampled':
                    movie_id = L_m[np.random.choice(range(len(L_m)), p=prob_m)]
                elif sample_mode == 'greedy':
                    movie_id = L_m[greedy_index]
                    greedy_index += 1
                    if greedy_index >= len(L_m):
                        safety_counter = 100
                rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, int(movie_id) - 1]])
                if rating_count > max_count[int(movie_id) - 1]:
                    continue

                # set rating of the selected movie
                if X_obf[index, int(movie_id)-1] == 0:# and X_test [index, int(movie_id) - 1] ==0:
                    if rating_mode == 'higest':
                        X_obf[index, int(movie_id) - 1] = 5
                    elif rating_mode == 'avg':
                        X_obf[index, int(movie_id) - 1] = avg_ratings[int((movie_id) - 1) ] # avg_ratings[int(index)]
                    elif rating_mode == 'pred':
                        X_obf[index, int(movie_id) - 1] = X_impute[index, int(movie_id) - 1]

                    added += 1
                safety_counter += 1
            print(f"user: {index}, item added: {added}, movie: {movie_id}, rating: {X_obf[index, int(movie_id) - 1]}")


        elif T[index] == 0: # male user
            added = 0
            safety_counter = 0
            while added < k and safety_counter < 100:
                if sample_mode == 'random':
                    movie_id = L_f[np.random.randint(0, len(L_f))]
                elif sample_mode == 'sampled':
                    movie_id = L_f[np.random.choice(range(len(L_f)), p=prob_f)]
                elif sample_mode == 'greedy':
                    movie_id = L_f[greedy_index]
                    greedy_index += 1
                    if greedy_index >= len(L_f):
                        safety_counter = 100

                rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, int(movie_id) - 1]])
                if rating_count > max_count[int(movie_id) - 1]:
                    continue

                # set the rating of the selected item
                if X_obf[index, int(movie_id) - 1] == 0:# and X_test [index, int(movie_id) - 1] ==0:
                    if rating_mode == 'higest':
                        X_obf[index, int(movie_id) - 1] = 5
                    elif rating_mode == 'avg':
                        X_obf[index, int(movie_id) - 1] = avg_ratings[int((movie_id) - 1) ] #int(index)
                    elif rating_mode == 'pred':
                        X_obf[index, int(movie_id) - 1] = X_impute[index, int(movie_id) - 1]
                    added += 1
                safety_counter += 1

                print(f"user: {index}, item added: {added}, movie: {movie_id}, rating: {X_obf[index, int(movie_id) - 1]}")

        with open(output_file + "Threshold20Rating_blurMe_"+dataset+"_obfuscated_" + str(p) + "_" + sample_mode + "_" + rating_mode + ".dat", 'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")

    return X_obf


def rating_add_1m():
    # add a percentage of random ratings to a user:
    X = MD.load_user_item_matrix_1m()
    X_obf = MD.load_user_item_matrix_1m()
    percentage = 0.05
    for user_index, user in enumerate(X):
        nr_ratings = 0
        for rating in user:
            if rating > 0:
                nr_ratings += 1

        added = 0
        safety_counter = 0
        while added < nr_ratings*percentage and safety_counter < 100:
            index = np.random.randint(0,len(user))
            if X_obf[user_index, index] > 0:
                safety_counter += 1
                continue
            else:
                X_obf[user_index, index] = np.random.randint(1,6)

    # output the data in a file:
    with open("ml-1m/random_added_obfuscated_" + str(percentage) + ".dat", 'w') as f:
        for index_user, user in enumerate(X_obf):
            for index_movie, rating in enumerate(user):
                if rating > 0:
                    f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                        int(rating)) + "::000000000\n")
    return X_obf


def rating_swap_1m():
    plot = False
    low_bound, high_bound = 100, 1500
    # swap 0 ratings with non zero ratings:
    X = np.transpose(MD.load_user_item_matrix_1m())
    X_obf = np.transpose(MD.load_user_item_matrix_1m())
    nr_ratings = []
    for item in X:
        nr_rating = 0
        for rating in item:
            if rating > 0:
                nr_rating += 1
        nr_ratings.append(nr_rating)

    fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True)
    if plot:
        #plt.subplot(1,2,1)
        ax1.bar(range(1,len(X)+1), nr_ratings)
        ax1.set_xlabel("movie id")
        ax1.set_ylabel("nr ratings")

    # we want to remove ratings from movies that have more than 1500 ratings:
    amount_removed = 0
    for item_index, item in enumerate(X):
        if nr_ratings[item_index] > high_bound:
            indecies = np.argwhere(X[item_index,:] > 0)[:,0]
            indecies = np.random.choice(indecies, size=(nr_ratings[item_index]-high_bound,), replace=False)
            amount_removed += len(indecies)
            for i in indecies:
                X_obf[item_index, i] = 0
    """ To check if the removal is working
    
    nr_ratings = []
    for item in X_obf:
        nr_rating = 0
        for rating in item:
            if rating > 0:
                nr_rating += 1
        nr_ratings.append(nr_rating)
    if plot:
        plt.bar(range(1, len(X) + 1), nr_ratings)
        plt.xlabel("movie id")
        plt.ylabel("nr ratings")
        plt.show()
    
    """
    # now we want to add ratings to movies with a small number of ratings:
    print(np.asarray(nr_ratings))
    indecies = np.argwhere(np.asarray(nr_ratings) < low_bound)[:,0]
    print(indecies)
    nr_few_rated_movies = len(indecies)
    nr_to_be_added = amount_removed/nr_few_rated_movies
    print(nr_to_be_added)
    for item_index, item in enumerate(X):
        if nr_ratings[item_index] < low_bound:
            indecies = np.argwhere(X[item_index,:] == 0)[:,0]
            indecies = np.random.choice(indecies, size=(int(nr_to_be_added),), replace=False)
            for i in indecies:
                X_obf[item_index, i] = np.random.randint(1,6)

    """ To check if the removal and adding is working
    """
    nr_ratings = []
    for item in X_obf:
        nr_rating = 0
        for rating in item:
            if rating > 0:
                nr_rating += 1
        nr_ratings.append(nr_rating)
    if plot:
        #plt.subplot(1,2,2)
        ax2.bar(range(1, len(X) + 1), nr_ratings)
        ax2.set_xlabel("movie id")
        ax2.set_ylabel("nr ratings")
        plt.show()

    X_obf = np.transpose(X_obf)

    # output the data in a file:
    with open("ml-1m/rebalanced_(" + str(low_bound) + "," + str(high_bound) + ").dat", 'w') as f:
        for index_user, user in enumerate(X_obf):
            for index_movie, rating in enumerate(user):
                if rating > 0:
                    f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                        int(rating)) + "::000000000\n")

    return X_obf


def blurMePP():
    top = -1
    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    removal_mode = list(['random', 'strategic'])[1]
    rating_mode = list(['avg', 'predicted'])[0]
    #id_index, index_id = MD.load_movie_id_index_dict()
    notice_factor = 2
    p = 0.05
    dataset = ['ML', 'Fx', 'LFM', 'Li'][0]
    if dataset == 'ML':
        X = MD.load_user_item_matrix_1m_all()
        # X = MD.load_user_item_matrix_1m_trainingSet()  # load_user_item_matrix_1m_trainingSet max_user=max_user, max_item=max_item)
        T = MD.load_gender_vector_1m()  # max_user=max_user)
        #X_test = MD.load_user_item_matrix_1m_testSet()
        # X = MD.load_user_item_matrix_100k()
        # T = MD.load_gender_vector_100k()
    elif dataset == 'Fx':
        """import FlixsterData as FD
        #X, T, _ = FD.load_flixster_data_subset()
        X, T, _ = FD.load_flixster_data_subset_trainingSet()"""
        import FlixsterDataSub as FDS
        # X = FDS.load_user_item_matrix_FX_All()
        X = FDS.load_user_item_matrix_FX_TrainingSet()
        X_test = FDS.load_user_item_matrix_FX_Test()
        T = FDS.load_gender_vector_FX()
    elif dataset == 'LFM':
        print("no file for lfm")
        #import LastFMData as LFM
        # X = LFM.load_user_item_matrix_lfm_Train()  # LFM.load_user_item_matrix_lfm_All()
        #X = LFM.load_user_item_matrix_lfm_All()  # load_user_item_matrix_lfm_Train LFM.load_user_item_matrix_lfm_All()
        #T = LFM.load_gender_vector_lfm()
        #X_test = LFM.load_user_item_matrix_lfm_Test()
    else:
        import LibimSeTiData as LD
        X, T, _ = LD.load_libimseti_data_subset()
    # X = Utils.normalizze(X)
    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])

    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)

    max_count = initial_count * notice_factor
    # 1: get the set of most correlated movies, L_f and L_m:
    """from sklearn.model_selection import StratifiedKFold
    from sklearn.linear_model import LogisticRegression

    cv = StratifiedKFold(n_splits=10)
    coefs = []
    avg_coefs = np.zeros(shape=(len(X[1]),))

    random_state = np.random.RandomState(0)
    for train, test in cv.split(X, T):
        x, t = X[train], T[train]
        model = LogisticRegression(penalty='l2', random_state=random_state)
        model.fit(x, t)
        # rank the coefs:
        ranks = ss.rankdata(model.coef_[0])
        coefs.append(ranks)
        # print(len(model.coef_[0]),len(x[0]))
        avg_coefs += model.coef_[0]

    coefs = np.average(coefs, axis=0)
    coefs = [[coefs[i], i + 1, avg_coefs[i]] for i in range(len(coefs))]
    coefs = np.asarray(list(sorted(coefs)))


    if top == -1:
        values = coefs[:,2]
        index_zero = np.where(np.abs(values) == np.min(np.abs(values)))
        top_male = index_zero[0][0]
        top_female = index_zero[0][-1]
        L_m = coefs[:top_male, 1][100:]
        # print(len(L_m))
        R_m = 2835 - coefs[:top_male, 0] #3952 2835
        C_m = np.abs(coefs[:top_male, 2])
        # C_m = [x for x in C_m if x > 2] # C_m[C_m <=  2]
        # print("C_m", type (C_m), "\n", C_m)
        L_f = coefs[coefs.shape[0] - top_female:, 1][100:]
        L_f = list(reversed(L_f))
        R_f = coefs[coefs.shape[0] - top_female:, 0]
        R_f = list(reversed(R_f))
        C_f = coefs[coefs.shape[0] - top_female:, 2]
        C_f = list(reversed(np.abs(C_f)))
        # C_f = [x for x in C_f if x > 2] # C_f[C_f <= 2]
        # print("C_f", type (C_f), "\n", C_f)

        # plt.plot(C_m, label = 'Male Coef', c= 'lightskyblue')
        # plt.plot(C_f, label = 'Female Coef', c= 'lightpink')
        # plt.axhline(y=2, color='crimson', linestyle='--')
        # plt.legend(loc="upper right")
        # plt.title("Male and Female coefficients on Flixster Data", fontsize=16, fontweight="bold")
        # plt.xlabel ('Features', fontsize=19)
        # plt.ylabel ('Coefficients', fontsize=19)
        # # plt.savefig("threshold_ML1M_IndicativeItems.pdf")
        # plt.show()

    else:
        L_m = coefs[:top, 1]
        R_m = 2835 -coefs[:top, 0] #3952 2835
        C_m = np.abs(coefs[:top, 2])
        L_f = coefs[coefs.shape[0]-top:, 1]
        L_f = list(reversed(L_f))
        R_f = coefs[coefs.shape[0]-top:, 0]
        R_f = list(reversed(R_f))
        C_f = coefs[coefs.shape[0]-top:, 2]
        C_f = list(reversed(np.abs(C_f)))

    # print(len(L_f))
    # Here we are trying to get all the less indicative items for F / M
    # Based on the plot we see that from 600 to the end the coefficients are <= 2
    L_ff = L_f.copy()
    print(L_ff)
    ## low indicative items
    # L_ff = L_ff [100:]
    # highly indicative items
    # L_ff = L_ff[:400]
    # print("L_ff:", L_ff, "\n\n", len(L_ff))
    L_ff = pd.DataFrame(L_ff)
    L_ff.to_csv('L_f_FX_Normalized.csv', index=False)
    # print("------")
    # print(len(L_m))
    L_mm = L_m.copy()
    print (L_mm)
    ## low indicative items
    # L_mm = L_mm [100:]
    # highly indicative items
    # L_mm = L_mm[:400]
    # print("L_mm:", L_mm, "\n\n", len( L_mm))
    L_mm = pd.DataFrame(L_mm)
    L_mm.to_csv('L_m_FX_Normalized.csv', index=False)"""
    # Now, where we have the two lists, we can start obfuscating the data:
    #X = MD.load_user_item_matrix_1m()
    #np.random.shuffle(X)
    #print(X.shape)

    X_obf = np.copy(X)
    total_added = 0
    for index, user in enumerate(X):
        print(index)
        k = 0
        for rating in user:
            if rating > 0:
                k += 1
        k *= p
        greedy_index_m = 0
        greedy_index_f = 0
        # print(k)
        added = 0
        if T[index] == 1:
            safety_counter = 0
            while added < k and safety_counter < 100:
                if greedy_index_m >= len(L_m):
                    safety_counter = 100
                    continue
                if sample_mode == 'greedy':
                    movie_id = L_m[greedy_index_m]
                if sample_mode == 'random':
                    movie_id = L_m[np.random.randint(0, len(L_m))]
                greedy_index_m += 1
                rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, int(movie_id)-1]])
                if rating_count > max_count[int(movie_id)-1]:
                    continue
                if X_obf[index, int(movie_id) - 1] == 0:# and X_test [index, int(movie_id) - 1] ==0:
                    X_obf[index, int(movie_id) - 1] = avg_ratings[int(movie_id) - 1]
                    added += 1
                safety_counter += 1
        elif T[index] == 0:
            safety_counter = 0
            while added < k and safety_counter < 100:
                if greedy_index_f >= len(L_f):
                    safety_counter = 100
                    continue
                if sample_mode == 'greedy':
                    movie_id = L_f[greedy_index_f]
                if sample_mode == 'random':
                    movie_id = L_f[np.random.randint(0, len(L_f))]
                greedy_index_f += 1
                rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, int(movie_id) - 1]])
                if rating_count > max_count[int(movie_id) - 1]:
                    continue

                if X_obf[index, int(movie_id) - 1] == 0:# and X_test [index, int(movie_id) - 1] ==0:
                    X_obf[index, int(movie_id) - 1] = avg_ratings[int(movie_id) - 1]
                    added += 1
                safety_counter += 1
        total_added += added

    # Now remove ratings from users that have more than 200 ratings equally:
    if removal_mode == "random":
        nr_many_ratings = 0
        for user in X:
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20: # 200 for ML1M and 300 for Flixster
                nr_many_ratings += 1
        nr_remove = total_added / nr_many_ratings

        for user_index, user in enumerate(X):
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                to_be_removed_indecies = np.random.choice(np.argwhere(user > 0)[:, 0], size=(int(nr_remove),))#,replace=False)
                X_obf[user_index, to_be_removed_indecies] = 0
    else:
        nr_many_ratings = 0
        for user in X:
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                nr_many_ratings += 1
        print("nr_many_ratings:", nr_many_ratings)
        print("total_added:", total_added)
        nr_remove = total_added / nr_many_ratings

        for user_index, user in enumerate(X):
            print("user: ", user_index)
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                index_m = 0
                index_f = 0
                rem = 0
                if T[user_index] == 1:
                    safety_counter = 0
                    # We note that if we add safety_counter < 1000 in the while we have a higher accuracy than if we keep it in the if
                    while (rem < nr_remove) and safety_counter < 100:
                        if index_f >= len(L_f) :
                            safety_counter = 100
                            continue

                        if removal_mode == "random":
                            to_be_removed_indecies = np.random.choice(np.argwhere(user > 0)[:, 0],
                                                                      size=(int(nr_remove),),
                                                                      replace=False)  # , replace=False)
                        if removal_mode == "strategic":
                            to_be_removed_indecies = L_f[index_f]
                        index_f += 1

                        if X_obf[user_index, int(to_be_removed_indecies) - 1] != 0:
                            X_obf[user_index, int(to_be_removed_indecies) - 1] = 0
                            rem += 1
                        safety_counter += 1

                elif T[user_index] == 0:

                    while (rem < nr_remove) and safety_counter < 100:
                        if index_m >= len(L_m) :#and safety_counter < 1000:
                            safety_counter = 100
                            continue

                        if removal_mode == "random":
                            to_be_removed_indecies = np.random.choice(np.argwhere(user > 0)[:, 0],
                                                                      size=(int(nr_remove),),
                                                                      replace=False)  # , replace=False)
                        # X_obf[user_index, to_be_removed_indecies] = 0

                        if removal_mode == "strategic":
                            to_be_removed_indecies = L_m[index_m]
                        index_m += 1

                        if X_obf[user_index, int(to_be_removed_indecies) - 1] != 0:
                            X_obf[user_index, int(to_be_removed_indecies) - 1] = 0
                            rem += 1
                        safety_counter += 1


    # output the data in a file:
    output_file = ""
    if dataset == 'ML':
        output_file = "ml-1m/BlurMore/"#"ml1m/"#"ml-1m/BlurMore/" ml-1m/BlurMore/Random_Removal/
        with open(output_file + "All_testSafe`Count_threshold20_ML1M_blurmepp_obfuscated_" + sample_mode + "_" +
                  str(p) + "_" + str(notice_factor) + "_" + str(removal_mode)  + ".dat",
                  'w') as f: # + "_" + str(removal_mode) + ".dat",
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(
                            str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                                int(np.round(rating))) + "::000000000\n")

    elif dataset == 'Fx':
        output_file = "Flixster/"#BlurMore/RandomRem/" # "Flixster/BlurMore/Greedy_Removal/" FX/
        with open(output_file + "All_testSafe`Count_threshold20_ExcludeTestSet_FX_blurmepp_obfuscated_" + sample_mode + "_" + str(p) + "_" + str(
                notice_factor) + "_" + str(removal_mode) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")
    elif dataset == 'LFM':
        output_file = "lastFM/"#BlurMore/RandomRem/"
        with open(output_file + "All_testSafe`Count_LFM_blurmepp_ExcludeTestSet_obfuscated_" + sample_mode + "_" + str(p) + "_" +str( notice_factor) + "_" + str(removal_mode) + ".dat",
                      'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")

    else:
        with open("libimseti/LST_blurmepp_obfuscated_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat", 'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user+1) + "::" + str(index_movie+1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")


    return X_obf


#---------------------------------
"""Creation of Personalized list of indicative items """
def Personalized_list_User():
    notice_factor = 2
    item_choice = {}
    print(notice_factor)
    ##with open('ml-1m/user_based_imputation/With_Fancy_KNN/test_Confidence_Score_Items_Selection/NN_All_AllUsers_Neighbors_Weight_K_30_item_choice.json') as json_file:
    #with open('ml-1m/NN_All_AllUsers_Neighbors_Weight_K_30_item_choice.json') as json_file:

    ### this is actually neighbor list for each missing item
    with open('ml-1m/NN_All_AllUsers_Neighbors_Weight_K_30_item_choice.json') as json_file:
        data = json.load(json_file)
        print(len(data))
    len_dict = {}

    print("data loaded")
    for key, value in data.items():
        length = []
        for v in value:
            length.append(len(v))
        len_dict[int(key)] = length

    # Use ijson to parse the large JSON file in a memory-efficient way
    # data = {}
    # file_path = 'ml-1m/NN_All_AllUsers_Neighbors_Weight_K_30_item_choice.json'
    #
    # with open(file_path, 'r') as json_file:
    #     parser = ijson.parse(json_file)
    #     current_key = None
    #     current_value = []
    #
    #     for prefix, event, value in parser:
    #         if event == 'map_key':
    #             if current_key is not None and current_value:
    #                 # Save the previous key-value pair
    #                 data[int(current_key)] = current_value
    #             # Update current key and reset current value
    #             current_key = value
    #             current_value = []
    #         elif event == 'start_array':
    #             continue
    #         elif event == 'end_array':
    #             continue
    #         else:
    #             current_value.append(value)
    #
    #     # Ensure the last key-value pair is also stored
    #     if current_key is not None and current_value:
    #         data[int(current_key)] = current_value
    #
    # print(f"Number of keys loaded from JSON: {len(data)}")
    #
    # # Modified section to handle non-list values in the JSON data
    # len_dict = {}
    #
    # for key, value in data.items():
    #     length = []
    #     for v in value:
    #         if isinstance(v, list):  # Ensure `v` is a list before calculating its length
    #             length.append(len(v))
    #         else:
    #             # If `v` is not a list, append 0 or handle it as needed
    #             length.append(0)
    #     len_dict[int(key)] = length


    X = MD.load_user_item_matrix_1m() #MD.load_user_item_matrix_100k() #
    T = MD.load_gender_vector_1m() #MD.load_gender_vector_100k() #

    # Diagnostics: Print the number of users in X
    print("Number of users in X:", X.shape[0])

    # Ensure len_dict contains all user indices
    for i in range(X.shape[0]):
        if i not in len_dict:
            len_dict[i] = []

    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = []
        for rating in X[:, item_id]:
            if rating > 0:
                ratings.append(rating)
        if len(ratings) == 0:
            avg_ratings[item_id] = 0
        else:
            avg_ratings[item_id] = np.average(ratings)
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor
    # 1: get the set of most correlated movies, L_f and L_m:
    #k = 100
    k = 50
    L_m = list(map(int, L_mm))
    #L_mm = list(map(int, L_mk))
    L_m = list(map(lambda x: x - 1, L_m))[:k]
    L_f = list(map(int, L_ff))
    #L_ff = list(map(int, L_fk))
    L_f = list(map(lambda x: x - 1, L_f))[:k]

    print(len(len_dict))
    for z in range(len(X)):
        #print(z)
        values = len_dict[z]
        lst_j = []
        # list of neighbors ordered / ranked by weight for user i
        user_item = list(np.argsort(values))  # [::-1])

        # lst = X_filled [z]
        # lst = list(map(lst.__getitem__, user_item))
        if (len(user_item) == len(values)):
            p = 0
            while p < len(values):
                if T[z] == 0:
                    f = user_item.pop(0)  # np.argmin (lst)
                    print(f)
                    if f in L_f:
                        if f not in lst_j:
                            lst_j.append(f)

                elif T[z] == 1:
                    m = user_item.pop(0)
                    print(m)
                    if m in L_m:
                        if m not in lst_j:
                            lst_j.append(m)
                p += 1
            item_choice[z] = lst_j
    print("item_choice: ", item_choice)
    with open("ml-1m/NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top"+str(k)+"IndicativeItems_noRemoval.json",
              "w") as fp:
        json.dump(item_choice, fp, cls=NpEncoder)

# -------------------------------- do later for top50. -> now regen for ml-100k


"""PerBlur without removal strategy function for obfuscating the user-item matrix"""


def PerBlur_No_Removal():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[2]
    removal_mode = list(['random', 'strategic'])[1]
    top = 100
    p = 0.02
    notice_factor = 2
    dataset = ['ML100k', 'ML1M'][1]

    if dataset == 'ML100k':
        X = MD.load_user_item_matrix_100k()
        T = MD.load_gender_vector_100k()
        X_filled = MD.load_user_item_matrix_100k_Complet()
        L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 303, 264, 339, 1010, 276, 218, 995, 240, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 322, 462, 265, 750, 23, 281, 137, 333, 736, 164, 358, 301, 479, 647, 168, 144, 94, 687, 60, 70, 175, 6, 354, 344, 1115, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 235, 258, 330, 56, 347, 52, 205, 371, 1024, 8, 369, 116, 79, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 620, 355, 181, 717, 936, 500, 893, 489, 1316, 855, 2, 180, 871, 755, 523, 477, 227, 412, 183, 657, 510, 77, 474, 1105, 67, 705, 362, 1133, 511, 546, 768, 96, 457, 108, 1137, 352, 341, 825, 165, 584, 505, 908, 404, 679, 15, 513, 117, 490, 665, 28, 338, 59, 32, 1014, 989, 351, 475, 57, 864, 969, 177, 316, 463, 134, 703, 306, 378, 105, 99, 229, 484, 651, 157, 232, 114, 161, 395, 754, 931, 591, 408, 685, 97, 554, 468, 455, 640, 473, 683, 300, 31, 1060, 650, 72, 191, 259, 1280, 199, 826, 747, 68, 1079, 887, 578, 329, 274, 174, 428, 905, 780, 753, 396, 4, 277, 71, 519, 1062, 189, 325, 502, 233, 1022, 880, 1063, 197, 813, 16, 331, 208, 162, 11, 963, 501, 820, 930, 896, 318, 1142, 1194, 425, 171, 282, 496, 26, 215, 573, 527, 730, 49, 693, 517, 336, 417, 207, 900, 299, 226, 606, 268, 192, 407, 62, 636, 480, 1016, 241, 945, 343, 603, 231, 469, 515, 492, 664, 972, 642, 781, 984, 187, 149, 257, 40, 141, 978, 44, 845, 85, 244, 512, 182, 1021, 756, 1, 778, 644, 1050, 185, 530, 81, 497, 3, 335, 923, 509, 418, 724, 566, 221, 570, 655, 413, 1311, 340, 583, 537, 635, 686, 176, 296, 926, 561, 101, 173, 862, 680, 652]
        L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 405, 950, 891, 611, 582, 66, 1035, 346, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 1620, 890, 1176, 1017, 237, 1294, 245, 508, 387, 53, 514, 422, 1068, 1527, 939, 1232, 1011, 631, 381, 956, 875, 459, 607, 1442, 155, 697, 1066, 1285, 293, 88, 1221, 1109, 675, 254, 209, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 286, 559, 1085, 892, 102, 211, 285, 1383, 758, 1234, 674, 1163, 283, 637, 735, 885, 630, 709, 938, 38, 142, 219, 953, 275, 1059, 676, 210, 47, 63, 255, 494, 744, 250, 1114, 672, 308, 632, 17, 1203, 762, 1522, 538, 491, 307, 669, 775, 1135, 217, 841, 949, 766, 966, 314, 812, 821, 574, 1039, 1388, 51, 579, 252, 50, 1009, 1040, 1147, 224, 212, 1483, 1278, 122, 934, 702, 443, 86, 1444, 69, 400, 975, 35, 549, 928, 531, 622, 614, 1020, 658, 740, 1468, 22, 1007, 470, 1269, 633, 1074, 1299, 1095, 1148, 280, 1136, 92, 167, 434, 284, 961, 1084, 126, 619, 974, 196, 485, 1152, 673, 627, 345, 29, 605, 929, 952, 714, 1053, 526, 123, 476, 660, 955, 380, 1503, 163, 493, 1197, 431, 504, 886, 1037, 13, 794, 273, 844, 1032, 1025, 106, 91, 533, 421, 699, 869, 78, 1243, 481, 661, 82, 732]

        # popular_Lm = [750, 326, 23, 471, 316, 314, 177, 304, 178, 185, 9, 293, 4, 470, 1047, 1100, 878, 448, 323, 149, 356, 410, 135, 677, 201, 691, 99, 302, 263, 275, 217, 239, 432, 270, 202, 543, 519, 409, 221, 1027, 923, 822, 321, 461, 264, 749, 22, 280, 136, 332, 735, 163, 357, 300, 478, 646, 167, 143, 93, 686, 59, 69, 174, 353, 596, 595, 41, 13, 520, 183, 392, 187, 449, 1046, 681, 6, 269, 259, 294, 288, 429, 234, 257, 55, 346, 51, 204, 370, 7, 115, 78, 830, 286, 434, 241, 32, 200, 229, 505, 180, 716, 854, 1, 179, 870, 754, 522, 476, 226, 411, 182, 656, 509, 76, 473, 66, 704, 510, 545, 95, 107, 824, 164, 583, 504, 403, 678, 14, 512, 116, 664, 27, 337, 58, 31, 1013, 474, 863, 968, 176, 315, 462, 133, 305, 377, 104, 98, 228, 483, 650, 156, 231, 113, 160, 590, 407, 684, 96, 553, 467, 454, 639, 472, 299, 30, 649, 71, 190, 258, 198, 825, 746, 67, 886, 577, 273, 173, 427, 779, 3, 276, 70, 518, 188, 324, 232, 196, 330, 207, 161, 10, 500, 819, 929, 317, 424, 170, 281, 495, 25, 214, 526, 48, 692, 516, 416, 206, 298, 225, 605, 267, 191, 61, 635, 479, 1015, 240, 342, 602, 230, 468, 514, 641, 780, 186, 256, 140, 43, 844, 181, 755, 0, 777, 184, 529, 80, 496, 2, 508, 417, 723, 565, 220, 654, 339, 175, 925, 100, 172, 651]
        # popular_Lf = [331, 320, 277, 303, 86, 92, 291, 628, 726, 219, 142, 515, 381, 498, 44, 110, 415, 131, 124, 688, 603, 627, 309, 245, 418, 147, 658, 247, 706, 19, 128, 271, 689, 497, 18, 215, 712, 428, 310, 287, 391, 130, 82, 894, 431, 108, 155, 587, 485, 242, 318, 517, 268, 297, 446, 289, 987, 422, 695, 567, 918, 594, 481, 747, 814, 450, 153, 683, 992, 203, 197, 402, 524, 552, 506, 64, 419, 168, 8, 426, 728, 653, 400, 189, 169, 401, 290, 709, 150, 366, 63, 311, 384, 38, 647, 745, 88, 193, 661, 144, 97, 146, 738, 158, 89, 54, 119, 447, 199, 408, 117, 237, 123, 152, 261, 126, 865, 57, 355, 194, 1040, 1072, 404, 581, 65, 1034, 345, 171, 487, 707, 120, 238, 212, 1011, 872, 192, 477, 132, 248, 549, 451, 528, 457, 791, 312, 624, 741, 762, 72, 236, 244, 507, 386, 52, 513, 938, 1010, 630, 380, 606, 154, 292, 87, 253, 208, 139, 47, 719, 435, 285, 558, 210, 284, 282, 734, 708, 37, 218, 274, 675, 209, 46, 62, 254, 743, 249, 671, 16, 761, 537, 490, 306, 216, 948, 1038, 50, 251, 49, 1008, 211, 121, 933, 442, 85, 68, 548, 927, 530, 657, 739, 21, 469, 632, 1073, 279, 91, 166, 433, 283, 125, 618, 195, 484, 672, 626, 344, 28, 525, 122, 475, 659, 379, 162, 492, 430, 503, 12, 272, 105, 90, 420, 698, 480, 660, 81, 731]

        longtail_item = np.loadtxt('ml-100k/longtail_item.dat', dtype=int)
        longtail_item = list(longtail_item)

        popular_item = np.loadtxt('ml-100k/popular_item.dat', dtype=int)
        popular_item = list(popular_item)

        # Load item choice
        with open('ml-100k/Dist/combine_personalized_recommendations_top100.json') as json_file:
            item_choice = json.load(json_file)

    elif dataset == 'ML1M':
        X = MD.load_user_item_matrix_1m()
        T = MD.load_gender_vector_1m()
        X_filled = MD.load_user_item_matrix_1m_complet()
        L_m = [589.0, 1233.0, 2706.0, 1090.0, 2959.0, 1250.0, 2427.0, 2490.0, 1208.0, 1266.0, 3654.0, 1748.0, 1262.0, 1396.0, 1374.0, 2700.0, 1265.0, 1089.0, 1222.0, 231.0, 2770.0, 1676.0, 2890.0, 1228.0, 1136.0, 3360.0, 3298.0, 1663.0, 3811.0, 2011.0, 1261.0, 233.0, 3361.0, 2366.0, 1127.0, 1276.0, 3555.0, 1214.0, 3929.0, 299.0, 1304.0, 3468.0, 1095.0, 150.0, 1213.0, 750.0, 3082.0, 6.0, 111.0, 3745.0, 349.0, 541.0, 2791.0, 785.0, 1060.0, 1294.0, 1302.0, 1256.0, 1292.0, 2948.0, 3683.0, 3030.0, 3836.0, 913.0, 2150.0, 32.0, 2826.0, 2721.0, 590.0, 3623.0, 2997.0, 3868.0, 3147.0, 1610.0, 3508.0, 2046.0, 21.0, 1249.0, 10.0, 1283.0, 3760.0, 2712.0, 3617.0, 3552.0, 3256.0, 1079.0, 3053.0, 1517.0, 2662.0, 1953.0, 2670.0, 3578.0, 2371.0, 3334.0, 2502.0, 2278.0, 364.0, 3462.0, 2401.0, 3163.0, 2311.0, 852.0, 2916.0, 1378.0, 3384.0, 524.0, 70.0, 370.0, 3035.0, 3513.0, 2917.0, 3697.0, 24.0, 1957.0, 3494.0, 1912.0, 3752.0, 2013.0, 3452.0, 3928.0, 2987.0, 431.0, 2759.0, 1387.0, 1882.0, 3638.0, 1288.0, 2867.0, 2728.0, 2433.0, 161.0, 3386.0, 517.0, 741.0, 1287.0, 1231.0, 3062.0, 2288.0, 3753.0, 529.0, 3793.0, 3052.0, 2447.0, 1320.0, 3819.0, 1303.0, 922.0, 3022.0, 260.0, 858.0, 493.0, 3006.0, 480.0, 2410.0, 333.0, 1178.0, 3814.0, 2702.0, 1203.0, 2922.0, 1625.0, 3366.0, 3213.0, 2188.0, 2628.0, 3358.0, 2648.0, 3788.0, 953.0, 999.0, 3754.0, 3910.0, 3016.0, 3863.0, 303.0, 3263.0, 1080.0, 786.0, 3764.0, 2105.0, 3543.0, 2607.0, 3681.0, 592.0, 145.0, 2303.0, 1682.0, 1019.0, 3646.0, 1544.0, 235.0, 908.0, 3615.0, 2792.0, 2167.0, 2455.0, 1587.0, 1227.0, 2901.0, 2687.0, 1883.0, 1210.0, 1201.0, 3169.0, 3098.0, 3688.0, 2409.0, 3198.0, 610.0, 1923.0, 1982.0, 165.0, 2403.0, 784.0, 2871.0, 2889.0, 628.0, 2300.0, 417.0, 3671.0, 3100.0, 3914.0, 3608.0, 3152.0, 3429.0, 1794.0, 952.0, 1391.0, 2518.0, 410.0, 3535.0, 2333.0, 1713.0, 2605.0, 707.0, 2795.0, 1965.0, 373.0, 3916.0, 556.0, 3703.0, 95.0, 466.0, 3066.0, 3177.0, 2088.0, 1476.0, 163.0, 3422.0, 58.0, 1244.0, 1689.0, 2002.0, 1711.0, 2259.0, 3524.0, 1371.0, 3104.0, 1693.0, 965.0, 1732.0, 2600.0, 3424.0, 3755.0, 2450.0, 3826.0, 3801.0, 3927.0, 1298.0, 2118.0, 112.0, 2478.0, 471.0, 1673.0, 1246.0, 2734.0, 2529.0, 2806.0, 1948.0, 2093.0, 45.0, 648.0, 3504.0, 2968.0, 1722.0, 1963.0, 2840.0, 1747.0, 1348.0, 3871.0, 3175.0, 2360.0, 1092.0, 3190.0, 1405.0, 367.0, 3248.0, 1702.0, 1734.0, 2644.0, 1597.0, 1401.0, 1416.0, 107.0, 1379.0, 2764.0, 2116.0, 1036.0, 60.0, 2115.0, 1876.0, 1254.0, 2243.0, 2606.0, 3925.0, 3087.0, 1627.0, 3770.0, 3678.0, 3113.0, 3036.0, 3525.0, 1584.0, 2236.0, 3267.0, 954.0, 1205.0, 2470.0, 2686.0, 3397.0, 2015.0, 1377.0, 3740.0, 1594.0, 2456.0, 2038.0, 891.0, 1342.0, 1966.0, 2808.0, 3324.0, 3794.0, 2467.0, 3420.0, 3773.0, 1927.0, 2231.0, 3742.0, 1960.0, 1542.0, 2672.0, 1376.0, 3174.0, 1248.0, 225.0, 1267.0, 3203.0, 1025.0, 2769.0, 1973.0, 2541.0, 3593.0, 2058.0, 3273.0, 154.0, 1179.0, 2009.0, 2423.0, 2676.0, 2793.0, 3505.0, 1920.0, 3357.0, 2580.0, 2542.0, 1701.0, 3252.0, 440.0, 540.0, 1885.0, 2384.0, 1414.0, 1251.0, 1187.0, 2841.0, 2287.0, 2004.0, 1257.0, 1358.0, 2253.0, 3918.0, 2976.0, 1100.0, 2140.0, 2092.0, 2772.0, 3500.0, 1196.0, 3728.0, 555.0, 3564.0, 3099.0, 2863.0, 2492.0, 13.0, 2378.0, 3271.0, 3946.0, 1017.0, 3189.0, 3908.0, 1238.0, 3551.0, 800.0, 1193.0, 3254.0, 3614.0, 448.0, 1779.0, 3477.0, 1388.0, 748.0, 1411.0, 3948.0, 1057.0, 2877.0, 2633.0, 3078.0, 2289.0, 514.0, 3831.0, 535.0, 361.0, 290.0, 1408.0, 1356.0, 2522.0, 2321.0, 1395.0, 1103.0, 2861.0, 1974.0, 2497.0, 1633.0, 2530.0, 1931.0, 125.0, 1735.0, 3159.0, 892.0, 2828.0, 523.0, 3148.0, 296.0, 2882.0, 1639.0, 1665.0, 3834.0, 534.0, 2942.0, 1247.0, 861.0, 2107.0, 3469.0, 1970.0, 3307.0, 432.0, 3879.0, 3930.0, 742.0, 3937.0, 1237.0, 1091.0, 3214.0, 1273.0, 3809.0, 3115.0, 2111.0, 468.0, 3769.0, 2961.0, 3771.0, 246.0, 3094.0, 2907.0, 1016.0, 151.0, 377.0, 450.0, 3538.0, 3717.0, 2694.0, 2745.0, 2389.0, 3865.0, 281.0, 2272.0, 2991.0, 1810.0, 2024.0, 2725.0, 2731.0, 409.0, 2971.0, 1083.0, 2701.0, 1753.0, 1459.0, 2567.0, 673.0, 3516.0, 611.0, 947.0, 1176.0, 1640.0, 172.0, 2671.0, 2041.0, 2723.0, 2471.0, 378.0, 3901.0, 1834.0, 1733.0, 1135.0, 998.0, 2475.0, 292.0, 3347.0, 2121.0, 3952.0, 1219.0, 413.0, 2294.0, 1997.0, 849.0, 2017.0, 2025.0, 3476.0, 1399.0, 2822.0, 2068.0, 180.0, 2076.0, 3700.0, 1783.0, 3326.0, 1760.0, 2437.0, 3893.0, 2594.0, 16.0, 1942.0, 2171.0, 2815.0, 1281.0, 1589.0, 936.0, 3168.0, 2520.0, 3095.0, 3448.0, 1971.0, 1230.0, 3129.0, 3799.0, 3125.0, 3784.0, 3789.0, 3262.0, 1946.0, 2390.0, 1918.0, 3201.0, 3909.0, 2943.0, 2082.0, 3157.0, 2112.0, 3409.0, 1772.0, 1680.0, 3633.0, 2153.0, 720.0, 674.0, 3713.0, 126.0, 585.0, 2353.0, 158.0, 3676.0, 3398.0, 485.0, 765.0, 1284.0, 2089.0, 1148.0, 1147.0, 2183.0, 1037.0, 2393.0, 2250.0, 2524.0, 1617.0, 1457.0, 3135.0, 3142.0, 2935.0, 1461.0, 533.0, 1425.0, 1282.0, 728.0, 3521.0, 1972.0, 1361.0, 551.0, 2016.0, 454.0, 3889.0, 3837.0, 190.0, 2735.0, 2124.0, 2310.0, 23.0, 3548.0, 1466.0, 3743.0, 1124.0, 2033.0, 1590.0, 2138.0, 2716.0, 1649.0, 1189.0, 2135.0, 3243.0, 3359.0, 1339.0, 123.0, 1224.0, 2996.0, 344.0, 1101.0, 515.0, 2428.0, 1873.0, 1392.0, 2583.0, 258.0, 2519.0, 2771.0, 213.0, 451.0, 2906.0, 2313.0, 3253.0, 1343.0, 2941.0, 745.0, 2729.0, 353.0, 1707.0, 2859.0, 2108.0, 1359.0]
        L_f = [920.0, 3844.0, 2369.0, 1088.0, 3534.0, 1207.0, 17.0, 1041.0, 3512.0, 3418.0, 1188.0, 902.0, 2336.0, 3911.0, 1441.0, 141.0, 2690.0, 928.0, 39.0, 2762.0, 906.0, 838.0, 2657.0, 2125.0, 3565.0, 1967.0, 2291.0, 914.0, 932.0, 1620.0, 2160.0, 247.0, 222.0, 261.0, 2881.0, 2145.0, 3072.0, 1028.0, 1956.0, 2080.0, 1286.0, 3798.0, 1959.0, 28.0, 2248.0, 3247.0, 3594.0, 3155.0, 1345.0, 531.0, 1277.0, 593.0, 3044.0, 3083.0, 3005.0, 1380.0, 2020.0, 105.0, 1678.0, 1608.0, 2572.0, 3791.0, 1104.0, 2144.0, 318.0, 1186.0, 1073.0, 595.0, 2724.0, 1641.0, 351.0, 2908.0, 357.0, 3079.0, 1688.0, 3556.0, 3186.0, 2406.0, 224.0, 1962.0, 1480.0, 3251.0, 11.0, 345.0, 3526.0, 1784.0, 951.0, 3668.0, 2485.0, 1958.0, 2739.0, 916.0, 950.0, 2443.0, 3684.0, 904.0, 898.0, 587.0, 552.0, 2143.0, 3481.0, 3097.0, 3067.0, 1449.0, 47.0, 616.0, 3281.0, 1259.0, 661.0, 2348.0, 562.0, 3606.0, 2496.0, 2085.0, 1271.0, 372.0, 2857.0, 3325.0, 1394.0, 1081.0, 1032.0, 918.0, 1409.0, 314.0, 899.0, 733.0, 2245.0, 381.0, 2316.0, 232.0, 2405.0, 2677.0, 1066.0, 2396.0, 2282.0, 1059.0, 2622.0, 1941.0, 959.0, 3479.0, 3124.0, 1197.0, 1777.0, 915.0, 955.0, 1648.0, 3705.0, 3061.0, 34.0, 1285.0, 1.0, 2875.0, 1150.0, 3545.0, 2664.0, 2155.0, 1097.0, 262.0, 3915.0, 971.0, 2186.0, 3702.0, 3105.0, 2280.0, 3604.0, 3515.0, 1513.0, 2331.0, 1500.0, 2803.0, 945.0, 2639.0, 3051.0, 837.0, 3408.0, 457.0, 1801.0, 2506.0, 4.0, 2469.0, 270.0, 46.0, 1235.0, 2355.0, 2346.0, 1357.0, 461.0, 3255.0, 3176.0, 3350.0, 2975.0, 2014.0, 3936.0, 2072.0, 1353.0, 2006.0, 1397.0, 2612.0, 1099.0, 1367.0, 3270.0, 938.0, 2357.0, 94.0, 412.0, 1518.0, 3591.0, 538.0, 2000.0, 2846.0, 708.0, 329.0, 2995.0, 653.0, 1280.0, 5.0, 337.0, 1022.0, 2468.0, 1569.0, 905.0, 1031.0, 900.0, 1541.0, 2926.0, 3730.0, 1900.0, 2718.0, 1021.0, 3185.0, 2746.0, 327.0, 2805.0, 3101.0, 2920.0, 3269.0, 1674.0, 477.0, 3686.0, 2077.0, 2801.0, 581.0, 2133.0, 3724.0, 3296.0, 3554.0, 3478.0, 1479.0, 3720.0, 491.0, 1014.0, 1236.0, 3134.0, 695.0, 2763.0, 1013.0, 1096.0, 1856.0, 2827.0, 248.0, 1875.0, 3211.0, 3672.0, 215.0, 3224.0, 3396.0, 469.0, 1897.0, 3528.0, 2870.0, 917.0, 930.0, 1654.0, 3328.0, 3786.0, 907.0, 3870.0, 1422.0, 2206.0, 2114.0, 2324.0, 2575.0, 919.0, 3467.0, 1047.0, 1806.0, 350.0, 230.0, 2505.0, 48.0, 182.0, 144.0, 170.0, 2141.0, 1916.0, 3081.0, 1191.0, 1086.0, 2598.0, 546.0, 1407.0, 153.0, 2635.0, 2057.0, 2037.0, 1327.0, 3145.0, 446.0, 2193.0, 1337.0, 1913.0, 195.0, 2132.0, 1804.0, 3562.0, 3706.0, 1172.0, 1042.0, 2946.0, 2514.0, 1093.0, 1616.0, 3011.0, 2151.0, 1111.0, 613.0, 1043.0, 2774.0, 2154.0, 2621.0, 52.0, 3060.0, 3723.0, 206.0, 3133.0, 1821.0, 1964.0, 211.0, 2454.0, 532.0, 218.0, 3156.0, 1586.0, 1126.0, 2096.0, 927.0, 2007.0, 778.0, 2097.0, 3117.0, 691.0, 3567.0, 1223.0, 1268.0, 1300.0, 2747.0, 1573.0, 3302.0, 671.0, 3471.0, 3825.0, 1064.0, 1299.0, 252.0, 3004.0, 2091.0, 2337.0, 61.0, 1020.0, 3763.0, 1727.0, 74.0, 3599.0, 3708.0, 465.0, 29.0, 3741.0, 3457.0, 2399.0, 781.0, 69.0, 3635.0, 3808.0, 3249.0, 2732.0, 1621.0, 1686.0, 3435.0, 3857.0, 3299.0, 3426.0, 176.0, 343.0, 2972.0, 2853.0, 272.0, 2788.0, 1393.0, 203.0, 1465.0, 801.0, 1917.0, 2431.0, 3714.0, 2967.0, 3553.0, 79.0, 3951.0, 1683.0, 3071.0, 3102.0, 302.0, 3655.0, 2261.0, 3877.0, 2266.0, 3716.0, 3699.0, 1769.0, 266.0, 1173.0, 2693.0, 3093.0, 1658.0, 277.0, 279.0, 848.0, 839.0, 2365.0, 2738.0, 1264.0, 271.0, 1269.0, 2043.0, 3855.0, 1030.0, 1346.0, 2052.0, 2142.0, 2719.0, 2574.0, 2053.0, 1410.0, 3912.0, 1381.0, 3660.0, 2446.0, 2613.0, 2314.0, 978.0, 348.0, 2168.0, 3466.0, 669.0, 3649.0, 2448.0, 2899.0, 1611.0, 2940.0, 8.0, 1463.0, 26.0, 3557.0, 1994.0, 1758.0, 414.0, 1027.0, 3088.0, 3391.0, 1936.0, 2205.0, 3861.0, 332.0, 3450.0, 2585.0, 3618.0, 425.0, 1605.0, 3827.0, 846.0, 2267.0, 2359.0, 2952.0, 2786.0, 3923.0, 1290.0, 3240.0, 3388.0, 1547.0, 338.0, 3712.0, 3063.0, 242.0, 715.0, 3679.0, 3571.0, 668.0, 1069.0, 2276.0, 1438.0, 2688.0, 2900.0, 168.0, 3539.0, 199.0, 3675.0, 2436.0, 647.0, 724.0, 82.0, 542.0, 1362.0, 117.0, 2109.0, 3246.0, 3019.0, 1904.0, 360.0, 2966.0, 482.0, 2741.0, 334.0, 2100.0, 2173.0, 1615.0, 358.0, 280.0, 3932.0, 369.0, 3547.0, 3739.0, 1788.0, 875.0, 2106.0, 3719.0, 3839.0, 1417.0, 3566.0, 3795.0, 670.0, 520.0, 208.0, 3449.0, 3274.0, 27.0, 3872.0, 2969.0, 2927.0, 2442.0, 113.0, 2084.0, 1848.0, 3882.0, 3790.0, 3926.0, 2820.0, 3922.0, 3046.0, 832.0, 3896.0, 2101.0, 1600.0, 2548.0, 2453.0, 386.0, 239.0, 1015.0, 85.0, 3077.0, 3264.0, 3340.0, 3114.0, 1729.0, 2498.0, 309.0, 1034.0, 2421.0, 3438.0, 2599.0, 405.0, 3461.0, 3813.0, 3238.0, 3399.0, 3921.0, 912.0, 1840.0, 2876.0, 319.0, 40.0, 257.0, 3287.0, 880.0, 754.0, 1874.0, 2241.0, 2553.0, 1699.0, 550.0, 1549.0, 2338.0, 1922.0, 3612.0, 1894.0, 1049.0, 1185.0, 2779.0, 3902.0, 3580.0, 2.0, 2435.0, 73.0, 1012.0, 1275.0, 783.0, 512.0, 1919.0, 3838.0, 2903.0, 507.0, 1896.0, 2263.0, 2320.0, 1515.0, 363.0, 3492.0, 1562.0, 1588.0, 408.0, 3405.0, 307.0, 1199.0, 3268.0, 186.0, 1961.0, 1428.0, 2540.0, 3284.0, 2062.0, 3624.0, 1169.0, 2513.0, 575.0, 380.0, 2696.0, 2070.0, 2130.0, 3897.0, 615.0, 50.0, 3852.0, 415.0, 1797.0, 1660.0, 506.0, 3704.0, 2816.0, 2678.0, 2122.0, 1836.0, 2126.0, 481.0, 87.0, 3577.0, 2990.0, 3200.0, 441.0, 1554.0, 346.0, 1653.0, 2202.0, 2616.0, 283.0, 3584.0, 2417.0, 2284.0, 2042.0, 3454.0, 1582.0, 2568.0, 1669.0, 2048.0, 3613.0, 1911.0, 949.0, 420.0, 1719.0, 2361.0, 41.0, 3949.0, 379.0, 2379.0, 3447.0, 2136.0, 2642.0, 3206.0, 1995.0, 3150.0, 2856.0, 2010.0, 2532.0, 382.0, 2398.0, 1798.0, 1242.0, 2414.0, 2550.0, 1084.0, 131.0, 3055.0, 2630.0, 1949.0, 1954.0, 2352.0, 2110.0, 3181.0, 2021.0, 1344.0, 3685.0, 1398.0, 1312.0, 910.0, 3738.0, 173.0, 1456.0, 3445.0, 986.0, 2848.0, 2722.0, 3696.0, 3864.0, 3707.0, 1171.0, 558.0, 356.0, 2717.0, 3204.0, 2561.0, 934.0, 2704.0, 371.0, 1831.0, 879.0, 2439.0, 3108.0, 2517.0, 1372.0, 1672.0, 807.0, 3616.0, 688.0, 2797.0, 519.0, 1211.0, 1730.0, 1446.0, 1546.0, 2445.0, 2147.0, 3475.0, 1556.0, 1580.0, 1220.0, 2373.0, 501.0, 124.0, 1216.0, 1429.0, 2683.0, 2066.0, 1881.0, 2949.0, 3090.0, 802.0, 1870.0, 407.0, 586.0, 1944.0, 2989.0, 1921.0, 1226.0, 2380.0, 3489.0, 3886.0, 2190.0, 2919.0, 2495.0, 2392.0, 753.0, 1484.0, 1667.0, 2363.0, 3308.0, 1077.0, 1805.0, 2714.0, 3173.0, 216.0, 1694.0, 736.0, 1321.0, 1483.0, 608.0, 1485.0, 1347.0, 2789.0, 25.0, 2699.0, 1792.0, 2065.0, 2709.0, 2860.0, 1845.0, 2752.0, 494.0, 2273.0, 62.0, 2710.0, 866.0, 3841.0, 1566.0, 3153.0, 973.0, 3600.0, 1240.0, 1270.0, 923.0, 2159.0, 896.0, 3258.0, 147.0, 3439.0, 2947.0, 2643.0, 1212.0, 1258.0, 2527.0, 1419.0, 1217.0, 316.0, 1293.0, 2420.0, 3130.0, 2474.0, 2879.0, 991.0, 3317.0, 2713.0, 3440.0, 2463.0, 1619.0, 2539.0, 3070.0, 3040.0, 2163.0, 508.0, 428.0, 1816.0, 2533.0, 2736.0, 1969.0, 3054.0, 2176.0, 288.0, 2794.0, 2239.0, 2290.0, 1234.0, 3735.0, 2166.0, 19.0, 2071.0, 2394.0, 2858.0]
        # --- for this data need to find popular lm, lf

        longtail_item = np.loadtxt('ml-1m/longtail_item.dat', dtype=int)
        longtail_item = list(longtail_item)

        popular_item = np.loadtxt('ml-1m/popular_item.dat', dtype=int)
        popular_item = list(popular_item)

        # Load item choice
        with open('ml-1m/Dist/combine_personalized_recommendations_top100.json') as json_file:
            item_choice = json.load(json_file)

    # outside loop
    L_m = list(map(lambda x: x-1, L_m))
    L_f = list(map(lambda x: x-1, L_f))

    long_Lm = [item_id for item_id in L_m if item_id in longtail_item]
    long_Lf = [item_id for item_id in L_f if item_id in longtail_item]
    all_long_tail_items = set(long_Lm).union(set(long_Lf))
    not_in_Lm_or_Lf = set(longtail_item) - all_long_tail_items
    not_in_Lm_or_Lf = list(not_in_Lm_or_Lf)
    # print(not_in_Lm_or_Lf)

    popular_Lm = [item_id for item_id in L_m if item_id in popular_item]
    popular_Lf = [item_id for item_id in L_f if item_id in popular_item]
    print(popular_Lm)

    popular_items_added_in_males = {}
    popular_items_added_in_females = {}

    # Calculate average ratings and initial count
    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor
    #popular_count = initial_count

    # # Load item choice
    # with open('ml-100k/Dist/combine_personalized_recommendations_top100.json') as json_file:
    #     item_choice = json.load(json_file)

    # Obfuscation starts
    X_obf = np.copy(X)
    total_added = 0

    for index, user in enumerate(X):
        print(f"Processing User: {index}")
        rate = sum(1 for rating in user if rating > 0)  # Count of non-zero ratings for the user
        k = rate * p #math.ceil(rate * p)  # Total items to add
        # k1= k
        # k2 = 0

        # Calculate two proportions of `k`
        if k == 1 :
            k1 = k
            k2 = 0
        else:
            custom_round = lambda value: math.floor(value) if value < math.floor(value) + 0.5 else math.ceil(value)
            # k1 = 0.75 * k  # Proportion to add without constraints
            # k2 = math.ceil(0.25 * k)  # Proportion to add only for long-tail items
            k1 = 0.7 * k
            k2 = 0.3 * k
            print(f"k -> {k}, k1 {k1} & k2 {k2}")

        greedy_index = 0
        added1 = 0
        added2 = 0
        mylist = list(item_choice.values())
        safety_counter = 0
        print(f"User: {index}, No of Ratings: {rate}, p:{p} & k = {k}, k1 = {k1}, k2 = {k2}")

        # --- First Proportion: Add items without checking for long-tail constraint ---
        while added1 < k1 and safety_counter < 100:
            if greedy_index >= len(mylist[index]):
                safety_counter = 100
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                movie_id = int(vec[greedy_index])  # Get movie ID for greedy mode
            elif sample_mode == 'random':
                movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (no constraints): {X_obf[index, movie_id]} for movie: {movie_id}")
                added1 += 1

                # Track if the added item belongs to `popular_Lf` for male users & popular_Lm` for female users
                if T[index] == 0 and movie_id in popular_Lf:
                    if movie_id not in popular_items_added_in_males:
                        popular_items_added_in_males[movie_id] = []
                    popular_items_added_in_males[movie_id].append(index)
                elif T[index] == 1 and movie_id in popular_Lm:
                    if movie_id not in popular_items_added_in_females:
                        popular_items_added_in_females[movie_id] = []
                    popular_items_added_in_females[movie_id].append(index)
            # print(f'lf: {len(popular_items_added_in_males)}: {popular_items_added_in_males}')
            # print(f'lm: {len(popular_items_added_in_females)}: -> {popular_items_added_in_females}')
            safety_counter += 1

        # --- Second Proportion: Add only if the movie is in the long-tail items ---
        while added2 < k2 and safety_counter < 200:
            if greedy_index >= len(mylist[index]):
                safety_counter = 200
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                #movie_id = int(vec[greedy_index]) #.58 # Get movie ID for greedy mode
                #movie_id = int(not_in_Lm_or_Lf[greedy_index]) #.61
                if T[index] == 0:
                    movie_id = int(long_Lf[greedy_index])
                elif T[index] == 1:
                    movie_id = int(long_Lm[greedy_index])
            elif sample_mode == 'random':
                #movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode
                if T[index] == 0:
                    movie_id = int(long_Lf[np.random.randint(0, len(long_Lf))])
                elif T[index] == 1:
                    movie_id = int(long_Lm[np.random.randint(0, len(long_Lm))])

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (long-tail only): {X_obf[index, movie_id]} for movie: {movie_id}")
                added2 += 1

            safety_counter += 1

        total_added += (added1 + added2)


    # Save the obfuscated data to a file
    if dataset == 'ML100k':
        output_file = "ml-100k/SBlur/"
        print(output_file)
        with open(output_file + "SBlur_withRemoval_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(int(np.round(rating))) + "::000000000\n")

    elif dataset == 'ML1M':
        output_file = "ml-1m/SBlur/"
        print(output_file)
        with open(output_file + "SBlur_withRemoval_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(int(np.round(rating))) + "::000000000\n")


    return X_obf

def SmartBlur():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[1]
    p = 0.1
    notice_factor = 2
    dataset = ['100k', '1m', 'yahoo'][2]

    if dataset == '100k':
        X = DL.load_user_item_matrix_100k()
        T = DL.load_gender_vector_100k()
        X_filled = DL.load_user_item_matrix_100k_Impute()
        L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 303, 264, 339, 1010, 276, 218, 995, 240, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 322, 462, 265, 750, 23, 281, 137, 333, 736, 164, 358, 301, 479, 647, 168, 144, 94, 687, 60, 70, 175, 6, 354, 344, 1115, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 235, 258, 330, 56, 347, 52, 205, 371, 1024, 8, 369, 116, 79, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 620, 355, 181, 717, 936, 500, 893, 489, 1316, 855, 2, 180, 871, 755, 523, 477, 227, 412, 183, 657, 510, 77, 474, 1105, 67, 705, 362, 1133, 511, 546, 768, 96, 457, 108, 1137, 352, 341, 825, 165, 584, 505, 908, 404, 679, 15, 513, 117, 490, 665, 28, 338, 59, 32, 1014, 989, 351, 475, 57, 864, 969, 177, 316, 463, 134, 703, 306, 378, 105, 99, 229, 484, 651, 157, 232, 114, 161, 395, 754, 931, 591, 408, 685, 97, 554, 468, 455, 640, 473, 683, 300, 31, 1060, 650, 72, 191, 259, 1280, 199, 826, 747, 68, 1079, 887, 578, 329, 274, 174, 428, 905, 780, 753, 396, 4, 277, 71, 519, 1062, 189, 325, 502, 233, 1022, 880, 1063, 197, 813, 16, 331, 208, 162, 11, 963, 501, 820, 930, 896, 318, 1142, 1194, 425, 171, 282, 496, 26, 215, 573, 527, 730, 49, 693, 517, 336, 417, 207, 900, 299, 226, 606, 268, 192, 407, 62, 636, 480, 1016, 241, 945, 343, 603, 231, 469, 515, 492, 664, 972, 642, 781, 984, 187, 149, 257, 40, 141, 978, 44, 845, 85, 244, 512, 182, 1021, 756, 1, 778, 644, 1050, 185, 530, 81, 497, 3, 335, 923, 509, 418, 724, 566, 221, 570, 655, 413, 1311, 340, 583, 537, 635, 686, 176, 296, 926, 561, 101, 173, 862, 680, 652]
        L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 405, 950, 891, 611, 582, 66, 1035, 346, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 1620, 890, 1176, 1017, 237, 1294, 245, 508, 387, 53, 514, 422, 1068, 1527, 939, 1232, 1011, 631, 381, 956, 875, 459, 607, 1442, 155, 697, 1066, 1285, 293, 88, 1221, 1109, 675, 254, 209, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 286, 559, 1085, 892, 102, 211, 285, 1383, 758, 1234, 674, 1163, 283, 637, 735, 885, 630, 709, 938, 38, 142, 219, 953, 275, 1059, 676, 210, 47, 63, 255, 494, 744, 250, 1114, 672, 308, 632, 17, 1203, 762, 1522, 538, 491, 307, 669, 775, 1135, 217, 841, 949, 766, 966, 314, 812, 821, 574, 1039, 1388, 51, 579, 252, 50, 1009, 1040, 1147, 224, 212, 1483, 1278, 122, 934, 702, 443, 86, 1444, 69, 400, 975, 35, 549, 928, 531, 622, 614, 1020, 658, 740, 1468, 22, 1007, 470, 1269, 633, 1074, 1299, 1095, 1148, 280, 1136, 92, 167, 434, 284, 961, 1084, 126, 619, 974, 196, 485, 1152, 673, 627, 345, 29, 605, 929, 952, 714, 1053, 526, 123, 476, 660, 955, 380, 1503, 163, 493, 1197, 431, 504, 886, 1037, 13, 794, 273, 844, 1032, 1025, 106, 91, 533, 421, 699, 869, 78, 1243, 481, 661, 82, 732]

    elif dataset == '1m':
        X = DL.load_user_item_matrix_1m()
        T = DL.load_gender_vector_1m()
        X_filled = DL.load_user_item_matrix_1m_Impute()
        L_m = [589.0, 1233.0, 2706.0, 1090.0, 2959.0, 1250.0, 2427.0, 2490.0, 1208.0, 1266.0, 3654.0, 1748.0, 1262.0, 1396.0, 1374.0, 2700.0, 1265.0, 1089.0, 1222.0, 231.0, 2770.0, 1676.0, 2890.0, 1228.0, 1136.0, 3360.0, 3298.0, 1663.0, 3811.0, 2011.0, 1261.0, 233.0, 3361.0, 2366.0, 1127.0, 1276.0, 3555.0, 1214.0, 3929.0, 299.0, 1304.0, 3468.0, 1095.0, 150.0, 1213.0, 750.0, 3082.0, 6.0, 111.0, 3745.0, 349.0, 541.0, 2791.0, 785.0, 1060.0, 1294.0, 1302.0, 1256.0, 1292.0, 2948.0, 3683.0, 3030.0, 3836.0, 913.0, 2150.0, 32.0, 2826.0, 2721.0, 590.0, 3623.0, 2997.0, 3868.0, 3147.0, 1610.0, 3508.0, 2046.0, 21.0, 1249.0, 10.0, 1283.0, 3760.0, 2712.0, 3617.0, 3552.0, 3256.0, 1079.0, 3053.0, 1517.0, 2662.0, 1953.0, 2670.0, 3578.0, 2371.0, 3334.0, 2502.0, 2278.0, 364.0, 3462.0, 2401.0, 3163.0, 2311.0, 852.0, 2916.0, 1378.0, 3384.0, 524.0, 70.0, 370.0, 3035.0, 3513.0, 2917.0, 3697.0, 24.0, 1957.0, 3494.0, 1912.0, 3752.0, 2013.0, 3452.0, 3928.0, 2987.0, 431.0, 2759.0, 1387.0, 1882.0, 3638.0, 1288.0, 2867.0, 2728.0, 2433.0, 161.0, 3386.0, 517.0, 741.0, 1287.0, 1231.0, 3062.0, 2288.0, 3753.0, 529.0, 3793.0, 3052.0, 2447.0, 1320.0, 3819.0, 1303.0, 922.0, 3022.0, 260.0, 858.0, 493.0, 3006.0, 480.0, 2410.0, 333.0, 1178.0, 3814.0, 2702.0, 1203.0, 2922.0, 1625.0, 3366.0, 3213.0, 2188.0, 2628.0, 3358.0, 2648.0, 3788.0, 953.0, 999.0, 3754.0, 3910.0, 3016.0, 3863.0, 303.0, 3263.0, 1080.0, 786.0, 3764.0, 2105.0, 3543.0, 2607.0, 3681.0, 592.0, 145.0, 2303.0, 1682.0, 1019.0, 3646.0, 1544.0, 235.0, 908.0, 3615.0, 2792.0, 2167.0, 2455.0, 1587.0, 1227.0, 2901.0, 2687.0, 1883.0, 1210.0, 1201.0, 3169.0, 3098.0, 3688.0, 2409.0, 3198.0, 610.0, 1923.0, 1982.0, 165.0, 2403.0, 784.0, 2871.0, 2889.0, 628.0, 2300.0, 417.0, 3671.0, 3100.0, 3914.0, 3608.0, 3152.0, 3429.0, 1794.0, 952.0, 1391.0, 2518.0, 410.0, 3535.0, 2333.0, 1713.0, 2605.0, 707.0, 2795.0, 1965.0, 373.0, 3916.0, 556.0, 3703.0, 95.0, 466.0, 3066.0, 3177.0, 2088.0, 1476.0, 163.0, 3422.0, 58.0, 1244.0, 1689.0, 2002.0, 1711.0, 2259.0, 3524.0, 1371.0, 3104.0, 1693.0, 965.0, 1732.0, 2600.0, 3424.0, 3755.0, 2450.0, 3826.0, 3801.0, 3927.0, 1298.0, 2118.0, 112.0, 2478.0, 471.0, 1673.0, 1246.0, 2734.0, 2529.0, 2806.0, 1948.0, 2093.0, 45.0, 648.0, 3504.0, 2968.0, 1722.0, 1963.0, 2840.0, 1747.0, 1348.0, 3871.0, 3175.0, 2360.0, 1092.0, 3190.0, 1405.0, 367.0, 3248.0, 1702.0, 1734.0, 2644.0, 1597.0, 1401.0, 1416.0, 107.0, 1379.0, 2764.0, 2116.0, 1036.0, 60.0, 2115.0, 1876.0, 1254.0, 2243.0, 2606.0, 3925.0, 3087.0, 1627.0, 3770.0, 3678.0, 3113.0, 3036.0, 3525.0, 1584.0, 2236.0, 3267.0, 954.0, 1205.0, 2470.0, 2686.0, 3397.0, 2015.0, 1377.0, 3740.0, 1594.0, 2456.0, 2038.0, 891.0, 1342.0, 1966.0, 2808.0, 3324.0, 3794.0, 2467.0, 3420.0, 3773.0, 1927.0, 2231.0, 3742.0, 1960.0, 1542.0, 2672.0, 1376.0, 3174.0, 1248.0, 225.0, 1267.0, 3203.0, 1025.0, 2769.0, 1973.0, 2541.0, 3593.0, 2058.0, 3273.0, 154.0, 1179.0, 2009.0, 2423.0, 2676.0, 2793.0, 3505.0, 1920.0, 3357.0, 2580.0, 2542.0, 1701.0, 3252.0, 440.0, 540.0, 1885.0, 2384.0, 1414.0, 1251.0, 1187.0, 2841.0, 2287.0, 2004.0, 1257.0, 1358.0, 2253.0, 3918.0, 2976.0, 1100.0, 2140.0, 2092.0, 2772.0, 3500.0, 1196.0, 3728.0, 555.0, 3564.0, 3099.0, 2863.0, 2492.0, 13.0, 2378.0, 3271.0, 3946.0, 1017.0, 3189.0, 3908.0, 1238.0, 3551.0, 800.0, 1193.0, 3254.0, 3614.0, 448.0, 1779.0, 3477.0, 1388.0, 748.0, 1411.0, 3948.0, 1057.0, 2877.0, 2633.0, 3078.0, 2289.0, 514.0, 3831.0, 535.0, 361.0, 290.0, 1408.0, 1356.0, 2522.0, 2321.0, 1395.0, 1103.0, 2861.0, 1974.0, 2497.0, 1633.0, 2530.0, 1931.0, 125.0, 1735.0, 3159.0, 892.0, 2828.0, 523.0, 3148.0, 296.0, 2882.0, 1639.0, 1665.0, 3834.0, 534.0, 2942.0, 1247.0, 861.0, 2107.0, 3469.0, 1970.0, 3307.0, 432.0, 3879.0, 3930.0, 742.0, 3937.0, 1237.0, 1091.0, 3214.0, 1273.0, 3809.0, 3115.0, 2111.0, 468.0, 3769.0, 2961.0, 3771.0, 246.0, 3094.0, 2907.0, 1016.0, 151.0, 377.0, 450.0, 3538.0, 3717.0, 2694.0, 2745.0, 2389.0, 3865.0, 281.0, 2272.0, 2991.0, 1810.0, 2024.0, 2725.0, 2731.0, 409.0, 2971.0, 1083.0, 2701.0, 1753.0, 1459.0, 2567.0, 673.0, 3516.0, 611.0, 947.0, 1176.0, 1640.0, 172.0, 2671.0, 2041.0, 2723.0, 2471.0, 378.0, 3901.0, 1834.0, 1733.0, 1135.0, 998.0, 2475.0, 292.0, 3347.0, 2121.0, 3952.0, 1219.0, 413.0, 2294.0, 1997.0, 849.0, 2017.0, 2025.0, 3476.0, 1399.0, 2822.0, 2068.0, 180.0, 2076.0, 3700.0, 1783.0, 3326.0, 1760.0, 2437.0, 3893.0, 2594.0, 16.0, 1942.0, 2171.0, 2815.0, 1281.0, 1589.0, 936.0, 3168.0, 2520.0, 3095.0, 3448.0, 1971.0, 1230.0, 3129.0, 3799.0, 3125.0, 3784.0, 3789.0, 3262.0, 1946.0, 2390.0, 1918.0, 3201.0, 3909.0, 2943.0, 2082.0, 3157.0, 2112.0, 3409.0, 1772.0, 1680.0, 3633.0, 2153.0, 720.0, 674.0, 3713.0, 126.0, 585.0, 2353.0, 158.0, 3676.0, 3398.0, 485.0, 765.0, 1284.0, 2089.0, 1148.0, 1147.0, 2183.0, 1037.0, 2393.0, 2250.0, 2524.0, 1617.0, 1457.0, 3135.0, 3142.0, 2935.0, 1461.0, 533.0, 1425.0, 1282.0, 728.0, 3521.0, 1972.0, 1361.0, 551.0, 2016.0, 454.0, 3889.0, 3837.0, 190.0, 2735.0, 2124.0, 2310.0, 23.0, 3548.0, 1466.0, 3743.0, 1124.0, 2033.0, 1590.0, 2138.0, 2716.0, 1649.0, 1189.0, 2135.0, 3243.0, 3359.0, 1339.0, 123.0, 1224.0, 2996.0, 344.0, 1101.0, 515.0, 2428.0, 1873.0, 1392.0, 2583.0, 258.0, 2519.0, 2771.0, 213.0, 451.0, 2906.0, 2313.0, 3253.0, 1343.0, 2941.0, 745.0, 2729.0, 353.0, 1707.0, 2859.0, 2108.0, 1359.0]
        L_f = [920.0, 3844.0, 2369.0, 1088.0, 3534.0, 1207.0, 17.0, 1041.0, 3512.0, 3418.0, 1188.0, 902.0, 2336.0, 3911.0, 1441.0, 141.0, 2690.0, 928.0, 39.0, 2762.0, 906.0, 838.0, 2657.0, 2125.0, 3565.0, 1967.0, 2291.0, 914.0, 932.0, 1620.0, 2160.0, 247.0, 222.0, 261.0, 2881.0, 2145.0, 3072.0, 1028.0, 1956.0, 2080.0, 1286.0, 3798.0, 1959.0, 28.0, 2248.0, 3247.0, 3594.0, 3155.0, 1345.0, 531.0, 1277.0, 593.0, 3044.0, 3083.0, 3005.0, 1380.0, 2020.0, 105.0, 1678.0, 1608.0, 2572.0, 3791.0, 1104.0, 2144.0, 318.0, 1186.0, 1073.0, 595.0, 2724.0, 1641.0, 351.0, 2908.0, 357.0, 3079.0, 1688.0, 3556.0, 3186.0, 2406.0, 224.0, 1962.0, 1480.0, 3251.0, 11.0, 345.0, 3526.0, 1784.0, 951.0, 3668.0, 2485.0, 1958.0, 2739.0, 916.0, 950.0, 2443.0, 3684.0, 904.0, 898.0, 587.0, 552.0, 2143.0, 3481.0, 3097.0, 3067.0, 1449.0, 47.0, 616.0, 3281.0, 1259.0, 661.0, 2348.0, 562.0, 3606.0, 2496.0, 2085.0, 1271.0, 372.0, 2857.0, 3325.0, 1394.0, 1081.0, 1032.0, 918.0, 1409.0, 314.0, 899.0, 733.0, 2245.0, 381.0, 2316.0, 232.0, 2405.0, 2677.0, 1066.0, 2396.0, 2282.0, 1059.0, 2622.0, 1941.0, 959.0, 3479.0, 3124.0, 1197.0, 1777.0, 915.0, 955.0, 1648.0, 3705.0, 3061.0, 34.0, 1285.0, 1.0, 2875.0, 1150.0, 3545.0, 2664.0, 2155.0, 1097.0, 262.0, 3915.0, 971.0, 2186.0, 3702.0, 3105.0, 2280.0, 3604.0, 3515.0, 1513.0, 2331.0, 1500.0, 2803.0, 945.0, 2639.0, 3051.0, 837.0, 3408.0, 457.0, 1801.0, 2506.0, 4.0, 2469.0, 270.0, 46.0, 1235.0, 2355.0, 2346.0, 1357.0, 461.0, 3255.0, 3176.0, 3350.0, 2975.0, 2014.0, 3936.0, 2072.0, 1353.0, 2006.0, 1397.0, 2612.0, 1099.0, 1367.0, 3270.0, 938.0, 2357.0, 94.0, 412.0, 1518.0, 3591.0, 538.0, 2000.0, 2846.0, 708.0, 329.0, 2995.0, 653.0, 1280.0, 5.0, 337.0, 1022.0, 2468.0, 1569.0, 905.0, 1031.0, 900.0, 1541.0, 2926.0, 3730.0, 1900.0, 2718.0, 1021.0, 3185.0, 2746.0, 327.0, 2805.0, 3101.0, 2920.0, 3269.0, 1674.0, 477.0, 3686.0, 2077.0, 2801.0, 581.0, 2133.0, 3724.0, 3296.0, 3554.0, 3478.0, 1479.0, 3720.0, 491.0, 1014.0, 1236.0, 3134.0, 695.0, 2763.0, 1013.0, 1096.0, 1856.0, 2827.0, 248.0, 1875.0, 3211.0, 3672.0, 215.0, 3224.0, 3396.0, 469.0, 1897.0, 3528.0, 2870.0, 917.0, 930.0, 1654.0, 3328.0, 3786.0, 907.0, 3870.0, 1422.0, 2206.0, 2114.0, 2324.0, 2575.0, 919.0, 3467.0, 1047.0, 1806.0, 350.0, 230.0, 2505.0, 48.0, 182.0, 144.0, 170.0, 2141.0, 1916.0, 3081.0, 1191.0, 1086.0, 2598.0, 546.0, 1407.0, 153.0, 2635.0, 2057.0, 2037.0, 1327.0, 3145.0, 446.0, 2193.0, 1337.0, 1913.0, 195.0, 2132.0, 1804.0, 3562.0, 3706.0, 1172.0, 1042.0, 2946.0, 2514.0, 1093.0, 1616.0, 3011.0, 2151.0, 1111.0, 613.0, 1043.0, 2774.0, 2154.0, 2621.0, 52.0, 3060.0, 3723.0, 206.0, 3133.0, 1821.0, 1964.0, 211.0, 2454.0, 532.0, 218.0, 3156.0, 1586.0, 1126.0, 2096.0, 927.0, 2007.0, 778.0, 2097.0, 3117.0, 691.0, 3567.0, 1223.0, 1268.0, 1300.0, 2747.0, 1573.0, 3302.0, 671.0, 3471.0, 3825.0, 1064.0, 1299.0, 252.0, 3004.0, 2091.0, 2337.0, 61.0, 1020.0, 3763.0, 1727.0, 74.0, 3599.0, 3708.0, 465.0, 29.0, 3741.0, 3457.0, 2399.0, 781.0, 69.0, 3635.0, 3808.0, 3249.0, 2732.0, 1621.0, 1686.0, 3435.0, 3857.0, 3299.0, 3426.0, 176.0, 343.0, 2972.0, 2853.0, 272.0, 2788.0, 1393.0, 203.0, 1465.0, 801.0, 1917.0, 2431.0, 3714.0, 2967.0, 3553.0, 79.0, 3951.0, 1683.0, 3071.0, 3102.0, 302.0, 3655.0, 2261.0, 3877.0, 2266.0, 3716.0, 3699.0, 1769.0, 266.0, 1173.0, 2693.0, 3093.0, 1658.0, 277.0, 279.0, 848.0, 839.0, 2365.0, 2738.0, 1264.0, 271.0, 1269.0, 2043.0, 3855.0, 1030.0, 1346.0, 2052.0, 2142.0, 2719.0, 2574.0, 2053.0, 1410.0, 3912.0, 1381.0, 3660.0, 2446.0, 2613.0, 2314.0, 978.0, 348.0, 2168.0, 3466.0, 669.0, 3649.0, 2448.0, 2899.0, 1611.0, 2940.0, 8.0, 1463.0, 26.0, 3557.0, 1994.0, 1758.0, 414.0, 1027.0, 3088.0, 3391.0, 1936.0, 2205.0, 3861.0, 332.0, 3450.0, 2585.0, 3618.0, 425.0, 1605.0, 3827.0, 846.0, 2267.0, 2359.0, 2952.0, 2786.0, 3923.0, 1290.0, 3240.0, 3388.0, 1547.0, 338.0, 3712.0, 3063.0, 242.0, 715.0, 3679.0, 3571.0, 668.0, 1069.0, 2276.0, 1438.0, 2688.0, 2900.0, 168.0, 3539.0, 199.0, 3675.0, 2436.0, 647.0, 724.0, 82.0, 542.0, 1362.0, 117.0, 2109.0, 3246.0, 3019.0, 1904.0, 360.0, 2966.0, 482.0, 2741.0, 334.0, 2100.0, 2173.0, 1615.0, 358.0, 280.0, 3932.0, 369.0, 3547.0, 3739.0, 1788.0, 875.0, 2106.0, 3719.0, 3839.0, 1417.0, 3566.0, 3795.0, 670.0, 520.0, 208.0, 3449.0, 3274.0, 27.0, 3872.0, 2969.0, 2927.0, 2442.0, 113.0, 2084.0, 1848.0, 3882.0, 3790.0, 3926.0, 2820.0, 3922.0, 3046.0, 832.0, 3896.0, 2101.0, 1600.0, 2548.0, 2453.0, 386.0, 239.0, 1015.0, 85.0, 3077.0, 3264.0, 3340.0, 3114.0, 1729.0, 2498.0, 309.0, 1034.0, 2421.0, 3438.0, 2599.0, 405.0, 3461.0, 3813.0, 3238.0, 3399.0, 3921.0, 912.0, 1840.0, 2876.0, 319.0, 40.0, 257.0, 3287.0, 880.0, 754.0, 1874.0, 2241.0, 2553.0, 1699.0, 550.0, 1549.0, 2338.0, 1922.0, 3612.0, 1894.0, 1049.0, 1185.0, 2779.0, 3902.0, 3580.0, 2.0, 2435.0, 73.0, 1012.0, 1275.0, 783.0, 512.0, 1919.0, 3838.0, 2903.0, 507.0, 1896.0, 2263.0, 2320.0, 1515.0, 363.0, 3492.0, 1562.0, 1588.0, 408.0, 3405.0, 307.0, 1199.0, 3268.0, 186.0, 1961.0, 1428.0, 2540.0, 3284.0, 2062.0, 3624.0, 1169.0, 2513.0, 575.0, 380.0, 2696.0, 2070.0, 2130.0, 3897.0, 615.0, 50.0, 3852.0, 415.0, 1797.0, 1660.0, 506.0, 3704.0, 2816.0, 2678.0, 2122.0, 1836.0, 2126.0, 481.0, 87.0, 3577.0, 2990.0, 3200.0, 441.0, 1554.0, 346.0, 1653.0, 2202.0, 2616.0, 283.0, 3584.0, 2417.0, 2284.0, 2042.0, 3454.0, 1582.0, 2568.0, 1669.0, 2048.0, 3613.0, 1911.0, 949.0, 420.0, 1719.0, 2361.0, 41.0, 3949.0, 379.0, 2379.0, 3447.0, 2136.0, 2642.0, 3206.0, 1995.0, 3150.0, 2856.0, 2010.0, 2532.0, 382.0, 2398.0, 1798.0, 1242.0, 2414.0, 2550.0, 1084.0, 131.0, 3055.0, 2630.0, 1949.0, 1954.0, 2352.0, 2110.0, 3181.0, 2021.0, 1344.0, 3685.0, 1398.0, 1312.0, 910.0, 3738.0, 173.0, 1456.0, 3445.0, 986.0, 2848.0, 2722.0, 3696.0, 3864.0, 3707.0, 1171.0, 558.0, 356.0, 2717.0, 3204.0, 2561.0, 934.0, 2704.0, 371.0, 1831.0, 879.0, 2439.0, 3108.0, 2517.0, 1372.0, 1672.0, 807.0, 3616.0, 688.0, 2797.0, 519.0, 1211.0, 1730.0, 1446.0, 1546.0, 2445.0, 2147.0, 3475.0, 1556.0, 1580.0, 1220.0, 2373.0, 501.0, 124.0, 1216.0, 1429.0, 2683.0, 2066.0, 1881.0, 2949.0, 3090.0, 802.0, 1870.0, 407.0, 586.0, 1944.0, 2989.0, 1921.0, 1226.0, 2380.0, 3489.0, 3886.0, 2190.0, 2919.0, 2495.0, 2392.0, 753.0, 1484.0, 1667.0, 2363.0, 3308.0, 1077.0, 1805.0, 2714.0, 3173.0, 216.0, 1694.0, 736.0, 1321.0, 1483.0, 608.0, 1485.0, 1347.0, 2789.0, 25.0, 2699.0, 1792.0, 2065.0, 2709.0, 2860.0, 1845.0, 2752.0, 494.0, 2273.0, 62.0, 2710.0, 866.0, 3841.0, 1566.0, 3153.0, 973.0, 3600.0, 1240.0, 1270.0, 923.0, 2159.0, 896.0, 3258.0, 147.0, 3439.0, 2947.0, 2643.0, 1212.0, 1258.0, 2527.0, 1419.0, 1217.0, 316.0, 1293.0, 2420.0, 3130.0, 2474.0, 2879.0, 991.0, 3317.0, 2713.0, 3440.0, 2463.0, 1619.0, 2539.0, 3070.0, 3040.0, 2163.0, 508.0, 428.0, 1816.0, 2533.0, 2736.0, 1969.0, 3054.0, 2176.0, 288.0, 2794.0, 2239.0, 2290.0, 1234.0, 3735.0, 2166.0, 19.0, 2071.0, 2394.0, 2858.0]
        # --- for this data need to find popular lm, lf
    elif dataset == 'yahoo':
        X = DL.load_user_item_matrix_yahoo()
        T = DL.load_gender_vector_yahoo()
        X_filled = DL.load_user_item_matrix_yahoo_Impute()
        # updated list with each users min rating 20
        L_m = [2587, 3581, 4289, 4049, 132, 916, 7038, 1111, 6790, 1691, 372, 5818, 7266, 1946, 3713, 7661, 2450, 6177, 1487, 4249, 6787, 6262, 4743, 6590, 7262, 8346, 7565, 5073, 5061, 5003, 1442, 7660, 1409, 7064, 2956, 7451, 3425, 1367, 5300, 5908, 7063, 2858, 3210, 292, 7288, 6750, 3123, 4507, 1278, 5373, 5040, 1134, 7895, 6763, 6539, 1483, 2802, 2998, 1066, 4016, 6547, 5164, 3471, 1430, 5532, 1556, 1106, 3239, 3887, 4217, 1415, 7558, 3582, 3534, 6574, 4343, 5729, 762, 6635, 4639, 802, 8568, 3948, 3724, 5577, 4789, 3326, 4481, 6185, 1165, 6811, 5592, 1615, 3755, 6376, 2590, 3258, 6582, 5582, 1376, 1799, 3199, 1555, 5227, 4358, 5265, 4522, 144, 6858, 8287, 1863, 6925, 6292, 6412, 6482, 4004, 5216, 7220, 7759, 2686, 2925, 5130, 2368, 177, 2366, 5013, 3249, 3245, 5937, 578, 2260, 984, 1351, 8141, 3940, 5555, 2115, 4459, 8315, 2693, 1867, 4252, 8136, 3153, 3186, 4056, 3487, 1947, 5935, 769, 1744, 6789, 5814, 4962, 6116, 2677, 8529, 4870, 3570, 6718, 4068, 2947, 1805, 5043, 6455, 6992, 6067, 2930, 3394, 6270, 4244, 7601, 8464, 2648, 5796, 6165, 2815, 5972, 6753, 6857, 3317, 3630, 327]
        L_f = [8569, 8176, 8494, 5099, 8218, 8533, 4931, 126, 760, 7813, 8563, 4468, 8219, 562, 8319, 4636, 1100, 8215, 8379, 1642, 8072, 8323, 3618, 7020, 7864, 7628, 4804, 441, 323, 719, 5302, 7885, 8390, 2315, 8306, 8238, 8301, 8253, 1160, 2405, 1970, 8177, 6944, 5675, 8093, 7656, 1576, 1362, 550, 4819, 6957, 939, 4234, 2258, 6970, 5448, 352, 7651, 7490, 8349, 7600, 54, 7781, 6221, 100, 7478, 92, 8430, 7081, 7587, 5039, 4233, 7592, 2972, 7498, 8506, 4903, 7778, 282, 8235, 6801, 6357, 8474, 303, 7972, 7630, 1621, 6948, 5984, 5391, 52, 36, 6991, 4464, 4893, 7883, 8039, 423, 7732, 3964, 291, 8531, 235, 5225, 1971, 1292, 4280, 5291, 7589, 210, 654, 361, 7557, 8459, 7834, 8134, 6932, 8227, 1101, 587, 7983, 4274, 606, 6967, 7005, 634, 7590, 110, 5841, 7860, 5521, 215, 4010, 542, 7996, 7466, 7990, 7644, 8418, 616, 8425, 8470, 8033, 388, 7756, 382, 5967, 7769, 4486, 5464, 7768, 384, 7705, 6761, 8370, 1908, 8092, 8318, 8398, 5825, 6937, 7772, 8362, 7703, 485, 7835, 8123, 5443, 2023, 8165, 5623, 7737, 5890, 8249, 2906, 4629, 8188, 149, 468, 407, 7987, 4892, 8003, 7964, 5376, 5687, 7655, 563, 6910, 4963, 7999, 7796, 8041, 4741, 4203, 4699, 8485, 6895, 5529, 6193, 7896, 597, 5159, 8027, 7479, 818, 7798, 6587, 601, 3807, 3, 8572, 6904, 2052, 621, 8266, 5850, 7483, 8048, 3941, 8486, 5404, 7936, 5134, 8303, 325, 3831, 8057, 6405, 8157, 373, 3013, 5621, 87, 6894, 8071, 5614, 5605, 8091, 8274, 8206, 329, 6488, 6837, 3826, 2323, 5025, 2494, 8058, 62, 3071, 6174, 5884, 5838, 7707, 5865, 8070, 356, 1250, 5539, 125, 7240, 7949, 3859, 182, 69, 4271, 8481, 8061, 5630, 7854, 3509, 7958, 10, 7502, 4525, 8083, 6462, 7873, 557, 154, 137, 5956, 7809, 8180, 6105, 3357, 5307, 5485, 1285, 6343, 7612, 8046, 7459, 6922, 70, 1713, 855, 8438, 204, 7945, 2085, 4337, 7747, 7633, 7941, 7012, 7843, 2567, 2522, 1872, 620, 558, 8226, 4851, 7973, 8233, 527, 7697, 213, 8214, 8421, 541, 8240, 4466, 6756, 7912, 8060, 5421, 5665, 2155, 3881, 7994, 3195, 7131, 8205, 2555, 6930, 7539, 4152, 7731, 3697, 7968, 607, 271, 5809, 239, 11, 4424, 3692, 8232, 7, 6239, 8295, 3073, 365, 5974, 1922, 1136, 2986, 7853, 2227, 7795, 6839, 1213, 8239, 524, 8124, 5579, 5530, 276, 519, 4813, 5552, 5034, 7704, 7788, 8162, 5308, 2234, 1416, 8472, 8225, 3292, 7842, 8154, 6999, 5342, 4514, 7634, 7613, 820, 8095, 3794, 6161, 102, 8327, 253, 7810, 7443, 1043, 107, 3949, 7741, 25, 254, 4981, 7519, 411, 3838, 7829, 8155, 8208, 5768, 8312, 3293, 6015, 7525, 8203, 71, 6997, 8244, 8326, 5755, 7579, 8343, 2017, 2386, 6849, 5052, 6091, 2583, 2088, 422, 8490, 4769, 469, 514, 6897, 575, 763, 3314, 3883, 8160, 8189, 5672, 7211, 5553, 6266, 8211, 7706, 8350, 805, 455, 5058, 4900, 403, 7775, 7876, 7461, 217, 6908, 8037, 7620, 7982, 1785, 7955, 8434, 8289, 7098, 6018, 5919, 5878, 5245, 8537, 8273, 538, 7838, 3614, 8212, 8193, 8210, 13, 8030, 5800, 842, 8250, 8269, 3580, 6211, 7520, 566, 8143, 8373, 6444, 3337, 8159, 4258, 7708, 8204, 7848, 7567, 151, 7937, 694, 473, 8190, 248, 8264]

    # outside loop
    L_m = list(map(lambda x: x-1, L_m))
    L_f = list(map(lambda x: x-1, L_f))

    longtail_item = np.loadtxt('ml-'+dataset+'/longtail_item.dat', dtype=int)
    longtail_item = list(longtail_item)
    popular_item = np.loadtxt('ml-'+dataset+'/popular_item.dat', dtype=int)
    popular_item = list(popular_item)

    with open('ml-'+dataset+'/Dist/combine_personalized_recommendations_top100.json') as json_file:
        item_choice = json.load(json_file)

    long_Lm = [item_id for item_id in L_m if item_id in longtail_item]
    long_Lf = [item_id for item_id in L_f if item_id in longtail_item]

    # Calculate average ratings and initial count
    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor

    # Obfuscation starts
    X_obf = np.copy(X)
    total_added = 0

    for index, user in enumerate(X):
        print(f"Processing User: {index}")
        rate = sum(1 for rating in user if rating > 0)  # Count of non-zero ratings for the user
        k = rate * p

        # Calculate two proportions of `k`
        if k == 1 :
            k1 = k
            k2 = 0
        else:
            k1 = 0.7 * k
            k2 = 0.3 * k
            print(f"k -> {k}, k1 {k1} & k2 {k2}")

        greedy_index = 0
        added1 = 0
        added2 = 0
        mylist = list(item_choice.values())
        safety_counter = 0
        print(f"User: {index}, No of Ratings: {rate}, p:{p} & k = {k}, k1 = {k1}, k2 = {k2}")

        # --- First Proportion: Add items without checking for long-tail constraint ---
        while added1 < k1 and safety_counter < 100:
            if greedy_index >= len(mylist[index]):
                safety_counter = 100
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                movie_id = int(vec[greedy_index])  # Get movie ID for greedy mode
            elif sample_mode == 'random':
                movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (no constraints): {X_obf[index, movie_id]} for movie: {movie_id}")
                added1 += 1

            safety_counter += 1

        # --- Second Proportion: Add only if the movie is in the long-tail items ---
        while added2 < k2 and safety_counter < 200:
            if greedy_index >= len(mylist[index]):
                safety_counter = 200
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                #movie_id = int(vec[greedy_index]) #.58 # Get movie ID for greedy mode
                #movie_id = int(not_in_Lm_or_Lf[greedy_index]) #.61
                if T[index] == 0:
                    movie_id = int(long_Lf[greedy_index])
                elif T[index] == 1:
                    movie_id = int(long_Lm[greedy_index])
            elif sample_mode == 'random':
                #movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode
                if T[index] == 0:
                    movie_id = int(long_Lf[np.random.randint(0, len(long_Lf))])
                elif T[index] == 1:
                    movie_id = int(long_Lm[np.random.randint(0, len(long_Lm))])

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (long-tail only): {X_obf[index, movie_id]} for movie: {movie_id}")
                added2 += 1

            safety_counter += 1

        total_added += (added1 + added2)

    # Save the obfuscated data to a file
    output_file = 'ml-'+dataset+'/SBlur/'
    print(output_file)
    with open(output_file + "SBlur_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat", 'w') as f:
        for index_user, user in enumerate(X_obf):
            for index_movie, rating in enumerate(user):
                if rating > 0:
                    f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(int(np.round(rating))) + "::000000000\n")

    return X_obf

def SmartBlur_Removal():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[1]
    removal_mode = list(['random', 'strategic'])[1]
    top = 100
    p = 0.1
    notice_factor = 2
    dataset = ['100k', '1m', 'yahoo'][2]

    if dataset == '100k':
        X = DL.load_user_item_matrix_100k()
        T = DL.load_gender_vector_100k()
        X_filled = DL.load_user_item_matrix_100k_Impute()
        L_m = [751, 327, 24, 688, 472, 888, 317, 948, 315, 178, 305, 179, 359, 186, 10, 883, 294, 342, 5, 471, 1048, 1101, 879, 449, 324, 150, 357, 411, 1265, 136, 524, 678, 202, 692, 100, 303, 264, 339, 1010, 276, 218, 995, 240, 433, 271, 203, 544, 520, 410, 222, 1028, 924, 823, 322, 462, 265, 750, 23, 281, 137, 333, 736, 164, 358, 301, 479, 647, 168, 144, 94, 687, 60, 70, 175, 6, 354, 344, 1115, 597, 596, 42, 14, 521, 184, 393, 188, 450, 1047, 682, 7, 760, 737, 270, 1008, 260, 295, 1051, 289, 430, 235, 258, 330, 56, 347, 52, 205, 371, 1024, 8, 369, 116, 79, 831, 694, 287, 435, 495, 242, 33, 201, 230, 506, 979, 620, 355, 181, 717, 936, 500, 893, 489, 1316, 855, 2, 180, 871, 755, 523, 477, 227, 412, 183, 657, 510, 77, 474, 1105, 67, 705, 362, 1133, 511, 546, 768, 96, 457, 108, 1137, 352, 341, 825, 165, 584, 505, 908, 404, 679, 15, 513, 117, 490, 665, 28, 338, 59, 32, 1014, 989, 351, 475, 57, 864, 969, 177, 316, 463, 134, 703, 306, 378, 105, 99, 229, 484, 651, 157, 232, 114, 161, 395, 754, 931, 591, 408, 685, 97, 554, 468, 455, 640, 473, 683, 300, 31, 1060, 650, 72, 191, 259, 1280, 199, 826, 747, 68, 1079, 887, 578, 329, 274, 174, 428, 905, 780, 753, 396, 4, 277, 71, 519, 1062, 189, 325, 502, 233, 1022, 880, 1063, 197, 813, 16, 331, 208, 162, 11, 963, 501, 820, 930, 896, 318, 1142, 1194, 425, 171, 282, 496, 26, 215, 573, 527, 730, 49, 693, 517, 336, 417, 207, 900, 299, 226, 606, 268, 192, 407, 62, 636, 480, 1016, 241, 945, 343, 603, 231, 469, 515, 492, 664, 972, 642, 781, 984, 187, 149, 257, 40, 141, 978, 44, 845, 85, 244, 512, 182, 1021, 756, 1, 778, 644, 1050, 185, 530, 81, 497, 3, 335, 923, 509, 418, 724, 566, 221, 570, 655, 413, 1311, 340, 583, 537, 635, 686, 176, 296, 926, 561, 101, 173, 862, 680, 652]
        L_f = [332, 321, 877, 906, 827, 882, 337, 278, 872, 304, 87, 93, 1038, 292, 629, 727, 220, 898, 107, 143, 516, 819, 382, 499, 876, 45, 1600, 111, 416, 132, 752, 125, 689, 604, 628, 310, 246, 419, 148, 659, 881, 248, 899, 707, 20, 129, 272, 690, 350, 498, 19, 216, 713, 429, 253, 372, 311, 251, 288, 1023, 392, 1328, 131, 320, 83, 895, 912, 445, 1094, 432, 109, 156, 532, 588, 486, 653, 243, 319, 518, 269, 298, 447, 290, 1386, 988, 423, 723, 279, 696, 568, 919, 1296, 266, 645, 937, 595, 482, 748, 348, 749, 815, 451, 154, 684, 993, 904, 204, 198, 403, 525, 553, 671, 507, 1119, 1036, 65, 420, 169, 9, 427, 832, 894, 729, 654, 1128, 987, 1281, 401, 1089, 942, 190, 406, 170, 402, 878, 291, 710, 297, 721, 151, 367, 954, 856, 64, 312, 385, 581, 370, 39, 648, 691, 746, 89, 1033, 745, 194, 662, 145, 539, 98, 147, 739, 159, 90, 236, 55, 120, 448, 200, 409, 623, 118, 731, 365, 238, 124, 146, 716, 1026, 847, 261, 153, 262, 130, 127, 866, 58, 356, 195, 1086, 1190, 1041, 1073, 889, 405, 950, 891, 611, 582, 66, 1035, 346, 1394, 172, 909, 1013, 785, 925, 488, 704, 1315, 708, 1431, 309, 121, 239, 902, 213, 446, 1012, 1054, 873, 193, 478, 829, 916, 353, 349, 133, 249, 550, 638, 452, 1313, 466, 529, 458, 792, 313, 625, 668, 1061, 742, 1065, 763, 73, 846, 1090, 863, 1620, 890, 1176, 1017, 237, 1294, 245, 508, 387, 53, 514, 422, 1068, 1527, 939, 1232, 1011, 631, 381, 956, 875, 459, 607, 1442, 155, 697, 1066, 1285, 293, 88, 1221, 1109, 675, 254, 209, 649, 140, 48, 613, 962, 1157, 991, 1083, 720, 535, 901, 436, 286, 559, 1085, 892, 102, 211, 285, 1383, 758, 1234, 674, 1163, 283, 637, 735, 885, 630, 709, 938, 38, 142, 219, 953, 275, 1059, 676, 210, 47, 63, 255, 494, 744, 250, 1114, 672, 308, 632, 17, 1203, 762, 1522, 538, 491, 307, 669, 775, 1135, 217, 841, 949, 766, 966, 314, 812, 821, 574, 1039, 1388, 51, 579, 252, 50, 1009, 1040, 1147, 224, 212, 1483, 1278, 122, 934, 702, 443, 86, 1444, 69, 400, 975, 35, 549, 928, 531, 622, 614, 1020, 658, 740, 1468, 22, 1007, 470, 1269, 633, 1074, 1299, 1095, 1148, 280, 1136, 92, 167, 434, 284, 961, 1084, 126, 619, 974, 196, 485, 1152, 673, 627, 345, 29, 605, 929, 952, 714, 1053, 526, 123, 476, 660, 955, 380, 1503, 163, 493, 1197, 431, 504, 886, 1037, 13, 794, 273, 844, 1032, 1025, 106, 91, 533, 421, 699, 869, 78, 1243, 481, 661, 82, 732]

    elif dataset == '1m':
        X = DL.load_user_item_matrix_1m()
        T = DL.load_gender_vector_1m()
        X_filled = DL.load_user_item_matrix_1m_Impute()
        L_m = [589.0, 1233.0, 2706.0, 1090.0, 2959.0, 1250.0, 2427.0, 2490.0, 1208.0, 1266.0, 3654.0, 1748.0, 1262.0, 1396.0, 1374.0, 2700.0, 1265.0, 1089.0, 1222.0, 231.0, 2770.0, 1676.0, 2890.0, 1228.0, 1136.0, 3360.0, 3298.0, 1663.0, 3811.0, 2011.0, 1261.0, 233.0, 3361.0, 2366.0, 1127.0, 1276.0, 3555.0, 1214.0, 3929.0, 299.0, 1304.0, 3468.0, 1095.0, 150.0, 1213.0, 750.0, 3082.0, 6.0, 111.0, 3745.0, 349.0, 541.0, 2791.0, 785.0, 1060.0, 1294.0, 1302.0, 1256.0, 1292.0, 2948.0, 3683.0, 3030.0, 3836.0, 913.0, 2150.0, 32.0, 2826.0, 2721.0, 590.0, 3623.0, 2997.0, 3868.0, 3147.0, 1610.0, 3508.0, 2046.0, 21.0, 1249.0, 10.0, 1283.0, 3760.0, 2712.0, 3617.0, 3552.0, 3256.0, 1079.0, 3053.0, 1517.0, 2662.0, 1953.0, 2670.0, 3578.0, 2371.0, 3334.0, 2502.0, 2278.0, 364.0, 3462.0, 2401.0, 3163.0, 2311.0, 852.0, 2916.0, 1378.0, 3384.0, 524.0, 70.0, 370.0, 3035.0, 3513.0, 2917.0, 3697.0, 24.0, 1957.0, 3494.0, 1912.0, 3752.0, 2013.0, 3452.0, 3928.0, 2987.0, 431.0, 2759.0, 1387.0, 1882.0, 3638.0, 1288.0, 2867.0, 2728.0, 2433.0, 161.0, 3386.0, 517.0, 741.0, 1287.0, 1231.0, 3062.0, 2288.0, 3753.0, 529.0, 3793.0, 3052.0, 2447.0, 1320.0, 3819.0, 1303.0, 922.0, 3022.0, 260.0, 858.0, 493.0, 3006.0, 480.0, 2410.0, 333.0, 1178.0, 3814.0, 2702.0, 1203.0, 2922.0, 1625.0, 3366.0, 3213.0, 2188.0, 2628.0, 3358.0, 2648.0, 3788.0, 953.0, 999.0, 3754.0, 3910.0, 3016.0, 3863.0, 303.0, 3263.0, 1080.0, 786.0, 3764.0, 2105.0, 3543.0, 2607.0, 3681.0, 592.0, 145.0, 2303.0, 1682.0, 1019.0, 3646.0, 1544.0, 235.0, 908.0, 3615.0, 2792.0, 2167.0, 2455.0, 1587.0, 1227.0, 2901.0, 2687.0, 1883.0, 1210.0, 1201.0, 3169.0, 3098.0, 3688.0, 2409.0, 3198.0, 610.0, 1923.0, 1982.0, 165.0, 2403.0, 784.0, 2871.0, 2889.0, 628.0, 2300.0, 417.0, 3671.0, 3100.0, 3914.0, 3608.0, 3152.0, 3429.0, 1794.0, 952.0, 1391.0, 2518.0, 410.0, 3535.0, 2333.0, 1713.0, 2605.0, 707.0, 2795.0, 1965.0, 373.0, 3916.0, 556.0, 3703.0, 95.0, 466.0, 3066.0, 3177.0, 2088.0, 1476.0, 163.0, 3422.0, 58.0, 1244.0, 1689.0, 2002.0, 1711.0, 2259.0, 3524.0, 1371.0, 3104.0, 1693.0, 965.0, 1732.0, 2600.0, 3424.0, 3755.0, 2450.0, 3826.0, 3801.0, 3927.0, 1298.0, 2118.0, 112.0, 2478.0, 471.0, 1673.0, 1246.0, 2734.0, 2529.0, 2806.0, 1948.0, 2093.0, 45.0, 648.0, 3504.0, 2968.0, 1722.0, 1963.0, 2840.0, 1747.0, 1348.0, 3871.0, 3175.0, 2360.0, 1092.0, 3190.0, 1405.0, 367.0, 3248.0, 1702.0, 1734.0, 2644.0, 1597.0, 1401.0, 1416.0, 107.0, 1379.0, 2764.0, 2116.0, 1036.0, 60.0, 2115.0, 1876.0, 1254.0, 2243.0, 2606.0, 3925.0, 3087.0, 1627.0, 3770.0, 3678.0, 3113.0, 3036.0, 3525.0, 1584.0, 2236.0, 3267.0, 954.0, 1205.0, 2470.0, 2686.0, 3397.0, 2015.0, 1377.0, 3740.0, 1594.0, 2456.0, 2038.0, 891.0, 1342.0, 1966.0, 2808.0, 3324.0, 3794.0, 2467.0, 3420.0, 3773.0, 1927.0, 2231.0, 3742.0, 1960.0, 1542.0, 2672.0, 1376.0, 3174.0, 1248.0, 225.0, 1267.0, 3203.0, 1025.0, 2769.0, 1973.0, 2541.0, 3593.0, 2058.0, 3273.0, 154.0, 1179.0, 2009.0, 2423.0, 2676.0, 2793.0, 3505.0, 1920.0, 3357.0, 2580.0, 2542.0, 1701.0, 3252.0, 440.0, 540.0, 1885.0, 2384.0, 1414.0, 1251.0, 1187.0, 2841.0, 2287.0, 2004.0, 1257.0, 1358.0, 2253.0, 3918.0, 2976.0, 1100.0, 2140.0, 2092.0, 2772.0, 3500.0, 1196.0, 3728.0, 555.0, 3564.0, 3099.0, 2863.0, 2492.0, 13.0, 2378.0, 3271.0, 3946.0, 1017.0, 3189.0, 3908.0, 1238.0, 3551.0, 800.0, 1193.0, 3254.0, 3614.0, 448.0, 1779.0, 3477.0, 1388.0, 748.0, 1411.0, 3948.0, 1057.0, 2877.0, 2633.0, 3078.0, 2289.0, 514.0, 3831.0, 535.0, 361.0, 290.0, 1408.0, 1356.0, 2522.0, 2321.0, 1395.0, 1103.0, 2861.0, 1974.0, 2497.0, 1633.0, 2530.0, 1931.0, 125.0, 1735.0, 3159.0, 892.0, 2828.0, 523.0, 3148.0, 296.0, 2882.0, 1639.0, 1665.0, 3834.0, 534.0, 2942.0, 1247.0, 861.0, 2107.0, 3469.0, 1970.0, 3307.0, 432.0, 3879.0, 3930.0, 742.0, 3937.0, 1237.0, 1091.0, 3214.0, 1273.0, 3809.0, 3115.0, 2111.0, 468.0, 3769.0, 2961.0, 3771.0, 246.0, 3094.0, 2907.0, 1016.0, 151.0, 377.0, 450.0, 3538.0, 3717.0, 2694.0, 2745.0, 2389.0, 3865.0, 281.0, 2272.0, 2991.0, 1810.0, 2024.0, 2725.0, 2731.0, 409.0, 2971.0, 1083.0, 2701.0, 1753.0, 1459.0, 2567.0, 673.0, 3516.0, 611.0, 947.0, 1176.0, 1640.0, 172.0, 2671.0, 2041.0, 2723.0, 2471.0, 378.0, 3901.0, 1834.0, 1733.0, 1135.0, 998.0, 2475.0, 292.0, 3347.0, 2121.0, 3952.0, 1219.0, 413.0, 2294.0, 1997.0, 849.0, 2017.0, 2025.0, 3476.0, 1399.0, 2822.0, 2068.0, 180.0, 2076.0, 3700.0, 1783.0, 3326.0, 1760.0, 2437.0, 3893.0, 2594.0, 16.0, 1942.0, 2171.0, 2815.0, 1281.0, 1589.0, 936.0, 3168.0, 2520.0, 3095.0, 3448.0, 1971.0, 1230.0, 3129.0, 3799.0, 3125.0, 3784.0, 3789.0, 3262.0, 1946.0, 2390.0, 1918.0, 3201.0, 3909.0, 2943.0, 2082.0, 3157.0, 2112.0, 3409.0, 1772.0, 1680.0, 3633.0, 2153.0, 720.0, 674.0, 3713.0, 126.0, 585.0, 2353.0, 158.0, 3676.0, 3398.0, 485.0, 765.0, 1284.0, 2089.0, 1148.0, 1147.0, 2183.0, 1037.0, 2393.0, 2250.0, 2524.0, 1617.0, 1457.0, 3135.0, 3142.0, 2935.0, 1461.0, 533.0, 1425.0, 1282.0, 728.0, 3521.0, 1972.0, 1361.0, 551.0, 2016.0, 454.0, 3889.0, 3837.0, 190.0, 2735.0, 2124.0, 2310.0, 23.0, 3548.0, 1466.0, 3743.0, 1124.0, 2033.0, 1590.0, 2138.0, 2716.0, 1649.0, 1189.0, 2135.0, 3243.0, 3359.0, 1339.0, 123.0, 1224.0, 2996.0, 344.0, 1101.0, 515.0, 2428.0, 1873.0, 1392.0, 2583.0, 258.0, 2519.0, 2771.0, 213.0, 451.0, 2906.0, 2313.0, 3253.0, 1343.0, 2941.0, 745.0, 2729.0, 353.0, 1707.0, 2859.0, 2108.0, 1359.0]
        L_f = [920.0, 3844.0, 2369.0, 1088.0, 3534.0, 1207.0, 17.0, 1041.0, 3512.0, 3418.0, 1188.0, 902.0, 2336.0, 3911.0, 1441.0, 141.0, 2690.0, 928.0, 39.0, 2762.0, 906.0, 838.0, 2657.0, 2125.0, 3565.0, 1967.0, 2291.0, 914.0, 932.0, 1620.0, 2160.0, 247.0, 222.0, 261.0, 2881.0, 2145.0, 3072.0, 1028.0, 1956.0, 2080.0, 1286.0, 3798.0, 1959.0, 28.0, 2248.0, 3247.0, 3594.0, 3155.0, 1345.0, 531.0, 1277.0, 593.0, 3044.0, 3083.0, 3005.0, 1380.0, 2020.0, 105.0, 1678.0, 1608.0, 2572.0, 3791.0, 1104.0, 2144.0, 318.0, 1186.0, 1073.0, 595.0, 2724.0, 1641.0, 351.0, 2908.0, 357.0, 3079.0, 1688.0, 3556.0, 3186.0, 2406.0, 224.0, 1962.0, 1480.0, 3251.0, 11.0, 345.0, 3526.0, 1784.0, 951.0, 3668.0, 2485.0, 1958.0, 2739.0, 916.0, 950.0, 2443.0, 3684.0, 904.0, 898.0, 587.0, 552.0, 2143.0, 3481.0, 3097.0, 3067.0, 1449.0, 47.0, 616.0, 3281.0, 1259.0, 661.0, 2348.0, 562.0, 3606.0, 2496.0, 2085.0, 1271.0, 372.0, 2857.0, 3325.0, 1394.0, 1081.0, 1032.0, 918.0, 1409.0, 314.0, 899.0, 733.0, 2245.0, 381.0, 2316.0, 232.0, 2405.0, 2677.0, 1066.0, 2396.0, 2282.0, 1059.0, 2622.0, 1941.0, 959.0, 3479.0, 3124.0, 1197.0, 1777.0, 915.0, 955.0, 1648.0, 3705.0, 3061.0, 34.0, 1285.0, 1.0, 2875.0, 1150.0, 3545.0, 2664.0, 2155.0, 1097.0, 262.0, 3915.0, 971.0, 2186.0, 3702.0, 3105.0, 2280.0, 3604.0, 3515.0, 1513.0, 2331.0, 1500.0, 2803.0, 945.0, 2639.0, 3051.0, 837.0, 3408.0, 457.0, 1801.0, 2506.0, 4.0, 2469.0, 270.0, 46.0, 1235.0, 2355.0, 2346.0, 1357.0, 461.0, 3255.0, 3176.0, 3350.0, 2975.0, 2014.0, 3936.0, 2072.0, 1353.0, 2006.0, 1397.0, 2612.0, 1099.0, 1367.0, 3270.0, 938.0, 2357.0, 94.0, 412.0, 1518.0, 3591.0, 538.0, 2000.0, 2846.0, 708.0, 329.0, 2995.0, 653.0, 1280.0, 5.0, 337.0, 1022.0, 2468.0, 1569.0, 905.0, 1031.0, 900.0, 1541.0, 2926.0, 3730.0, 1900.0, 2718.0, 1021.0, 3185.0, 2746.0, 327.0, 2805.0, 3101.0, 2920.0, 3269.0, 1674.0, 477.0, 3686.0, 2077.0, 2801.0, 581.0, 2133.0, 3724.0, 3296.0, 3554.0, 3478.0, 1479.0, 3720.0, 491.0, 1014.0, 1236.0, 3134.0, 695.0, 2763.0, 1013.0, 1096.0, 1856.0, 2827.0, 248.0, 1875.0, 3211.0, 3672.0, 215.0, 3224.0, 3396.0, 469.0, 1897.0, 3528.0, 2870.0, 917.0, 930.0, 1654.0, 3328.0, 3786.0, 907.0, 3870.0, 1422.0, 2206.0, 2114.0, 2324.0, 2575.0, 919.0, 3467.0, 1047.0, 1806.0, 350.0, 230.0, 2505.0, 48.0, 182.0, 144.0, 170.0, 2141.0, 1916.0, 3081.0, 1191.0, 1086.0, 2598.0, 546.0, 1407.0, 153.0, 2635.0, 2057.0, 2037.0, 1327.0, 3145.0, 446.0, 2193.0, 1337.0, 1913.0, 195.0, 2132.0, 1804.0, 3562.0, 3706.0, 1172.0, 1042.0, 2946.0, 2514.0, 1093.0, 1616.0, 3011.0, 2151.0, 1111.0, 613.0, 1043.0, 2774.0, 2154.0, 2621.0, 52.0, 3060.0, 3723.0, 206.0, 3133.0, 1821.0, 1964.0, 211.0, 2454.0, 532.0, 218.0, 3156.0, 1586.0, 1126.0, 2096.0, 927.0, 2007.0, 778.0, 2097.0, 3117.0, 691.0, 3567.0, 1223.0, 1268.0, 1300.0, 2747.0, 1573.0, 3302.0, 671.0, 3471.0, 3825.0, 1064.0, 1299.0, 252.0, 3004.0, 2091.0, 2337.0, 61.0, 1020.0, 3763.0, 1727.0, 74.0, 3599.0, 3708.0, 465.0, 29.0, 3741.0, 3457.0, 2399.0, 781.0, 69.0, 3635.0, 3808.0, 3249.0, 2732.0, 1621.0, 1686.0, 3435.0, 3857.0, 3299.0, 3426.0, 176.0, 343.0, 2972.0, 2853.0, 272.0, 2788.0, 1393.0, 203.0, 1465.0, 801.0, 1917.0, 2431.0, 3714.0, 2967.0, 3553.0, 79.0, 3951.0, 1683.0, 3071.0, 3102.0, 302.0, 3655.0, 2261.0, 3877.0, 2266.0, 3716.0, 3699.0, 1769.0, 266.0, 1173.0, 2693.0, 3093.0, 1658.0, 277.0, 279.0, 848.0, 839.0, 2365.0, 2738.0, 1264.0, 271.0, 1269.0, 2043.0, 3855.0, 1030.0, 1346.0, 2052.0, 2142.0, 2719.0, 2574.0, 2053.0, 1410.0, 3912.0, 1381.0, 3660.0, 2446.0, 2613.0, 2314.0, 978.0, 348.0, 2168.0, 3466.0, 669.0, 3649.0, 2448.0, 2899.0, 1611.0, 2940.0, 8.0, 1463.0, 26.0, 3557.0, 1994.0, 1758.0, 414.0, 1027.0, 3088.0, 3391.0, 1936.0, 2205.0, 3861.0, 332.0, 3450.0, 2585.0, 3618.0, 425.0, 1605.0, 3827.0, 846.0, 2267.0, 2359.0, 2952.0, 2786.0, 3923.0, 1290.0, 3240.0, 3388.0, 1547.0, 338.0, 3712.0, 3063.0, 242.0, 715.0, 3679.0, 3571.0, 668.0, 1069.0, 2276.0, 1438.0, 2688.0, 2900.0, 168.0, 3539.0, 199.0, 3675.0, 2436.0, 647.0, 724.0, 82.0, 542.0, 1362.0, 117.0, 2109.0, 3246.0, 3019.0, 1904.0, 360.0, 2966.0, 482.0, 2741.0, 334.0, 2100.0, 2173.0, 1615.0, 358.0, 280.0, 3932.0, 369.0, 3547.0, 3739.0, 1788.0, 875.0, 2106.0, 3719.0, 3839.0, 1417.0, 3566.0, 3795.0, 670.0, 520.0, 208.0, 3449.0, 3274.0, 27.0, 3872.0, 2969.0, 2927.0, 2442.0, 113.0, 2084.0, 1848.0, 3882.0, 3790.0, 3926.0, 2820.0, 3922.0, 3046.0, 832.0, 3896.0, 2101.0, 1600.0, 2548.0, 2453.0, 386.0, 239.0, 1015.0, 85.0, 3077.0, 3264.0, 3340.0, 3114.0, 1729.0, 2498.0, 309.0, 1034.0, 2421.0, 3438.0, 2599.0, 405.0, 3461.0, 3813.0, 3238.0, 3399.0, 3921.0, 912.0, 1840.0, 2876.0, 319.0, 40.0, 257.0, 3287.0, 880.0, 754.0, 1874.0, 2241.0, 2553.0, 1699.0, 550.0, 1549.0, 2338.0, 1922.0, 3612.0, 1894.0, 1049.0, 1185.0, 2779.0, 3902.0, 3580.0, 2.0, 2435.0, 73.0, 1012.0, 1275.0, 783.0, 512.0, 1919.0, 3838.0, 2903.0, 507.0, 1896.0, 2263.0, 2320.0, 1515.0, 363.0, 3492.0, 1562.0, 1588.0, 408.0, 3405.0, 307.0, 1199.0, 3268.0, 186.0, 1961.0, 1428.0, 2540.0, 3284.0, 2062.0, 3624.0, 1169.0, 2513.0, 575.0, 380.0, 2696.0, 2070.0, 2130.0, 3897.0, 615.0, 50.0, 3852.0, 415.0, 1797.0, 1660.0, 506.0, 3704.0, 2816.0, 2678.0, 2122.0, 1836.0, 2126.0, 481.0, 87.0, 3577.0, 2990.0, 3200.0, 441.0, 1554.0, 346.0, 1653.0, 2202.0, 2616.0, 283.0, 3584.0, 2417.0, 2284.0, 2042.0, 3454.0, 1582.0, 2568.0, 1669.0, 2048.0, 3613.0, 1911.0, 949.0, 420.0, 1719.0, 2361.0, 41.0, 3949.0, 379.0, 2379.0, 3447.0, 2136.0, 2642.0, 3206.0, 1995.0, 3150.0, 2856.0, 2010.0, 2532.0, 382.0, 2398.0, 1798.0, 1242.0, 2414.0, 2550.0, 1084.0, 131.0, 3055.0, 2630.0, 1949.0, 1954.0, 2352.0, 2110.0, 3181.0, 2021.0, 1344.0, 3685.0, 1398.0, 1312.0, 910.0, 3738.0, 173.0, 1456.0, 3445.0, 986.0, 2848.0, 2722.0, 3696.0, 3864.0, 3707.0, 1171.0, 558.0, 356.0, 2717.0, 3204.0, 2561.0, 934.0, 2704.0, 371.0, 1831.0, 879.0, 2439.0, 3108.0, 2517.0, 1372.0, 1672.0, 807.0, 3616.0, 688.0, 2797.0, 519.0, 1211.0, 1730.0, 1446.0, 1546.0, 2445.0, 2147.0, 3475.0, 1556.0, 1580.0, 1220.0, 2373.0, 501.0, 124.0, 1216.0, 1429.0, 2683.0, 2066.0, 1881.0, 2949.0, 3090.0, 802.0, 1870.0, 407.0, 586.0, 1944.0, 2989.0, 1921.0, 1226.0, 2380.0, 3489.0, 3886.0, 2190.0, 2919.0, 2495.0, 2392.0, 753.0, 1484.0, 1667.0, 2363.0, 3308.0, 1077.0, 1805.0, 2714.0, 3173.0, 216.0, 1694.0, 736.0, 1321.0, 1483.0, 608.0, 1485.0, 1347.0, 2789.0, 25.0, 2699.0, 1792.0, 2065.0, 2709.0, 2860.0, 1845.0, 2752.0, 494.0, 2273.0, 62.0, 2710.0, 866.0, 3841.0, 1566.0, 3153.0, 973.0, 3600.0, 1240.0, 1270.0, 923.0, 2159.0, 896.0, 3258.0, 147.0, 3439.0, 2947.0, 2643.0, 1212.0, 1258.0, 2527.0, 1419.0, 1217.0, 316.0, 1293.0, 2420.0, 3130.0, 2474.0, 2879.0, 991.0, 3317.0, 2713.0, 3440.0, 2463.0, 1619.0, 2539.0, 3070.0, 3040.0, 2163.0, 508.0, 428.0, 1816.0, 2533.0, 2736.0, 1969.0, 3054.0, 2176.0, 288.0, 2794.0, 2239.0, 2290.0, 1234.0, 3735.0, 2166.0, 19.0, 2071.0, 2394.0, 2858.0]
        # --- for this data need to find popular lm, lf
    elif dataset == 'yahoo':
        X = DL.load_user_item_matrix_yahoo()
        T = DL.load_gender_vector_yahoo()
        X_filled = DL.load_user_item_matrix_yahoo_Impute()
        # updated list with each users min rating 20
        L_m = [2587, 3581, 4289, 4049, 132, 916, 7038, 1111, 6790, 1691, 372, 5818, 7266, 1946, 3713, 7661, 2450, 6177, 1487, 4249, 6787, 6262, 4743, 6590, 7262, 8346, 7565, 5073, 5061, 5003, 1442, 7660, 1409, 7064, 2956, 7451, 3425, 1367, 5300, 5908, 7063, 2858, 3210, 292, 7288, 6750, 3123, 4507, 1278, 5373, 5040, 1134, 7895, 6763, 6539, 1483, 2802, 2998, 1066, 4016, 6547, 5164, 3471, 1430, 5532, 1556, 1106, 3239, 3887, 4217, 1415, 7558, 3582, 3534, 6574, 4343, 5729, 762, 6635, 4639, 802, 8568, 3948, 3724, 5577, 4789, 3326, 4481, 6185, 1165, 6811, 5592, 1615, 3755, 6376, 2590, 3258, 6582, 5582, 1376, 1799, 3199, 1555, 5227, 4358, 5265, 4522, 144, 6858, 8287, 1863, 6925, 6292, 6412, 6482, 4004, 5216, 7220, 7759, 2686, 2925, 5130, 2368, 177, 2366, 5013, 3249, 3245, 5937, 578, 2260, 984, 1351, 8141, 3940, 5555, 2115, 4459, 8315, 2693, 1867, 4252, 8136, 3153, 3186, 4056, 3487, 1947, 5935, 769, 1744, 6789, 5814, 4962, 6116, 2677, 8529, 4870, 3570, 6718, 4068, 2947, 1805, 5043, 6455, 6992, 6067, 2930, 3394, 6270, 4244, 7601, 8464, 2648, 5796, 6165, 2815, 5972, 6753, 6857, 3317, 3630, 327]
        L_f = [8569, 8176, 8494, 5099, 8218, 8533, 4931, 126, 760, 7813, 8563, 4468, 8219, 562, 8319, 4636, 1100, 8215, 8379, 1642, 8072, 8323, 3618, 7020, 7864, 7628, 4804, 441, 323, 719, 5302, 7885, 8390, 2315, 8306, 8238, 8301, 8253, 1160, 2405, 1970, 8177, 6944, 5675, 8093, 7656, 1576, 1362, 550, 4819, 6957, 939, 4234, 2258, 6970, 5448, 352, 7651, 7490, 8349, 7600, 54, 7781, 6221, 100, 7478, 92, 8430, 7081, 7587, 5039, 4233, 7592, 2972, 7498, 8506, 4903, 7778, 282, 8235, 6801, 6357, 8474, 303, 7972, 7630, 1621, 6948, 5984, 5391, 52, 36, 6991, 4464, 4893, 7883, 8039, 423, 7732, 3964, 291, 8531, 235, 5225, 1971, 1292, 4280, 5291, 7589, 210, 654, 361, 7557, 8459, 7834, 8134, 6932, 8227, 1101, 587, 7983, 4274, 606, 6967, 7005, 634, 7590, 110, 5841, 7860, 5521, 215, 4010, 542, 7996, 7466, 7990, 7644, 8418, 616, 8425, 8470, 8033, 388, 7756, 382, 5967, 7769, 4486, 5464, 7768, 384, 7705, 6761, 8370, 1908, 8092, 8318, 8398, 5825, 6937, 7772, 8362, 7703, 485, 7835, 8123, 5443, 2023, 8165, 5623, 7737, 5890, 8249, 2906, 4629, 8188, 149, 468, 407, 7987, 4892, 8003, 7964, 5376, 5687, 7655, 563, 6910, 4963, 7999, 7796, 8041, 4741, 4203, 4699, 8485, 6895, 5529, 6193, 7896, 597, 5159, 8027, 7479, 818, 7798, 6587, 601, 3807, 3, 8572, 6904, 2052, 621, 8266, 5850, 7483, 8048, 3941, 8486, 5404, 7936, 5134, 8303, 325, 3831, 8057, 6405, 8157, 373, 3013, 5621, 87, 6894, 8071, 5614, 5605, 8091, 8274, 8206, 329, 6488, 6837, 3826, 2323, 5025, 2494, 8058, 62, 3071, 6174, 5884, 5838, 7707, 5865, 8070, 356, 1250, 5539, 125, 7240, 7949, 3859, 182, 69, 4271, 8481, 8061, 5630, 7854, 3509, 7958, 10, 7502, 4525, 8083, 6462, 7873, 557, 154, 137, 5956, 7809, 8180, 6105, 3357, 5307, 5485, 1285, 6343, 7612, 8046, 7459, 6922, 70, 1713, 855, 8438, 204, 7945, 2085, 4337, 7747, 7633, 7941, 7012, 7843, 2567, 2522, 1872, 620, 558, 8226, 4851, 7973, 8233, 527, 7697, 213, 8214, 8421, 541, 8240, 4466, 6756, 7912, 8060, 5421, 5665, 2155, 3881, 7994, 3195, 7131, 8205, 2555, 6930, 7539, 4152, 7731, 3697, 7968, 607, 271, 5809, 239, 11, 4424, 3692, 8232, 7, 6239, 8295, 3073, 365, 5974, 1922, 1136, 2986, 7853, 2227, 7795, 6839, 1213, 8239, 524, 8124, 5579, 5530, 276, 519, 4813, 5552, 5034, 7704, 7788, 8162, 5308, 2234, 1416, 8472, 8225, 3292, 7842, 8154, 6999, 5342, 4514, 7634, 7613, 820, 8095, 3794, 6161, 102, 8327, 253, 7810, 7443, 1043, 107, 3949, 7741, 25, 254, 4981, 7519, 411, 3838, 7829, 8155, 8208, 5768, 8312, 3293, 6015, 7525, 8203, 71, 6997, 8244, 8326, 5755, 7579, 8343, 2017, 2386, 6849, 5052, 6091, 2583, 2088, 422, 8490, 4769, 469, 514, 6897, 575, 763, 3314, 3883, 8160, 8189, 5672, 7211, 5553, 6266, 8211, 7706, 8350, 805, 455, 5058, 4900, 403, 7775, 7876, 7461, 217, 6908, 8037, 7620, 7982, 1785, 7955, 8434, 8289, 7098, 6018, 5919, 5878, 5245, 8537, 8273, 538, 7838, 3614, 8212, 8193, 8210, 13, 8030, 5800, 842, 8250, 8269, 3580, 6211, 7520, 566, 8143, 8373, 6444, 3337, 8159, 4258, 7708, 8204, 7848, 7567, 151, 7937, 694, 473, 8190, 248, 8264]

    # outside loop
    L_m = list(map(lambda x: x-1, L_m))
    L_f = list(map(lambda x: x-1, L_f))

    longtail_item = np.loadtxt('ml-'+dataset+'/longtail_item.dat', dtype=int)
    longtail_item = list(longtail_item)
    popular_item = np.loadtxt('ml-'+dataset+'/popular_item.dat', dtype=int)
    popular_item = list(popular_item)

    with open('ml-'+dataset+'/Dist/combine_personalized_recommendations_top100.json') as json_file:
        item_choice = json.load(json_file)

    long_Lm = [item_id for item_id in L_m if item_id in longtail_item]
    long_Lf = [item_id for item_id in L_f if item_id in longtail_item]
    all_long_tail_items = set(long_Lm).union(set(long_Lf))
    not_in_Lm_or_Lf = set(longtail_item) - all_long_tail_items
    not_in_Lm_or_Lf = list(not_in_Lm_or_Lf)
    # print(not_in_Lm_or_Lf)

    popular_Lm = [item_id for item_id in L_m if item_id in popular_item]
    popular_Lf = [item_id for item_id in L_f if item_id in popular_item]
    print(f'popular_Lm: {popular_Lm}')
    print(f'popular_Lf: {popular_Lf}')


    popular_items_added_in_males = {}
    popular_items_added_in_females = {}

    # Calculate average ratings and initial count
    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor

    # Obfuscation starts
    X_obf = np.copy(X)
    total_added = 0

    for index, user in enumerate(X):
        print(f"Processing User: {index}")
        rate = sum(1 for rating in user if rating > 0)  # Count of non-zero ratings for the user
        k = rate * p #math.ceil(rate * p)  # Total items to add

        # Calculate two proportions of `k`
        if k == 1 :
            k1 = k
            k2 = 0
        else:
            k1 = 0.7 * k
            k2 = 0.3 * k
            print(f"k -> {k}, k1 {k1} & k2 {k2}")

        greedy_index = 0
        added1 = 0
        added2 = 0
        mylist = list(item_choice.values())
        safety_counter = 0
        print(f"User: {index}, No of Ratings: {rate}, p:{p} & k = {k}, k1 = {k1}, k2 = {k2}")

        # --- First Proportion: Add items without checking for long-tail constraint ---
        while added1 < k1 and safety_counter < 100:
            if greedy_index >= len(mylist[index]):
                safety_counter = 100
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                movie_id = int(vec[greedy_index])  # Get movie ID for greedy mode
            elif sample_mode == 'random':
                movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (no constraints): {X_obf[index, movie_id]} for movie: {movie_id}")
                added1 += 1

                # Track if the added item belongs to `popular_Lf` for male users & popular_Lm` for female users
                if T[index] == 0 and movie_id in popular_Lf:
                    if movie_id not in popular_items_added_in_males:
                        popular_items_added_in_males[movie_id] = []
                    popular_items_added_in_males[movie_id].append(index)
                elif T[index] == 1 and movie_id in popular_Lm:
                    if movie_id not in popular_items_added_in_females:
                        popular_items_added_in_females[movie_id] = []
                    popular_items_added_in_females[movie_id].append(index)

            safety_counter += 1

        # --- Second Proportion: Add only if the movie is in the long-tail items ---
        while added2 < k2 and safety_counter < 200:
            if greedy_index >= len(mylist[index]):
                safety_counter = 200
                continue

            vec = mylist[index]
            if sample_mode == 'greedy':
                #movie_id = int(vec[greedy_index]) #.58 # Get movie ID for greedy mode
                #movie_id = int(not_in_Lm_or_Lf[greedy_index]) #.61
                if T[index] == 0:
                    movie_id = int(long_Lf[greedy_index])
                elif T[index] == 1:
                    movie_id = int(long_Lm[greedy_index])
            elif sample_mode == 'random':
                #movie_id = int(vec[np.random.randint(0, len(vec))])  # Get movie ID for random mode
                if T[index] == 0:
                    movie_id = int(long_Lf[np.random.randint(0, len(long_Lf))])
                elif T[index] == 1:
                    movie_id = int(long_Lm[np.random.randint(0, len(long_Lm))])

            greedy_index += 1

            rating_count = sum(1 if x > 0 else 0 for x in X_obf[:, movie_id])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:
                X_obf[index, movie_id] = avg_ratings[movie_id]  # Assign average rating
                print(f"Added rating (long-tail only): {X_obf[index, movie_id]} for movie: {movie_id}")
                added2 += 1

            safety_counter += 1

        total_added += (added1 + added2)


    # --- Remove Popular_Lf Items Added by Male Users from Female Users ---
    for movie_id, male_users in popular_items_added_in_males.items():
        print(f"Removing {len(male_users)} ratings for movie {movie_id} from female users...")

        # Track how many ratings we need to remove
        ratings_to_remove = len(male_users)  # Number of ratings to remove

        # Iterate over users to remove exactly `ratings_to_remove` ratings
        removed_count = 0  # Track removed ratings count
        for user_index, user in enumerate(X):
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                if removed_count >= ratings_to_remove:
                    break  # Stop if we have removed enough ratings

                if T[user_index] == 1 and X_obf[user_index, movie_id] != 0:  # Female user
                    X_obf[user_index, movie_id] = 0  # Remove rating
                    removed_count += 1  # Increment the removed count

    for movie_id, female_users in popular_items_added_in_females.items():
        print(f"Removing {len(female_users)} ratings for movie {movie_id} from male users...")

        # Track how many ratings we need to remove
        ratings_to_remove = len(female_users)  # Number of ratings to remove

        # Iterate over users to remove exactly `ratings_to_remove` ratings
        removed_count = 0  # Track removed ratings count

        for user_index, user in enumerate(X):
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                if removed_count >= ratings_to_remove:
                    break  # Stop if we have removed enough ratings

                # Check if the user is male and has rated the movie
                if T[user_index] == 0 and X_obf[user_index, movie_id] != 0:
                    X_obf[user_index, movie_id] = 0  # Remove rating
                    removed_count += 1  # Increment the removed count

        # print(f"Removed {removed_count} ratings for movie {movie_id}.")


    # --- Ensure Consistent Popular Item Counts ---
    # for item_id in popular_Lm + popular_Lf:
    #     original_count = sum(1 if x > 0 else 0 for x in X[:, item_id])
    #     obfuscated_count = sum(1 if x > 0 else 0 for x in X_obf[:, item_id])
    #
    #     if obfuscated_count > original_count:
    #
    #         excess = obfuscated_count - original_count
    #         #print(f"Reducing {excess} count for item {item_id} to match original...")
    #         for user_index in np.argwhere(X_obf[:, item_id] > 0).flatten():
    #
    #             rating_in_X = sum(1 if x > 0 else 0 for x in X[user_index, :])
    #
    #             if rating_in_X > 20:
    #
    #
    #                 if T[user_index] == 0 and movie_id in popular_Lm:
    #                     if excess <= 0:
    #                         break
    #                     X_obf[user_index, item_id] = 0
    #                     print(user_index)
    #                     excess -= 1
    #                 elif T[user_index] == 1 and movie_id in popular_Lf:
    #                     if excess <= 0:
    #                         break
    #                     X_obf[user_index, item_id] = 0
    #                     print(user_index)
    #                     excess -= 1
    #
    #             # if T[user_index] == 0 and movie_id in popular_Lm:
    #             #     if excess <= 0:
    #             #         break
    #             #     X_obf[user_index, item_id] = 0
    #             #     excess -= 1
    #             # elif T[user_index] == 1 and movie_id in popular_Lf:
    #             #     if excess <= 0:
    #             #         break
    #             #     X_obf[user_index, item_id] = 0
    #             #     excess -= 1

    # Save the obfuscated data to a file
    output_file = 'ml-'+dataset+'/SBlur/'
    print(output_file)
    with open(output_file + "SBlur_Removal_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat", 'w') as f:
        for index_user, user in enumerate(X_obf):
            for index_movie, rating in enumerate(user):
                if rating > 0:
                    f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(int(np.round(rating))) + "::000000000\n")

    return X_obf

def old_PerBlur_No_Removal():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[1]
    top = 100
    p = 0.05
    notice_factor = 2
    dataset = ['ML', 'Fx', 'LFM', 'Li'][0]
    if dataset == 'ML':  # load_user_item_matrix_1m_all
        X = MD.load_user_item_matrix_1m()  # load_user_item_matrix_1m_trainingSet
        # X = MD.load_user_item_matrix_1m_trainingSet()
        T = MD.load_gender_vector_1m()  #
        X_test = MD.load_user_item_matrix_1m_testSet()
        X_filled = MD.load_user_item_matrix_1m_complet()

        # X = MD.load_user_item_matrix_100k()
        # T = MD.load_gender_vector_100k()

    elif dataset == 'Fx':

        import FlixsterDataSub as FDS
        X = FDS.load_user_item_matrix_FX_All()
        # X = FDS.load_user_item_matrix_FX_TrainingSet()
        X_test = FDS.load_user_item_matrix_FX_Test()
        T = FDS.load_gender_vector_FX()
        X_filled = FDS.load_user_item_FX_Complet()
    elif dataset == 'LFM':
        import LastFMData as LFM
        # X = LFM.load_user_item_matrix_lfm_Train()  # LFM.load_user_item_matrix_lfm_All()
        X = LFM.load_user_item_matrix_lfm_All()  # load_user_item_matrix_lfm_Train LFM.load_user_item_matrix_lfm_All()
        T = LFM.load_gender_vector_lfm()
        X_test = LFM.load_user_item_matrix_lfm_Test()
        # X_filled = LFM.load_user_item_matrix_lfm_complet()
    else:
        import LibimSeTiData as LD
        X, T, _ = LD.load_libimseti_data_subset()


    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = [rating for rating in X[:, item_id] if rating > 0 ]
        avg_ratings[item_id] = np.average(ratings) if ratings else 0
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor

    # 1: get the set of most correlated movies, L_f and L_m:
    # lastFM/With_Fancy_KNN/lfm_NN_All_AllUsers_Neighbors_Weight_K_30_item_choice_TopAllIndicativeItems.json  lfm_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems
    # ml1m/ML1M_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems.json NN_All_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems
    # Flixster/With_Fancy_KNN/FX_NN_TrainingSet_2370_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems.json  FX_NN_All_2370_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems
    # lfm_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top1000IndicativeItems
    # ml-1m/PerBlur/test_Confidence_Score_Items_Selection/NN_All_AllUsers_Neighbors_Weight_K_30_item_choice_Top100IndicativeItems.json
    #with open('ml-1m/ML1M_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top100IndicativeItems_noRemoval.json') as json_file:
    #with open('ml-100k/ML100k_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top100IndicativeItems_noRemoval.json') as json_file:
    with open(
            'ml-1m/NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems_noRemoval.json') as json_file:

        item_choice = json.load(json_file)

    # Now, where we have the two lists, we can start obfuscating the data:
    X_obf = np.copy(X)
    total_added = 0
    for index, user in enumerate(X):
        print(index)
        #k = 0
        rate = 0
        for rating in user:
            if rating > 0:
                #k += 1
                rate +=1
        #k *= p
        k = rate * p
        greedy_index = 0
        added = 0
        mylist = list(item_choice.values())
        safety_counter = 0
        print(f"User: {index}, {user} and no of rating: {rate}, p:{p} & k = {k}")
        while added < k and safety_counter < 100: # 1000
            if greedy_index >= len(mylist[index]):
                safety_counter = 100
                continue
            if sample_mode == 'greedy':
                vec = mylist[index]
                movie_id = vec[greedy_index]
                movie_id = movie_id
            if sample_mode == 'random':
                movie_id = vec[np.random.randint(0, len(vec))]
                movie_id = int(movie_id)
            greedy_index += 1

            rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, movie_id]])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:# and X_test [index, int(movie_id) ] == 0:
                X_obf[index, movie_id] =  avg_ratings[int(movie_id)] # X_filled[index, movie_id] #  #
                print(f"obf: {X_obf[index, movie_id]}, movie: {movie_id}")
                added += 1
            safety_counter += 1
        total_added += added
        print(f"user: {index}, added items: {added}, total_added: {total_added}")

    # output the data in a file:

    output_file = ""
    if dataset == 'ML':
        output_file = "ml-1m/PerBlur/Top50/" # ml1m/
        with open(output_file + "PerBlur_ML1M_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(
                            str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                                int(np.round(rating))) + "::000000000\n")


    elif dataset == 'Fx':
        output_file = "Flixster/BlurSome/Top-100-NoRemoval/"# "Flixster/BlurSome/Top-100/" FX
        with open(output_file + "All_thresh20_NoRemoval_blurSome_FX_obfuscated_Top100IndicativeItems_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(
                notice_factor)  + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")
    elif dataset == 'LFM':
        output_file = "lastFM/PerBlur/Top-All-NoRemoval/"
        with open(output_file + "All_LFM_NoRemoval_PerBlur_obfuscated_TopAll_" + rating_mode + "_" + sample_mode + "_" + str(p) +
                  "_" +str( notice_factor)  + ".dat",
                      'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")

    else:
        with open("libimseti/LST_blurmepp_obfuscated_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat", 'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user+1) + "::" + str(index_movie+1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")


    return X_obf

#-----------------------------------------------

"""PerBlur with removal function for obfuscatibg the user-item matrix"""


def PerBlur():

    sample_mode = list(['random', 'sampled', 'greedy'])[2]
    rating_mode = list(['highest', 'avg', 'pred'])[1]
    removal_mode = list(['random', 'strategic'])[1]
    top = 100
    p = 0.05
    notice_factor = 2

    # L_m = L_m100k
    # L_f = L_f100k

    dataset = ['ML', 'Fx', 'LFM', 'Li'][0]
    if dataset == 'ML':  # load_user_item_matrix_1m_all

        # X = MD.load_user_item_matrix_1m()#MD.load_user_item_matrix_1m_trainingSet()  #
        # T = MD.load_gender_vector_1m()  #
        # X_test = MD.load_user_item_matrix_1m_testSet()
        X_filled = MD.load_user_item_matrix_1m_complet()

        X = MD.load_user_item_matrix_100k()
        T = MD.load_gender_vector_100k()

    elif dataset == 'Fx':

        import FlixsterDataSub as FDS
        # X = FDS.load_user_item_matrix_FX_All()
        X = FDS.load_user_item_matrix_FX_TrainingSet()
        X_test = FDS.load_user_item_matrix_FX_Test()
        T = FDS.load_gender_vector_FX()
        #X_filled = FDS.load_user_item_FX_Complet()
    elif dataset == 'LFM':
        import LastFMData as LFM
        # X = LFM.load_user_item_matrix_lfm_Train()  # LFM.load_user_item_matrix_lfm_All()
        X = LFM.load_user_item_matrix_lfm_All()  # load_user_item_matrix_lfm_Train LFM.load_user_item_matrix_lfm_All()
        T = LFM.load_gender_vector_lfm()
        X_test = LFM.load_user_item_matrix_lfm_Test()
        X_filled = LFM.load_user_item_matrix_lfm_complet()
    else:
        import LibimSeTiData as LD
        X, T, _ = LD.load_libimseti_data_subset()


    avg_ratings = np.zeros(shape=X.shape[1])
    initial_count = np.zeros(shape=X.shape[1])
    for item_id in range(X.shape[1]):
        ratings = []
        for rating in X[:, item_id]:
            if rating > 0:
                ratings.append(rating)
        if len(ratings) == 0:
            avg_ratings[item_id] = 0
        else:
            avg_ratings[item_id] = np.average(ratings)
        initial_count[item_id] = len(ratings)
    max_count = initial_count * notice_factor
    # 1: get the set of most correlated movies, L_f and L_m:
    # lastFM/With_Fancy_KNN/lfm_NN_All_AllUsers_Neighbors_Weight_K_30_item_choice_TopAllIndicativeItems.json
    # ml1m/ML1M_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems.json
    # Flixster/With_Fancy_KNN/FX_NN_TrainingSet_2370_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems.json
    #with open('ml-1m/ML1M_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top100IndicativeItems_noRemoval.json') as json_file:
    with open('ml-100k/ML100k_NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top100IndicativeItems_noRemoval.json') as json_file:
    #with open('ml-1m/NN_TrainingSet_AllUsers_Neighbors_Weight_K_30_item_choice_Top50IndicativeItems_noRemoval.json') as json_file:

        item_choice = json.load(json_file)

    # Now, where we have the two lists, we can start obfuscating the data:
    X_obf = np.copy(X)
    total_added = 0
    for index, user in enumerate(X):
        print(index)
        k = 0
        for rating in user:
            if rating > 0:
                k += 1
        k *= p
        greedy_index = 0
        added = 0
        mylist = list(item_choice.values())
        safety_counter = 0
        print(f"user: {index}, {user}, k = {k}")

        while added < k and safety_counter < top:
            if greedy_index >= len(mylist[index]):
                safety_counter = top
                continue
            if sample_mode == 'greedy':
                vec = mylist[index]
                movie_id = vec[greedy_index]
            if sample_mode == 'random':
                movie_id = vec[np.random.randint(0, len(vec))]
            greedy_index += 1
            rating_count = sum([1 if x > 0 else 0 for x in X_obf[:, movie_id]])
            if rating_count > max_count[movie_id]:
                continue

            if X_obf[index, movie_id] == 0:# and X_test [index, int(movie_id) ] == 0:

                X_obf[index, movie_id] =  avg_ratings[int(movie_id)] # X_filled[index, movie_id]
                added += 1
            safety_counter += 1
        total_added += added



    # Now remove ratings from users that have more than 20 ratings equally:
    if removal_mode == "strategic":
        nr_many_ratings = 0
        for user in X:
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                nr_many_ratings += 1
        print("nbr user with profile length > 20: ", nr_many_ratings)
        print("total_added: ", total_added)
        nr_remove = total_added / nr_many_ratings
        print("nr_remove: ", nr_remove)

        for user_index, user in enumerate(X):
            print("user: ", user_index)
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                index_m = 0
                index_f = 0
                rem = 0
                if T[user_index] == 1:
                    safety_counter = 0
                    # We note that if we add safety_counter < 1000 in the while we have a higher accuracy than if we keep it in the if
                    while (rem < nr_remove) and safety_counter < top:
                        #if index_f >= len(L_f100k):
                        if index_f >= len(L_f):  # and safety_counter < 1000:
                            safety_counter = top
                            continue

                        to_be_removed_indecies = L_f[index_f]
                        # to_be_removed_indecies = L_f100k[index_f]
                        index_f += 1

                        if X_obf[user_index, int(to_be_removed_indecies)-1] != 0:
                            X_obf[user_index, int(to_be_removed_indecies)-1 ] = 0
                            rem += 1
                        safety_counter += 1

                elif T[user_index] == 0:

                    while (rem < nr_remove) and safety_counter < top:
                        # if index_m >= len(L_m100k):
                        if index_m >= len(L_m):  # and safety_counter < 1000:
                            safety_counter = top
                            continue

                        to_be_removed_indecies = L_m[index_m]
                        # to_be_removed_indecies = L_m100k[index_m]
                        index_m += 1

                        if X_obf[user_index, int(to_be_removed_indecies) - 1] != 0:
                            X_obf[user_index, int(to_be_removed_indecies) - 1] = 0
                            rem += 1
                        safety_counter += 1
    else:
        # Now remove ratings from users that have more than 200 ratings equally:

        nr_many_ratings = 0
        for user in X:
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                nr_many_ratings += 1
        nr_remove = total_added / nr_many_ratings

        for user_index, user in enumerate(X):
            rating_count = sum([1 if x > 0 else 0 for x in user])
            if rating_count > 20:
                to_be_removed_indecies = np.random.choice(np.argwhere(user > 0)[:, 0], size=(int(nr_remove),)) #  replace=False
                X_obf[user_index, to_be_removed_indecies] = 0


    # output the data in a file:

    output_file = ""
    if dataset == 'ML':
        output_file = "ml-100k/PerBlur/" # ml1m/
        with open(output_file + "thresh20_PerBlur_ML100k_obfuscated_Top100_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + "_" + str(removal_mode) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(
                            str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                                int(np.round(rating))) + "::000000000\n")


    elif dataset == 'Fx':
        output_file = "Flixster/BlurSome/Top-50-ExcludeTest/"# "Flixster/BlurSome/Top-100/" FX
        with open(output_file + "TrainingSet_thresh20_blurSome_FX_obfuscated_Top50IndicativeItems_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" + str(
                notice_factor) + "_" + str(removal_mode) + ".dat",
                  'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")
    elif dataset == 'LFM':
        output_file = "lastFM/PerBlur/Top-500-RightSplit/"
        with open(output_file + "All_LFM_PerBlur_obfuscated_Top500_" + rating_mode + "_" + sample_mode + "_" + str(p) + "_" +str( notice_factor) + "_" + str(removal_mode) + ".dat",
                      'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user + 1) + "::" + str(index_movie + 1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")

    else:
        with open("libimseti/LST_blurmepp_obfuscated_" + sample_mode + "_" + str(p) + "_" + str(notice_factor) + ".dat", 'w') as f:
            for index_user, user in enumerate(X_obf):
                for index_movie, rating in enumerate(user):
                    if rating > 0:
                        f.write(str(index_user+1) + "::" + str(index_movie+1) + "::" + str(
                            int(np.round(rating))) + "::000000000\n")


    return X_obf




# blurMe()
#blurMePP()
#Personalized_list_User()# # This will create the lists of indicative items. It goes before the PerBlur function
#PerBlur()
#PerBlur_No_Removal() ### --- modify by Roy
#old_PerBlur_No_Removal() ### --- as per PerBlur implementation
#SmartBlur()
# SmartBlur_Removal()


## ----- Note ----- ##
### --- existing Personalized_list_User() method convert the gender indicative items into 0-based index
### --- so PerBlur() do not need to additionally substract 1 for the index consistency with rating matrix
### --- PerBlur() & PerBlur_No_Removal() implementation is ok

